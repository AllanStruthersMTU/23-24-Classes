(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.4' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    772915,      15442]
NotebookOptionsPosition[    759779,      15226]
NotebookOutlinePosition[    760298,      15245]
CellTagsIndexPosition[    760255,      15242]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["MA2330", "Title",
 CellChangeTimes->{{3.9022119421591744`*^9, 3.9022119446720896`*^9}, {
  3.902212079422366*^9, 
  3.9022120841135693`*^9}},ExpressionUUID->"2411f8aa-dda1-4de9-9dc1-\
fddd9660e667"],

Cell[CellGroupData[{

Cell["Chapter 3 : Determinants", "Section",
 CellChangeTimes->{{3.902212090346334*^9, 3.9022121014134884`*^9}, 
   3.903769019997009*^9, {3.903769131050271*^9, 3.903769135610148*^9}, {
   3.90584117835112*^9, 
   3.9058411843358283`*^9}},ExpressionUUID->"124a94b1-5c4b-4bd3-9429-\
d3d515e88560"],

Cell["\<\
You can compute the determinant by a cofactor expansion on any row or column\
\>", "Text",
 CellChangeTimes->{{3.906210575118493*^9, 3.9062106002277513`*^9}, {
  3.9062106426031322`*^9, 
  3.9062106434945726`*^9}},ExpressionUUID->"e4d8c6ca-3dec-4751-be99-\
3e01f0531679"],

Cell[TextData[{
 "Theorem 1: The ",
 StyleBox["cofactor expansion",
  FontVariations->{"Underline"->True}],
 " about the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["i", "th"], TraditionalForm]],ExpressionUUID->
  "e6531d3b-b272-4bc8-9dbd-239a967bc4c5"],
 " row \n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"det", "(", "A", ")"}], "=", 
    RowBox[{
     RowBox[{
      SubsuperscriptBox["\[Sum]", 
       RowBox[{"j", "=", "1"}], "n"], 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], 
        RowBox[{"i", "+", "j"}]], 
       SubscriptBox["a", 
        RowBox[{"i", ",", "j"}]], " ", 
       RowBox[{"det", "(", 
        SubscriptBox["\[DoubleStruckCapitalA]", 
         RowBox[{"i", ",", "j"}]], ")"}]}]}], "=", 
     RowBox[{
      RowBox[{
       SubsuperscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "n"], 
       RowBox[{
        SubscriptBox["a", 
         RowBox[{"i", ",", "j"}]], " ", 
        SubscriptBox["C", 
         RowBox[{"i", ",", "j"}]]}]}], "=", 
      RowBox[{
       RowBox[{
        SubscriptBox["a", 
         RowBox[{"i", ",", "1"}]], 
        SubscriptBox["C", 
         RowBox[{"i", ",", "1"}]]}], "+", "\[Ellipsis]", "+", " ", 
       RowBox[{
        SubscriptBox["a", 
         RowBox[{"i", ",", "n"}]], 
        SubscriptBox["C", 
         RowBox[{"i", ",", "n"}]]}]}]}]}]}], TraditionalForm]],ExpressionUUID->
  "7c19defa-7067-4909-a5bc-3bddf474a4b7"],
 "\nor the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["j", "th"], TraditionalForm]],ExpressionUUID->
  "72b3bf0f-b0ed-4d20-b833-b09f75449eb9"],
 " column\n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"det", "(", "A", ")"}], "=", 
    RowBox[{
     RowBox[{
      SubsuperscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], 
        RowBox[{"i", "+", "j"}]], 
       SubscriptBox["a", 
        RowBox[{"i", ",", "j"}]], " ", 
       RowBox[{"det", "(", 
        SubscriptBox["\[DoubleStruckCapitalA]", 
         RowBox[{"i", ",", "j"}]], ")"}]}]}], "=", 
     RowBox[{
      RowBox[{
       SubscriptBox["a", 
        RowBox[{"1", ",", "j"}]], 
       SubscriptBox["C", 
        RowBox[{"1", ",", "j"}]]}], "+", "\[Ellipsis]", "+", " ", 
      RowBox[{
       SubscriptBox["a", 
        RowBox[{"n", ",", "j"}]], 
       SubscriptBox["C", 
        RowBox[{"n", ",", "j"}]]}]}]}]}], TraditionalForm]],ExpressionUUID->
  "72880228-292d-4f4c-92a7-ec4c6ba77720"]
}], "Text",
 CellChangeTimes->{{3.905945227546233*^9, 3.905945368961128*^9}, {
  3.9059457850361557`*^9, 3.9059460302952585`*^9}, {3.906210652558104*^9, 
  3.90621066759772*^9}},
 Background->RGBColor[
  0.94, 0.88, 0.94],ExpressionUUID->"14a59732-0e99-48f0-92b0-dd704d063d65"],

Cell[TextData[{
 "It is much more efficient to compute the determinant by row reducing the \
matrix to Echelon form. If you row reduce a matrix A to an echelon form U \
without scaling any rows and r row interchanges then \n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"det", "(", "A", ")"}], "=", 
    RowBox[{
     RowBox[{
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"-", "1"}], ")"}], "r"], 
      RowBox[{"det", "(", "U", ")"}]}], "=", 
     RowBox[{
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], "r"], 
       SubsuperscriptBox["\[CapitalPi]", 
        RowBox[{"i", "=", "1"}], "n"], 
       SubscriptBox["u", 
        RowBox[{"i", ",", "i"}]]}], "=", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], "r"], 
       SubscriptBox["u", 
        RowBox[{"1", ",", "1"}]], 
       SubscriptBox["u", 
        RowBox[{"2", ",", "2"}]], "\[Ellipsis]", " ", 
       SubscriptBox["u", 
        RowBox[{"n", ",", "n"}]]}]}]}]}], TraditionalForm]],ExpressionUUID->
  "87fe82be-5c09-4e9c-aa89-9f60c4caf2b1"]
}], "Text",
 CellChangeTimes->{{3.906210678187027*^9, 
  3.9062109569276733`*^9}},ExpressionUUID->"f28e31d4-cc5c-4d1a-bf6d-\
848cc0584008"],

Cell[TextData[{
 "The square matrix equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"A", " ", "x"}], "=", "0"}], TraditionalForm]],ExpressionUUID->
  "40126a39-2acf-4203-9d26-dc08ee8407ce"],
 " has non-trivial solutions iff ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"det", "(", "A", ")"}], "=", "0"}], TraditionalForm]],
  ExpressionUUID->"09d4bcd5-3ce0-4658-9d97-f479d92c4d99"],
 ". "
}], "Text",
 CellChangeTimes->{{3.905945227546233*^9, 3.905945368961128*^9}, {
  3.9059457850361557`*^9, 3.9059460302952585`*^9}, {3.906210652558104*^9, 
  3.90621066759772*^9}, {3.906211774946991*^9, 3.9062118207610416`*^9}},
 Background->RGBColor[
  0.94, 0.88, 0.94],ExpressionUUID->"c0e0a35b-87d2-4ef4-af5e-e3753637c85c"]
}, Closed]],

Cell[CellGroupData[{

Cell["5.1 Eigenvalues and Eigenvectors", "Section",
 CellChangeTimes->{{3.9022121076966515`*^9, 3.9022121582154217`*^9}, {
  3.902753149564061*^9, 3.902753160454166*^9}, {3.903257170993367*^9, 
  3.9032571816654167`*^9}, {3.9033481088363304`*^9, 3.9033481177150135`*^9}, {
  3.903769157829028*^9, 3.903769170909472*^9}, {3.904190606836274*^9, 
  3.904190626941572*^9}, {3.904564891951187*^9, 3.9045649092356987`*^9}, {
  3.9058412072888966`*^9, 3.9058412162703347`*^9}, {3.906211891962486*^9, 
  3.9062119028535643`*^9}},ExpressionUUID->"df3861a8-67e3-4d73-9619-\
5c53beb7e949"],

Cell[TextData[{
 "The transformation ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "\[Rule]", 
    RowBox[{"A", " ", "x"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "e029cec3-7aa9-486c-83a8-c483a7380726"],
 " for a square matrix can have special directions where the input lines up \
with the output. We can draw pictures for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["\[DoubleStruckCapitalR]", "2"], "\[Rule]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "2"]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "d0549e62-2c5b-434f-b165-5cb2ed0dc2b8"],
 "."
}], "Text",
 CellChangeTimes->{{3.906211922274292*^9, 3.9062119632737007`*^9}, {
  3.9062123836027546`*^9, 
  3.9062124207144156`*^9}},ExpressionUUID->"3f80bb22-2593-48af-9599-\
f3b0854e41b2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"A", "=", 
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"3", "1"},
      {"1", "3"}
     }], "\[NoBreak]", ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Graphics", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"LightBlue", ",", " ", 
        RowBox[{"EdgeForm", "[", "Blue", "]"}], ",", 
        RowBox[{"Disk", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "0"}], "}"}], ",", "4"}], "]"}]}], "}"}], ",", 
      ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"Orange", ",", " ", 
        RowBox[{"EdgeForm", "[", "Blue", "]"}], ",", 
        RowBox[{"Disk", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "0"}], "}"}], ",", "2"}], "]"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"LightPink", ",", " ", 
        RowBox[{"EdgeForm", "[", "Red", "]"}], ",", 
        RowBox[{"Disk", "[", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], "]"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"Red", ",", 
        RowBox[{"Arrow", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", 
             RowBox[{"Sin", "[", "\[Theta]", "]"}]}], "}"}]}], "}"}], "]"}]}],
        "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"Blue", ",", 
        RowBox[{"Arrow", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}], ",", 
           RowBox[{"A", ".", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", 
              RowBox[{"Sin", "[", "\[Theta]", "]"}]}], "}"}]}]}], "}"}], 
         "]"}]}], "}"}]}], "\[IndentingNewLine]", "}"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", ",", "0", ",", " ", 
     RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.9062119759623346`*^9, 3.906212258134622*^9}, {
  3.9062123211192055`*^9, 3.9062123568992367`*^9}, {3.9062124331501026`*^9, 
  3.906212481094761*^9}, {3.9062125157122965`*^9, 3.906212591883422*^9}, {
  3.9062838543997264`*^9, 3.906283857320939*^9}, {3.9064515810531836`*^9, 
  3.9064515923969526`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"541b9a3a-bcc4-4c4e-96f9-19bf2f52973b"],

Cell[TextData[{
 "It is much harder to see in 3D but you can  probably believe that there are \
special vector inputs that line up with the vector output for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "\[Rule]", 
    RowBox[{"A", " ", "x"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "233bca46-ecdc-431c-8762-85e05e417cde"],
 " when ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "1e62ef1b-3a22-40af-970a-ca31ee6f22aa"],
 " is a ",
 Cell[BoxData[
  FormBox[
   RowBox[{"3", "\[Times]", "3"}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "b5ebadc2-6316-4aec-9699-f84ea5685e1f"],
 " matrix.  These vectors are called eigen-vectors! "
}], "Text",
 CellChangeTimes->{{3.9062838746889906`*^9, 3.906283962222568*^9}, {
  3.9062839924407277`*^9, 
  3.906284016746562*^9}},ExpressionUUID->"a0d90169-1c98-477e-9d87-\
88ab32b4e1e0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"A", "=", 
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"3.0", "0", "1"},
      {"0", "2", "0"},
      {"1", "0", "3"}
     }], "\[NoBreak]", ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Graphics3D", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Opacity", "[", "0.3", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"LightBlue", ",", " ", 
        RowBox[{"EdgeForm", "[", "Blue", "]"}], ",", 
        RowBox[{"Sphere", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", "4"}], "]"}]}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"LightPink", ",", " ", 
        RowBox[{"EdgeForm", "[", "Red", "]"}], ",", 
        RowBox[{"Sphere", "[", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0", ",", "0"}], "}"}], "]"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Opacity", "[", "1", "]"}], ",", " ", "Thick", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"Red", ",", 
        RowBox[{"Arrow", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"Cos", "[", "\[Theta]", "]"}], 
              RowBox[{"Sin", "[", "\[Phi]", "]"}]}], ",", 
             RowBox[{
              RowBox[{"Sin", "[", "\[Theta]", "]"}], 
              RowBox[{"Sin", "[", "\[Phi]", "]"}]}], ",", 
             RowBox[{"Cos", "[", "\[Phi]", "]"}]}], "}"}]}], "}"}], "]"}]}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"Blue", ",", 
        RowBox[{"Arrow", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"A", ".", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"Cos", "[", "\[Theta]", "]"}], 
               RowBox[{"Sin", "[", "\[Phi]", "]"}]}], ",", 
              RowBox[{
               RowBox[{"Sin", "[", "\[Theta]", "]"}], 
               RowBox[{"Sin", "[", "\[Phi]", "]"}]}], ",", 
              RowBox[{"Cos", "[", "\[Phi]", "]"}]}], "}"}]}]}], "}"}], 
         "]"}]}], "}"}]}], "\[IndentingNewLine]", "}"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Theta]", ",", "\[Pi]"}], "}"}], ",", "0", ",", " ", 
     RowBox[{"2", "\[Pi]"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Phi]", ",", 
       RowBox[{"\[Pi]", "/", "2"}]}], "}"}], ",", "0", ",", " ", "\[Pi]"}], 
    "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.9062119759623346`*^9, 3.906212258134622*^9}, {
  3.9062123211192055`*^9, 3.9062123568992367`*^9}, {3.9062124331501026`*^9, 
  3.906212481094761*^9}, {3.9062125157122965`*^9, 3.906212591883422*^9}, {
  3.906212679728823*^9, 3.9062126881024995`*^9}, {3.906212723587461*^9, 
  3.906212828743639*^9}, {3.9062128702902775`*^9, 3.906212934493758*^9}, {
  3.9062840431734447`*^9, 3.9062841060602293`*^9}, {3.9062841803792543`*^9, 
  3.906284201147995*^9}, {3.906284240026618*^9, 3.906284273614293*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"d83749f2-cc7e-4c43-9443-cb411a828ba3"],

Cell[TextData[{
 "Definition: If ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"A", " ", "v"}], "=", 
    RowBox[{"\[Lambda]", " ", "v"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "4074a272-21c5-40ac-b2cb-963e2e97d231"],
 " for a nontrivial vector ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "01fb067c-c1ba-4fe8-bb11-54249ac4c8cb"],
 " then the scalar \[Lambda] is an ",
 StyleBox["eigenvalue",
  FontVariations->{"Underline"->True}],
 " of A and ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "15a505af-df56-4649-bfee-fbda1212eb2d"],
 " is an ",
 StyleBox["eigenvector",
  FontVariations->{"Underline"->True}],
 " corresponding to the eigenvalue \[Lambda]. "
}], "Text",
 CellChangeTimes->{{3.9062842949298496`*^9, 3.9062844007541223`*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"1a660753-d3ec-4107-a167-894122cbbea8"],

Cell[CellGroupData[{

Cell[TextData[{
 "Example: Is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"v", "=", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}]}], TraditionalForm]],ExpressionUUID->
  "4831eeba-e63d-4e60-8c20-92aadd314511"],
 " an eigenvector of ",
 Cell[BoxData[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"3", "1"},
     {"1", "3"}
    }], "\[NoBreak]", ")"}]],
  CellChangeTimes->{{3.9062119759623346`*^9, 3.906212258134622*^9}, {
   3.9062123211192055`*^9, 3.9062123568992367`*^9}, {3.9062124331501026`*^9, 
   3.906212481094761*^9}, {3.9062125157122965`*^9, 3.906212591883422*^9}, {
   3.9062838543997264`*^9, 3.906283857320939*^9}},ExpressionUUID->
  "3d9454cc-098b-4720-84db-298ebe3cfbf7"],
 "? If it is what is the associated eigenvalue \[Lambda]?  Yes! and \
\[Lambda]=4. "
}], "ItemNumbered",
 CellChangeTimes->{{3.905841232662465*^9, 3.9058413587266617`*^9}, {
  3.9058414513191996`*^9, 3.9058414882897205`*^9}, {3.9058415445909324`*^9, 
  3.9058415445909324`*^9}, {3.90584638441019*^9, 3.905846393001525*^9}, {
  3.9062844355512056`*^9, 3.906284567147748*^9}, {3.9064522047071314`*^9, 
  3.90645221298042*^9}},ExpressionUUID->"e06f1caf-ad3a-468f-810b-\
4a177e5d1e8c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"3", "1"},
     {"1", "3"}
    }], "\[NoBreak]", ")"}], ".", 
  RowBox[{"{", 
   RowBox[{"1", ",", "1"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.9064521734011235`*^9, 3.906452187881415*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"26ebad4f-ea19-46fd-bb1b-6ea366acbff8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{{3.9064521787375455`*^9, 3.906452188378646*^9}},
 CellLabel->"Out[14]=",ExpressionUUID->"81e0b205-f697-4488-bf99-330d215322c8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Example: Is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"v", "=", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2"}], "}"}]}], TraditionalForm]],
  ExpressionUUID->"52993253-652a-4663-bcb6-027931ad60d3"],
 " an eigenvector of ",
 Cell[BoxData[
  TagBox[
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"616", "149", 
       RowBox[{"-", "529"}]},
      {"234", "61", 
       RowBox[{"-", "201"}]},
      {"780", "190", 
       RowBox[{"-", "670"}]}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]]],
  CellChangeTimes->{{3.9062119759623346`*^9, 3.906212258134622*^9}, {
   3.9062123211192055`*^9, 3.9062123568992367`*^9}, {3.9062124331501026`*^9, 
   3.906212481094761*^9}, {3.9062125157122965`*^9, 3.906212591883422*^9}, {
   3.9062838543997264`*^9, 3.906283857320939*^9}},ExpressionUUID->
  "7b6f857f-d525-49f6-9802-b18fdfb6135b"],
 "? If it is what is the associated eigenvalue \[Lambda]?  Yes and \
\[Lambda]=5."
}], "ItemNumbered",
 CellChangeTimes->{{3.905841232662465*^9, 3.9058413587266617`*^9}, {
  3.9058414513191996`*^9, 3.9058414882897205`*^9}, {3.9058415445909324`*^9, 
  3.9058415445909324`*^9}, {3.90584638441019*^9, 3.905846393001525*^9}, {
  3.9062844355512056`*^9, 3.906284567147748*^9}, {3.906284751755411*^9, 
  3.9062847788008504`*^9}, {3.9064523321340556`*^9, 
  3.906452338192687*^9}},ExpressionUUID->"e3db8ee8-2bd4-45b8-8be5-\
e1adc20ce94b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"616", "149", 
      RowBox[{"-", "529"}]},
     {"234", "61", 
      RowBox[{"-", "201"}]},
     {"780", "190", 
      RowBox[{"-", "670"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}], ".", 
  RowBox[{"{", 
   RowBox[{"1", ",", "3", ",", "2"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.9064523038026342`*^9, 3.906452308345664*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"db417bde-84e5-43f9-9fa5-6f9aaa73d490"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "15", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.906452309039427*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"6910ced9-2c59-4b73-a57a-c83289e8b7bb"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Example: Is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"v", "=", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "2"}], "}"}]}], TraditionalForm]],
  ExpressionUUID->"f3de1192-6121-4727-8ecc-1f16fe40e0a7"],
 " an eigenvector of ",
 Cell[BoxData[
  TagBox[
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"616", "149", 
       RowBox[{"-", "529"}]},
      {"234", "61", 
       RowBox[{"-", "201"}]},
      {"780", "190", 
       RowBox[{"-", "670"}]}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]]],
  CellChangeTimes->{{3.9062119759623346`*^9, 3.906212258134622*^9}, {
   3.9062123211192055`*^9, 3.9062123568992367`*^9}, {3.9062124331501026`*^9, 
   3.906212481094761*^9}, {3.9062125157122965`*^9, 3.906212591883422*^9}, {
   3.9062838543997264`*^9, 3.906283857320939*^9}},ExpressionUUID->
  "1b4a0c87-b356-4da9-bdf8-64b10bc7e6a8"],
 "? If it is what is the associated eigenvalue \[Lambda]?  No!"
}], "ItemNumbered",
 CellChangeTimes->{{3.905841232662465*^9, 3.9058413587266617`*^9}, {
  3.9058414513191996`*^9, 3.9058414882897205`*^9}, {3.9058415445909324`*^9, 
  3.9058415445909324`*^9}, {3.90584638441019*^9, 3.905846393001525*^9}, {
  3.9062844355512056`*^9, 3.906284567147748*^9}, {3.906284751755411*^9, 
  3.9062847788008504`*^9}, {3.9062848590950212`*^9, 3.906284859595245*^9}, {
  3.9064523848139963`*^9, 
  3.906452386471463*^9}},ExpressionUUID->"3971e14e-3ccd-4e7a-8ccc-\
083083a174b7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"616", "149", 
      RowBox[{"-", "529"}]},
     {"234", "61", 
      RowBox[{"-", "201"}]},
     {"780", "190", 
      RowBox[{"-", "670"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}], ".", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "2"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.9064523038026342`*^9, 3.906452308345664*^9}, 
   3.9064523544704967`*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"8a5f3a52-4c6c-43a3-bf90-7e7e536c7751"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "144"}], ",", 
   RowBox[{"-", "46"}], ",", 
   RowBox[{"-", "180"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9064523549516706`*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"857cec00-8ef3-4508-b108-44879b1aad0e"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "Example: Show that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Lambda]", "=", "2"}], TraditionalForm]],ExpressionUUID->
  "d1046326-5f0d-4b1e-907d-5622140dee28"],
 " is an eigenvalue of ",
 Cell[BoxData[
  FormBox[Cell[TextData[{
    " ",
    Cell[BoxData[
     FormBox[
      RowBox[{"(", GridBox[{
         {"3", "1"},
         {"1", "3"}
        }], ")"}], TraditionalForm]],ExpressionUUID->
     "0acafed5-23a5-4067-addc-4d6229cbc065"]
   }],ExpressionUUID->"9e7e0643-7590-4fdd-9ace-72a2636442f0"], 
   TraditionalForm]],ExpressionUUID->"1cc5e2e6-d7cf-41be-a43f-5e5c3ba4aa38"],
 " and compute a corresponding eigenvector ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],ExpressionUUID->
  "561e11b3-ee5c-487b-b8ef-51ed63f251fd"],
 ". ",
 "\n",
 "Solution: row reduce ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", GridBox[{
       {
        RowBox[{"3", "-", "2"}], "1"},
       {"1", 
        RowBox[{"3", "-", "2"}]}
      }], ")"}], "=", 
    RowBox[{
     RowBox[{"(", GridBox[{
        {"1", "1"},
        {"1", "1"}
       }], ")"}], "~", 
     RowBox[{"(", GridBox[{
        {"1", "1"},
        {"0", "0"}
       }], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "9998dc21-ddf0-4253-bd46-c4b876234e1f"],
 ". Interpret ",
 Cell[BoxData[
  FormBox[
   RowBox[{"v", "=", 
    RowBox[{"(", GridBox[{
       {"1"},
       {
        RowBox[{"-", "1"}]}
      }], ")"}]}], TraditionalForm]],ExpressionUUID->
  "f5daec21-88c9-409c-b137-c1bdebfa0f96"],
 "."
}], "ItemNumbered",
 CellChangeTimes->{{3.905841232662465*^9, 3.9058413587266617`*^9}, {
   3.9058414513191996`*^9, 3.9058414882897205`*^9}, {3.9058415445909324`*^9, 
   3.9058415445909324`*^9}, {3.90584638441019*^9, 3.905846393001525*^9}, {
   3.9062844355512056`*^9, 3.906284567147748*^9}, {3.906284751755411*^9, 
   3.9062847788008504`*^9}, {3.9062848590950212`*^9, 3.906284859595245*^9}, {
   3.90628490269794*^9, 3.9062850324655523`*^9}, {3.9064606679191504`*^9, 
   3.906460667921212*^9}, 
   3.906460746361235*^9},ExpressionUUID->"aca20a1e-bf36-40a5-a36b-\
5f355ec613dc"],

Cell["\<\
We know how to check if things are eigenvalues or eigenvectors. Given an \
eigenvalue we can compute an associated eigenvector. Given an eigenvector we \
can compute the matching eigenvalue.   \
\>", "Text",
 CellChangeTimes->{{3.906285071940793*^9, 
  3.906285237550028*^9}},ExpressionUUID->"dfb2a58a-30de-4719-a1cc-\
580582c3ea8d"],

Cell[TextData[{
 "Definition: If \[Lambda] is an ",
 "eigenvalue",
 " of A then the null space of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"A", "-", 
     RowBox[{"\[Lambda]", " ", "I"}]}], ")"}], TraditionalForm]],
  ExpressionUUID->"269e1b53-e6b3-4048-b59d-6e4e97439460"],
 " is the subspace of all eigenvectors associated with ",
 Cell[BoxData[
  FormBox["\[Lambda]", TraditionalForm]],ExpressionUUID->
  "d49e12f6-be9a-412b-8dfa-36e00e04e891"],
 ".  The ",
 StyleBox["eigenspace",
  FontVariations->{"Underline"->True}],
 " associated with an eigenvalue ",
 Cell[BoxData[
  FormBox["\[Lambda]", TraditionalForm]],ExpressionUUID->
  "71db07f2-db90-4662-8a02-e270973bb841"],
 " is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"Null", 
    RowBox[{"(", 
     RowBox[{"A", "-", 
      RowBox[{"\[Lambda]", " ", "I"}]}], ")"}]}], TraditionalForm]],
  ExpressionUUID->"c8f4ee36-7f89-45f5-a5a3-7c576aa6615e"],
 ". "
}], "Text",
 CellChangeTimes->{{3.9062842949298496`*^9, 3.9062844007541223`*^9}, {
  3.9062852645964313`*^9, 3.906285465234056*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"a52ee24b-cd18-45fc-a35e-d7898fc264cd"],

Cell[TextData[{
 "Example: ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Lambda]", "=", "2"}], TraditionalForm]],ExpressionUUID->
  "3e109fc8-f08b-4dc2-a60f-473f91d79a8f"],
 " is an eigenvalue of ",
 Cell[BoxData[
  FormBox[Cell[TextData[{
    " ",
    Cell[BoxData[
     FormBox[
      RowBox[{"(", GridBox[{
         {"4", 
          RowBox[{"-", "1"}], "6"},
         {"2", "1", "6"},
         {"2", 
          RowBox[{"-", "1"}], "8"}
        }], ")"}], TraditionalForm]],ExpressionUUID->
     "302c161e-6e79-4079-8cf8-85a6557b5033"]
   }],ExpressionUUID->"c1bf1552-8f20-4fd3-ad66-b7863e7d8d49"], 
   TraditionalForm]],ExpressionUUID->"6589cbd7-f99d-4aa7-8b58-0722a4ff7c2b"],
 " compute a basis for the corresponding eigenspace. \nSolution. Row reduce ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"A", "-", 
     RowBox[{"2", " ", "I"}]}], " ", "=", " ", Cell[TextData[{
     " ",
     Cell[BoxData[
      FormBox[
       RowBox[{
        RowBox[{"(", GridBox[{
           {
            RowBox[{"4", "-", "2"}], 
            RowBox[{"-", "1"}], "6"},
           {"2", 
            RowBox[{"1", "-", "2"}], "6"},
           {"2", 
            RowBox[{"-", "1"}], 
            RowBox[{"8", "-", "2"}]}
          }], ")"}], "=", Cell[TextData[{
         " ",
         Cell[BoxData[
          FormBox[
           RowBox[{
            RowBox[{"(", GridBox[{
               {"2", 
                RowBox[{"-", "1"}], "6"},
               {"2", 
                RowBox[{"-", "1"}], "6"},
               {"2", 
                RowBox[{"-", "1"}], "6"}
              }], ")"}], "\[Tilde]", Cell[TextData[{
             " ",
             Cell[BoxData[
              FormBox[
               RowBox[{"(", GridBox[{
                  {"2", 
                   RowBox[{"-", "1"}], "6"},
                  {"0", "0", "0"},
                  {"0", "0", "0"}
                 }], ")"}], TraditionalForm]],ExpressionUUID->
              "e30ced82-428f-4fa1-9b63-1fad1a84a941"]
            }],ExpressionUUID->"7c65a9f6-47d9-4126-82fa-e7a4bc1b8841"]}], 
           TraditionalForm]],ExpressionUUID->
          "1f810343-a89b-423d-869d-e11b3b6c095b"]
        }],ExpressionUUID->"46fa2554-bce8-4784-bbfd-8e00ea937a7c"]}], 
       TraditionalForm]],ExpressionUUID->
      "617d23b7-1a25-4aa7-acae-14e0163441e3"]
    }],ExpressionUUID->"cf5db3a6-a063-4363-93bb-180129cdfdff"]}], 
   TraditionalForm]],ExpressionUUID->"2fb54237-c8d5-4c97-8e16-d2b9943583f8"],
 "\n",
 "Non trivial solutions are ",
 Cell[BoxData[
  FormBox[
   RowBox[{"v", "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["v", "2"], "(", GridBox[{
        {
         FractionBox["1", "2"]},
        {"1"},
        {"0"}
       }], ")"}], "+", 
     RowBox[{
      SubscriptBox["v", "3"], "(", GridBox[{
        {
         RowBox[{"-", "3"}]},
        {"0"},
        {"1"}
       }], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "9d49c361-3c4d-421e-b8d0-9f3d167df209"],
 ". Eigenspace for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Lambda]", "=", "2"}], TraditionalForm]],ExpressionUUID->
  "fe635fb8-6e8c-4875-bd2b-1f2195afc0a3"],
 " is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"span", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"(", GridBox[{
         {
          FractionBox["1", "2"]},
         {"1"},
         {"0"}
        }], ")"}], ",", 
      RowBox[{"(", GridBox[{
         {
          RowBox[{"-", "3"}]},
         {"0"},
         {"1"}
        }], ")"}]}], "}"}]}], TraditionalForm]],ExpressionUUID->
  "d97631be-bad3-4418-8e34-7b930c4c481a"],
 "."
}], "ItemNumbered",
 CellChangeTimes->{{3.905841232662465*^9, 3.9058413587266617`*^9}, {
   3.9058414513191996`*^9, 3.9058414882897205`*^9}, {3.9058415445909324`*^9, 
   3.9058415445909324`*^9}, {3.90584638441019*^9, 3.905846393001525*^9}, {
   3.9062844355512056`*^9, 3.906284567147748*^9}, {3.906284751755411*^9, 
   3.9062847788008504`*^9}, {3.9062848590950212`*^9, 3.906284859595245*^9}, {
   3.90628490269794*^9, 3.9062850324655523`*^9}, {3.906285491735886*^9, 
   3.906285545855503*^9}, {3.906460406332477*^9, 3.906460427880061*^9}, 
   3.906460649470605*^9},ExpressionUUID->"7084eaf2-06c1-4a75-87f7-\
8a24f3e4a2c4"],

Cell[TextData[{
 "We do not yet know how to compute eigenvalues and eigenvectors from \
scratch!  The problem is that the equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"A", " ", "v"}], "=", 
    RowBox[{"\[Lambda]", " ", "v"}]}], TraditionalForm]],ExpressionUUID->
  "1acfb7ff-e4bf-48ff-9e5d-bdf56270c082"],
 " involves both ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],ExpressionUUID->
  "80012fda-fa7e-4389-a123-ece6fad2f36e"],
 " and ",
 Cell[BoxData[
  FormBox["\[Lambda]", TraditionalForm]],ExpressionUUID->
  "23b5d588-d662-4adb-9284-fcc3f61a2d5b"],
 "!"
}], "Text",
 CellChangeTimes->{{3.906285574829521*^9, 
  3.9062856559497004`*^9}},ExpressionUUID->"2a88ed8f-889b-4842-9294-\
e00005c1ff61"]
}, Closed]],

Cell[CellGroupData[{

Cell["5.2 Characteristic Equation", "Section",
 CellChangeTimes->{{3.9062857721201787`*^9, 
  3.906285783145425*^9}},ExpressionUUID->"9af20188-903e-4030-b6e4-\
deef91705439"],

Cell["The determinant gives us a way to compute eigenvalues!", "Text",
 CellChangeTimes->{{3.9062858390694942`*^9, 
  3.9062858617449627`*^9}},ExpressionUUID->"778dc6b0-0bf6-468c-a054-\
89b9b0f2631d"],

Cell[TextData[{
 "To find the eigenvalues of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", GridBox[{
      {"2", "3"},
      {"3", 
       RowBox[{"-", "6"}]}
     }], ")"}], TraditionalForm]],ExpressionUUID->
  "ad14fd3f-5b71-47c0-b57f-a973b68fc1da"],
 " we need to find when ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", GridBox[{
          {"2", "3"},
          {"3", 
           RowBox[{"-", "6"}]}
         }], ")"}], "-", 
       RowBox[{"\[Lambda]", " ", 
        RowBox[{"(", GridBox[{
           {"1", "0"},
           {"0", "1"}
          }], ")"}]}]}], ")"}], "v"}], "=", 
    RowBox[{"(", GridBox[{
       {"0"},
       {"0"}
      }], ")"}]}], TraditionalForm]],ExpressionUUID->
  "b0bc8cc0-f8f6-45a7-b973-93a15ba95a7e"],
 " has non-trivial solutions!  \n\nThe invertible matrix theorem gives us a \
bunch of equivalent conditions for this to happen: ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", GridBox[{
      {
       RowBox[{"2", "-", "\[Lambda]"}], "3"},
      {"3", 
       RowBox[{
        RowBox[{"-", "6"}], "-", "\[Lambda]"}]}
     }], ")"}], TraditionalForm]],ExpressionUUID->
  "76b0b913-310d-478b-85d6-2bc277ec7d09"],
 " is not invertible; ",
 Cell[BoxData[
  FormBox[Cell[TextData[Cell[BoxData[
    FormBox[
     RowBox[{
      RowBox[{
       RowBox[{"det", "(", GridBox[{
          {
           RowBox[{"2", "-", "\[Lambda]"}], "3"},
          {"3", 
           RowBox[{
            RowBox[{"-", "6"}], "-", "\[Lambda]"}]}
         }], ")"}], ")"}], "=", "0"}], TraditionalForm]],ExpressionUUID->
    "e88f37c3-beca-4941-9e5a-ff1c062a0740"]],ExpressionUUID->
    "956d5e82-6d8e-431e-bcf1-dffd7bc7fc97"], TraditionalForm]],ExpressionUUID->
  "610e8a3e-fa43-40a7-980f-a388e478143e"],
 "; etc. \n\nWe get an equation for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Lambda]", " "}], TraditionalForm]],ExpressionUUID->
  "7cc47095-3a96-42ab-a462-e7101ec22bd2"],
 "from the determinant condition. \n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"det", "(", GridBox[{
       {
        RowBox[{"2", "-", "\[Lambda]"}], "3"},
       {"3", 
        RowBox[{
         RowBox[{"-", "6"}], "-", "\[Lambda]"}]}
      }], ")"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"2", "-", "\[Lambda]"}], ")"}], "\[Times]", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "6"}], "-", "\[Lambda]"}], ")"}]}], "-", 
      RowBox[{"3", "\[Times]", "3"}]}], "=", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "21"}], "+", 
       RowBox[{"4", " ", "\[Lambda]"}], "+", 
       SuperscriptBox["\[Lambda]", "2"]}], "=", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"\[Lambda]", "+", "7"}], ")"}], 
        RowBox[{"(", 
         RowBox[{"\[Lambda]", "-", "3"}], ")"}]}], "=", "0"}]}]}]}], 
   TraditionalForm]],ExpressionUUID->"42c9f414-30e3-4a14-8a0f-22f5235fb955"],
 "\n",
 "So there are two eigenvalues ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Lambda]", "=", "3"}], TraditionalForm]],ExpressionUUID->
  "fe79547a-97c2-4afb-aa3d-2a150c8eac3a"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Lambda]", "=", 
    RowBox[{"-", "7"}]}], TraditionalForm]],ExpressionUUID->
  "f0a25c67-bc62-446b-80bf-3cc0fb734303"],
 "."
}], "ItemNumbered",
 CellChangeTimes->{{3.906285810735995*^9, 3.9062858356952763`*^9}, {
  3.906285879810129*^9, 3.9062861993666525`*^9}, {3.906286354915329*^9, 
  3.906286397535026*^9}},ExpressionUUID->"6038fdb4-0e58-45ac-acb9-\
0649be30d42c"],

Cell[TextData[{
 "Except that the polynomials are going to get horrible we have a way to \
compute the eigenvalues of a matrix ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "71340f05-a7e4-4fab-8473-c0beb8ec749f"],
 " if we can find the roots of the polynomial. "
}], "Text",
 CellChangeTimes->{{3.9062864280659747`*^9, 3.906286480668936*^9}, {
  3.906286551883387*^9, 3.9062865571460857`*^9}, {3.9066245460041637`*^9, 
  3.9066245572981544`*^9}},ExpressionUUID->"189a3067-1385-4093-8506-\
32c72bb3dcf7"],

Cell[TextData[{
 "A scalar \[Lambda] is an eigenvalue of A iff the ",
 StyleBox["characteristic equation",
  FontVariations->{"Underline"->True}],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"det", 
     RowBox[{"(", 
      RowBox[{"A", "-", " ", 
       RowBox[{"\[Lambda]", " ", "I"}]}], ")"}]}], "=", "0"}], 
   TraditionalForm]],ExpressionUUID->"cd7f48c0-3f21-4261-a85a-adfae8df6f11"],
 ". The ",
 StyleBox["characteristic polynomial",
  FontVariations->{"Underline"->True}],
 " of ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "29c2a2b8-7b70-4bcb-88fc-d518c3ab6a8d"],
 " is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"det", "(", 
    RowBox[{"A", "-", " ", 
     RowBox[{"\[Lambda]", " ", "I"}]}], ")"}], TraditionalForm]],
  ExpressionUUID->"fb9be46c-b7f7-495f-a3b3-f9bed1a139cb"],
 ". "
}], "Text",
 CellChangeTimes->{{3.906286568955432*^9, 3.906286642323655*^9}, {
  3.9062866754727683`*^9, 3.906286710192224*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"56afa08c-5ad7-4fda-b61c-4db4bc426ae5"],

Cell[CellGroupData[{

Cell["Similarity", "Subsection",
 CellChangeTimes->{{3.906286740178789*^9, 
  3.9062867435217404`*^9}},ExpressionUUID->"6fd6fe76-c28c-4587-a931-\
a5fa9d80edc2"],

Cell[TextData[{
 "Definition. The matrices ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "f84930d5-3bd7-483b-aa73-71e0677939a0"],
 " and ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "b6a74c69-111c-44e7-984b-34e1f6f51aef"],
 " are ",
 StyleBox["similar",
  FontVariations->{"Underline"->True}],
 " if ",
 Cell[BoxData[
  FormBox[
   RowBox[{"B", "=", 
    RowBox[{"P", " ", "A", " ", 
     SuperscriptBox["P", 
      RowBox[{"-", "1"}]]}]}], TraditionalForm]],ExpressionUUID->
  "ac8887b6-e078-498f-b8f2-ed9e9407d7fb"],
 " for an invertible matrix ",
 Cell[BoxData[
  FormBox["P", TraditionalForm]],ExpressionUUID->
  "a662813f-17fb-47ac-a4c2-b91b442d3d4e"],
 "."
}], "Text",
 CellChangeTimes->{{3.9062868105042133`*^9, 3.906286901404956*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"2e512bcb-2ae8-4796-8383-67891c5f37d2"],

Cell[TextData[{
 "Theorem 4: If ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "6dcce9fb-5ba8-4680-ab27-2a9a50525c8f"],
 " and ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "bd2c067f-10d3-4bb4-8260-aa53db9518ce"],
 " are similar then they have the same characteristic polynomial.  If ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "1149bd33-fa1b-440a-8487-e9e164f001b1"],
 " and ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "fc9c1949-f57f-472e-991a-78266ef153cf"],
 " are similar then they have the same eigenvalues. "
}], "Text",
 CellChangeTimes->{{3.9062868105042133`*^9, 3.90628683504534*^9}, {
  3.9062869356953793`*^9, 3.906287009539261*^9}},
 Background->RGBColor[
  1, 0.925, 0.925],ExpressionUUID->"a705e4cf-49fd-4fc4-95f3-bdc25c6b8f20"],

Cell[TextData[{
 "If ",
 Cell[BoxData[
  FormBox[
   RowBox[{"B", "=", 
    RowBox[{"P", " ", "A", " ", 
     SuperscriptBox["P", 
      RowBox[{"-", "1"}]]}]}], TraditionalForm]],ExpressionUUID->
  "af57e761-f05e-4720-b3c4-d04822b3367d"],
 " then \n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"A", " ", "v"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Lambda]", " ", "v"}], "\[Implies]", 
      RowBox[{"PA", " ", "v"}]}], "=", 
     RowBox[{
      RowBox[{
       RowBox[{"\[Lambda]", " ", "P", " ", "v"}], "\[Implies]", 
       RowBox[{"P", " ", "A", " ", 
        SuperscriptBox["P", 
         RowBox[{"-", "1"}]], "P", " ", "v"}]}], "=", 
      RowBox[{
       RowBox[{
        RowBox[{"\[Lambda]", " ", "P", " ", "v"}], "\[Implies]", 
        RowBox[{"B", " ", "P", " ", "v"}]}], "=", 
       RowBox[{
        RowBox[{
         RowBox[{"\[Lambda]", " ", "P", " ", "v"}], "\[Implies]", 
         RowBox[{"B", " ", "u"}]}], "=", 
        RowBox[{"\[Lambda]", " ", "u"}]}]}]}]}]}], TraditionalForm]],
  ExpressionUUID->"aaddff39-d190-4005-b5ef-a3d95bfbe946"],
 " \nwhere ",
 Cell[BoxData[
  FormBox[
   RowBox[{"u", "=", 
    RowBox[{"P", " ", "v"}]}], TraditionalForm]],ExpressionUUID->
  "1c24c4a9-60fd-4ccc-aa24-5cf3d93c9396"],
 ". In other words, ",
 Cell[BoxData[
  FormBox["u", TraditionalForm]],ExpressionUUID->
  "b2a747f1-8d71-4e0a-878b-f199b1338357"],
 " is an eigenvector of ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "8de786cc-2518-4610-907d-75fccf06a238"],
 " associated with ",
 Cell[BoxData[
  FormBox["\[Lambda]", TraditionalForm]],ExpressionUUID->
  "e260853e-0e35-4eaa-b982-0f1047f2ac3c"],
 ".  "
}], "Text",
 CellChangeTimes->{{3.9062868105042133`*^9, 3.90628683504534*^9}, {
  3.9062869356953793`*^9, 3.906287009539261*^9}, {3.906460853632593*^9, 
  3.9064611027816634`*^9}, {3.9066250734113026`*^9, 
  3.906625083170903*^9}},ExpressionUUID->"bc6f2382-384d-420f-bc03-\
65406c1e799b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Application: Discrete Dynamical System", "Subsection",
 CellChangeTimes->{{3.906286740178789*^9, 3.9062867435217404`*^9}, {
  3.9064608074401255`*^9, 
  3.9064608243263903`*^9}},ExpressionUUID->"a82ca68f-42a0-4095-940b-\
f895995ac659"],

Cell[TextData[{
 "Compute ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", 
     RowBox[{"n", "+", "1"}]], "=", 
    RowBox[{"A", " ", 
     SubscriptBox["x", "n"]}]}], TraditionalForm]],ExpressionUUID->
  "09a3b8d8-ee6a-4fc3-97ce-5e5733020a6f"],
 " with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", "0"], "=", 
    RowBox[{"(", GridBox[{
       {"100"},
       {"85"},
       {"120"},
       {"123"}
      }], ")"}]}], TraditionalForm]],ExpressionUUID->
  "c25c62f7-adfa-4fb8-bcd7-50bbf4f4d80e"],
 " when ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", 
    RowBox[{"(", GridBox[{
       {"0.9", "0.1", "0.3", "0.2"},
       {"0.1", "0.8", "0", "0"},
       {"0", "0.1", "0.7", "0"},
       {"0", "0", "0", "0.8"}
      }], ")"}]}], TraditionalForm]],ExpressionUUID->
  "0c608c27-cffd-447d-aff5-aafe7de34535"],
 "."
}], "Text",
 CellChangeTimes->{{3.906285810735995*^9, 3.9062858356952763`*^9}, {
  3.906285879810129*^9, 3.9062861993666525`*^9}, {3.906286354915329*^9, 
  3.906286397535026*^9}, {3.906287077488296*^9, 3.906287080005746*^9}, {
  3.9062876572246647`*^9, 3.906287738860364*^9}, {3.9062877920173235`*^9, 
  3.90628791819339*^9}, {3.9062880381269255`*^9, 
  3.9062880475458574`*^9}},ExpressionUUID->"4cd62ba4-36a2-42c1-9181-\
86e5d9522df6"],

Cell[TextData[{
 "There are four LI eigenvectors ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["v", "1"], ",", 
     SubscriptBox["v", "2"], ",", 
     SubscriptBox["v", "3"], ",", 
     SubscriptBox["v", "4"]}], "}"}], TraditionalForm]],ExpressionUUID->
  "33bb0bb8-d6df-427b-8b2b-f559ed22110b"],
 " so they span the four dimensional space!  Write \n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", "o"], "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["c", "1"], 
      SubscriptBox["v", "1"]}], "+", 
     RowBox[{
      SubscriptBox["c", "2"], 
      SubscriptBox["v", "2"]}], "+", 
     RowBox[{
      SubscriptBox["c", "3"], 
      SubscriptBox["v", "3"]}], "+", 
     RowBox[{
      SubscriptBox["c", "4"], 
      SubscriptBox["v", "4"]}]}]}], TraditionalForm]],ExpressionUUID->
  "b704e974-54bb-47df-a0f5-3cb496c78b07"],
 "\nthen \n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", "1"], "=", 
    RowBox[{
     RowBox[{"A", " ", 
      SubscriptBox["x", "o"]}], "=", 
     RowBox[{
      RowBox[{
       RowBox[{
        SubscriptBox["c", "1"], "A", " ", 
        SubscriptBox["v", "1"]}], "+", 
       RowBox[{
        SubscriptBox["c", "2"], "A", " ", 
        SubscriptBox["v", "2"]}], "+", 
       RowBox[{
        SubscriptBox["c", "3"], "A", " ", 
        SubscriptBox["v", "3"]}], "+", 
       RowBox[{
        SubscriptBox["c", "4"], "A", " ", 
        SubscriptBox["v", "4"]}]}], "=", 
      RowBox[{
       RowBox[{
        SubscriptBox["c", "1"], 
        SubscriptBox["\[Lambda]", "1"], " ", 
        SubscriptBox["v", "1"]}], "+", 
       RowBox[{
        SubscriptBox["c", "2"], 
        SubscriptBox["\[Lambda]", "2"], " ", 
        SubscriptBox["v", "2"]}], "+", 
       RowBox[{
        SubscriptBox["c", "3"], 
        SubscriptBox["\[Lambda]", "3"], " ", 
        SubscriptBox["v", "3"]}], "+", 
       RowBox[{
        SubscriptBox["c", "4"], 
        SubscriptBox["\[Lambda]", "4"], " ", 
        SubscriptBox["v", "4"]}]}]}]}]}], TraditionalForm]],ExpressionUUID->
  "28b0b1da-e7cf-41a4-9815-4a09cb97e4c7"],
 " \nand \n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", "2"], "=", 
    RowBox[{
     RowBox[{"A", " ", 
      SubscriptBox["x", "1"]}], "=", 
     RowBox[{
      RowBox[{
       SubscriptBox["c", "1"], 
       SubsuperscriptBox["\[Lambda]", "1", "2"], " ", 
       SubscriptBox["v", "1"]}], "+", 
      RowBox[{
       SubscriptBox["c", "2"], 
       SubsuperscriptBox["\[Lambda]", "2", "2"], " ", 
       SubscriptBox["v", "2"]}], "+", 
      RowBox[{
       SubscriptBox["c", "3"], 
       SubsuperscriptBox["\[Lambda]", "3", "2"], " ", 
       SubscriptBox["v", "3"]}], "+", 
      RowBox[{
       SubscriptBox["c", "4"], 
       SubsuperscriptBox["\[Lambda]", "4", "2"], " ", 
       SubscriptBox["v", "4"], " "}]}]}]}], TraditionalForm]],ExpressionUUID->
  "5a8e1db0-5aba-4a37-a1a1-c1f0e0d2763a"],
 "\nso ... \n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", "n"], "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["c", "1"], 
      SubsuperscriptBox["\[Lambda]", "1", "n"], " ", 
      SubscriptBox["v", "1"]}], "+", 
     RowBox[{
      SubscriptBox["c", "2"], 
      SubsuperscriptBox["\[Lambda]", "2", "n"], " ", 
      SubscriptBox["v", "2"]}], "+", 
     RowBox[{
      SubscriptBox["c", "3"], 
      SubsuperscriptBox["\[Lambda]", "3", "n"], " ", 
      SubscriptBox["v", "3"]}], "+", 
     RowBox[{
      SubscriptBox["c", "4"], 
      SubsuperscriptBox["\[Lambda]", "4", "n"], " ", 
      SubscriptBox["v", "4"], " "}]}]}], TraditionalForm]],ExpressionUUID->
  "f4164a91-38e9-4a12-939f-90bfbf494834"],
 "\nLets look at the eigenvalues of our A.  Lets not worry the fact that some \
of the eigenvalues are complex! "
}], "Text",
 CellChangeTimes->{{3.9062880713123894`*^9, 3.9062880895894976`*^9}, {
  3.906288143975054*^9, 3.906288238458966*^9}, {3.906288270525093*^9, 
  3.9062885912527285`*^9}, {3.9066253510487905`*^9, 
  3.90662535153718*^9}},ExpressionUUID->"f96c1818-bbf1-4a82-8de2-\
39e45014abe6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  FormBox[
   RowBox[{"A", "=", 
    RowBox[{"(", GridBox[{
       {"0.9", "0.1", "0.3", "0.2"},
       {"0.1", "0.8", "0", "0"},
       {"0", "0.1", "0.7", "0"},
       {"0", "0", "0", "0.8"}
      }], ")"}]}],
   TraditionalForm], ";"}], "\[IndentingNewLine]", 
 RowBox[{"\[Lambda]s", "=", 
  RowBox[{"Eigenvalues", "[", "A", "]"}]}]}], "Input",
 CellChangeTimes->{{3.906287926543273*^9, 3.9062879906961093`*^9}, {
  3.906288489093834*^9, 3.906288492395757*^9}, {3.906288608094755*^9, 
  3.906288609021889*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"dd912cf5-6f7c-4415-a83f-e5bcdd80d704"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1.0000000000000002`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"0.8`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"0.7000000000000004`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.09999999999999988`", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"0.7000000000000004`", "\[VeryThinSpace]", "-", 
    RowBox[{"0.09999999999999988`", " ", "\[ImaginaryI]"}]}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9066254955833015`*^9, 3.9068198011852036`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"0e8b668a-a808-4b7a-bfa7-8486823cf9f1"]
}, Open  ]],

Cell[TextData[{
 "So the biggest eigenvalues is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Lambda]", "1"], "=", "1"}], TraditionalForm]],
  ExpressionUUID->"b0ac6161-5f64-466c-925b-c8558dfb99c9"],
 " and the other eigenvalues (even the complex ones) are less than one in \
absolute value!  This means that after a while \n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", "n"], "=", 
    RowBox[{
     RowBox[{
      RowBox[{
       SubscriptBox["c", "1"], 
       SubsuperscriptBox["\[Lambda]", "1", "n"], 
       SubscriptBox["v", "1"]}], "+", 
      RowBox[{"tiny", " ", 
       SubscriptBox["v", "2"]}], "+", 
      RowBox[{"tiny", " ", 
       SubscriptBox["v", "3"]}], "+", 
      RowBox[{"tiny", " ", 
       SubscriptBox["v", "4"]}]}], "\[TildeTilde]", 
     RowBox[{
      SubscriptBox["c", "1"], 
      SubscriptBox["v", "1"]}]}]}], TraditionalForm]],ExpressionUUID->
  "e11f6799-ae61-4e83-a1fb-5cb19270b0bd"],
 ".\nWe should be able to see this"
}], "Text",
 CellChangeTimes->{{3.906288654080244*^9, 
  3.9062889465449505`*^9}},ExpressionUUID->"ed2697c6-0bbb-49dd-94de-\
26ffcf051621"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Clear", "[", "x", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"x", "[", "0", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"100", ",", "85", ",", "120", ",", "123"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x", "[", "n_", "]"}], ":=", 
  RowBox[{"A", ".", 
   RowBox[{"x", "[", 
    RowBox[{"n", "-", "1"}], "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MaxIter", "=", "34"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "[", "i", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "MaxIter"}], "}"}]}], "]"}], ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Automatic", ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<N\>\"", ",", "\"\<S\>\"", ",", "\"\<E\>\"", ",", "\"\<W\>\""}], 
       "}"}]}], "}"}]}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x", "[", "MaxIter", "]"}], "/", 
  RowBox[{"Total", "[", 
   RowBox[{"x", "[", "MaxIter", "]"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.9062889502784505`*^9, 3.906289132647854*^9}, {
  3.9066256278276525`*^9, 3.906625628210749*^9}, {3.906819752250577*^9, 
  3.9068197621503925`*^9}, {3.9068198107658763`*^9, 3.9068198530232925`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"c66e97bb-a51a-4ee9-bfda-d44324892355"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      StyleBox["\[Null]",
       ShowStringCharacters->False], 
      TagBox["\<\"N\"\>",
       HoldForm], 
      TagBox["\<\"S\"\>",
       HoldForm], 
      TagBox["\<\"E\"\>",
       HoldForm], 
      TagBox["\<\"W\"\>",
       HoldForm]},
     {"1", "159.1`", "78.`", "92.5`", "98.4`"},
     {"2", "198.42000000000002`", "78.31`", "72.55`", "78.72000000000001`"},
     {"3", "223.918`", "82.49000000000001`", "58.616`", "62.97600000000001`"},
     {"4", "239.95520000000002`", "88.38380000000001`", "49.2802`", 
      "50.380800000000015`"},
     {"5", "249.65828000000005`", "94.70256`", "43.33452`", 
      "40.30464000000001`"},
     {"6", "255.22399200000007`", "100.72787600000001`", "39.80442`", 
      "32.24371200000001`"},
     {"7", "258.16444880000006`", "106.10470000000002`", "37.9358816`", 
      "25.79496960000001`"},
     {"8", "259.49823232000006`", "110.70020488000003`", "37.16558712`", 
      "20.63597568000001`"},
     {"9", "259.8953008480001`", "114.50998713600003`", "37.085931472`", 
      "16.508780544000007`"},
     {"10", "259.7843050272001`", "117.59751979360004`", "37.411150744`", 
      "13.207024435200006`"},
     {"11", "259.4303766140801`", "120.05644633760005`", "37.94755750016`", 
      "10.565619548160006`"},
     {"12", "258.99037474611214`", "121.98819473148806`", 
      "38.568934883872004`", "8.452495638528005`"},
     {"13", "258.55133633751694`", "123.48959325980168`", 
      "39.19707389185921`", "6.761996510822404`"},
     {"14", "258.1566834994677`", "124.64680824159304`", "39.78691105028162`",
       "5.409597208657924`"},
     {"15", "257.8236887304963`", "125.53311494322121`", 
      "40.315518559356434`", "4.327677766926339`"},
     {"16", "257.554822472961`", "126.20886082762661`", "40.774174485871626`",
       "3.462142213541071`"},
     {"17", "257.34490709689726`", "126.72257090939739`", "41.1628082228728`",
       "2.769713770832857`"},
     {"18", "257.18545869917574`", "127.11254743720764`", 
      "41.486222846950696`", "2.215771016666286`"},
     {"19", "257.0671886303974`", "127.4085838196837`", "41.75161073658625`", 
      "1.7726168133330287`"},
     {"20", "256.98133473296855`", "127.63358591878671`", 
      "41.966985897578745`", "1.4180934506664231`"},
     {"21", "256.92027431095727`", "127.80500220832621`", 
      "42.14024872018379`", "1.1344747605331384`"},
     {"22", "256.87771666885595`", "127.9360291977567`", "42.27867432496127`",
       "0.9075798084265108`"},
     {"23", "256.84866618091974`", "128.03659502509095`", 
      "42.38867494724856`", "0.7260638467412086`"},
     {"24", "256.8292743188597`", "128.11414263816474`", "42.47573196558309`",
       "0.5808510773929669`"},
     {"25", "256.8166509559437`", "128.17424154241775`", 
      "42.544426639724634`", "0.4646808619143736`"},
     {"26", "256.80867417889135`", "128.22105832952857`", 
      "42.59852280204902`", "0.37174468953149886`"},
     {"27", "256.8038183724761`", "128.257714081512`", "42.64107179438717`", 
      "0.2973957516251991`"},
     {"28", "256.8010086320209`", "128.28655310245722`", "42.67452166422222`",
       "0.2379166013001593`"},
     {"29", "256.7995028985913`", "128.30934334516786`", "42.70082047520127`",
       "0.19033328104012745`"},
     {"30", "256.79879974201737`", "128.32742496599343`", 
      "42.72150866715767`", "0.15226662483210196`"},
     {"31", "256.7985681895287`", "128.3418199469965`", "42.737798563609715`",
       "0.12181329986568157`"},
     {"32", "256.7985955943315`", "128.35331277655007`", 
      "42.750640989226454`", "0.09745063989254527`"},
     {"33", "256.7987497372998`", "128.36250978067324`", 
      "42.760779970113525`", "0.07796051191403622`"},
     {"34", "256.79895183505397`", "128.36988279826858`", 
      "42.76879695714679`", "0.06236840953122898`"}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{
     "Columns" -> {False, True, {False}, False}, 
      "Rows" -> {False, True, {False}, False}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {Automatic, {"N", "S", "E", "W"}}]]]], "Output",
 CellChangeTimes->{
  3.906625576758521*^9, 3.906625629866655*^9, {3.906819804905026*^9, 
   3.9068198226983175`*^9}, 3.906819854069922*^9},
 CellLabel->
  "Out[23]//TableForm=",ExpressionUUID->"d950d521-5af0-408a-8db3-\
4a07d5ad91a1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.5999975510164804`", ",", "0.2999296327062346`", ",", 
   "0.09992709569426807`", ",", "0.00014572058301688993`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.906625576758521*^9, 3.906625629866655*^9, {3.906819804905026*^9, 
   3.9068198226983175`*^9}, 3.906819854069922*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"da96d6a3-175e-4367-82b1-d74dc5041e94"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"v1", ",", "v2", ",", "v3", ",", "v4"}], "}"}], "=", 
   RowBox[{"Eigenvectors", "[", "A", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"v1", "/", 
  RowBox[{"Total", "[", "v1", "]"}]}]}], "Input",
 CellChangeTimes->{{3.906289155953729*^9, 3.906289171419303*^9}, {
  3.906626730416711*^9, 3.906626778735445*^9}, {3.906819705791853*^9, 
  3.9068197363633385`*^9}, {3.906819867637997*^9, 3.9068198760553894`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"9fa07e4b-1fea-4a2d-8a06-986037531013"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"0.6000000000000003`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"0.2999999999999998`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"0.09999999999999988`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"0.`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.90662565509903*^9, {3.906626761654546*^9, 3.9066267793316727`*^9}, {
   3.90681986849369*^9, 3.906819877523788*^9}},
 CellLabel->"Out[30]=",ExpressionUUID->"95d74a58-e5e6-47e4-aab4-f871ff93a2e3"]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
WB3/mZcVFZR1VXuuRiaTyWQymUyuEfMPSSrLdvbz8HZ8nNMYn5lYfKdnLMfH
l2ERpDzWjGD3DpmyjORgyc4VybI5s515CGvjV851bAqvH+EWVDOOlC2w2NVs
gGjUwawvhdlQyn5mf0uMK6Hur2oeu1osOX3yY+L9w5Sy9RUzBtawbZSwY05h
/Ooj99/kjbj0FLltsZEF2nr1PVg5HXgdkRMfO9Txyv1E2bZ9mDGMPb9yT/7j
jIzm5Z2z0lwbv77C+FW60dfQDbRQGotp8waizaTe6LxwJqKKjdd9HwIu2PGr
vqrLiQjf78ivrSb0wtBfjkMnVLCczsavE3/6o3qPxVyE0+cOYPfZAzgfm31z
XFd2TSns843VoqCWCZxdDeyTlwX8k/MrfwdWi0JJi5DMWJwIZfwa5Y+0wmxo
2Txy/0+Q5PGeTbzPKImXEZZpldu+/CCTyWQymUwmV4OduKm8+URJfa9MsHtv
k3GY9TtvF6s3QK/TQ28yoYTFfnw8Gd43Lx8j1cjiR14XKbe7k2NOqdz6zYpk
DaPhzK9qnOjEr6Jcx2qQPyWjnv3GPkVmgde78vfbeIxqYIxpgp6tjU2RrXAn
33dHm9k2uPlveuZSeYwbPr6kiEIWH8cXZOFiaADc/bwQw/hVx9fHYl5eRysv
LzNsJfwqqYwMPrasHb9Ofx3TP+ovc0m7ma/hQEZpuelUmmfHr6dTUXGq/tsl
QVuUDO9wf0Rm5aGSS6xGVIZfqyTGrwdUfp3IuPW9ser3QVjnebn8xfRO/FqN
knQxGKGy9PhdnnLV5w2XyrAyv6r5xmRnmTh5Za1oUrhVMMrsauVXSeHXYMav
xxi/no3yQ2J+Bgr1pdDz912h5HcD73NNUvobl/sc598lsUI7lh1kMplMJpPJ
5Gu2OsaEoH66mscSf/E6CM6JfD4T7+fTYICBMSv/NHLz70ajXC/Jx4bh74Py
sRnlWE4e60KQ2c3KaYJ41fzKmdXGr7a6Diu/Coz8+D6WlkBbXAC9ppiFq1qY
jTqZWblNZi1j7VJoDCXQMJblLMo5lLuUj4fD9lvnZAPbBudW/puWbbeUuZjN
W8Scy3g9piAT58IYv/pXI7/uV/l19nz4J7lj0Mx+Mj+0eX8VYjUml+lE/Hpz
KeCiHb8aqrqUPb/2xh7vw3hlTh+lHfHidxGvF10vVpP8qnfi12pd+1XqSvjV
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
klQnq05RP1OL8pFYkIu4gmwksnmTSgoRV5zL1pOFsII0+KTHMqZl8W0Nvv9q
r5K00+il8sSzKz5CscpmNc2vb/55uCxPGOIxQa27G7P5x7IrFvKwcoHy+0tr
t0ErKmcr8exseX86vDsZ8SXl9JlkTMYk9b3WV7//GxZMtfLrOyPwd2qR62XL
4VeTNg3j3lPaq7b95HcUVw1SncTOkaEY8cmRuMTywNnz69BZPR/HM2uOX7kE
QwYmfKi8X9xm6mR4FaoXRzn8KhmzMP394crzhVnvIcXg+oAlcyFWffSSMt/M
CYiye05RGb9KphzMWTBEaXO98qdy0zQ79gS6yO2CB2F9gsKqccF/ooPa5rjb
gsk4GpdVtf63qplfT0X5IiQ7AbEFrEwoymHlQS4S2CcvD1KKC5BaXIjk4nx5
OneSXXnh7ATm+GIymUwmk8lkcnU4rgJb5klQHc8YLYE5tjgblxmrXWbxXCyL
4bgj2N9ejNtORAXggO8FnA7wQlJuttxnsdZsQmGphvGrWa4fsvCr2Wi6Jn6V
RIvVMXMsfRurY9XymNUMPlajEVpJDw3j1xxtIc5w9vZl/BpwDufjApHMYvV0
aJAHvdxPFe9rVGPnUlj6pmIMys3rdBl/FrNYWO6bVBLlPojzJBMyBS3j4Gxc
ignF2cCa6X/YmV95u9WQc2vRVeaVF/D6Hg+ZC2v6/deVp33KLmjOwHvzFf6Y
8ss/ZX8XS7B5idrOd/UGlMpsY8LxDQqDtZ4yEC8vn4IxK114xUQ8o9bdDvls
LTQqg1r41W32JESXlAeGrvm1tCAEQ2coffm+fiaxyn0Vm3VZOHDkO0z+dAK6
T+vr0M+QvWuaXzm4RXpvQzd1e2O27oJc5V0OvxoKozBwrnJen1l/FuXvhgC/
3yYo52TqEFxM19i2WAm/moujMVDte6nt9LEY5epcMo9c+prcxpzPN/lsujKm
szYdn60bZ9ef1PPovmAc3l7/Cb49cRwpWhf9WyvJUK38ejban3FnFgrMepa/
zXI5wPscl8fU4mNmsQ1p1OlVMe+rvIgtX0gmk8lkMplMrkYLDi5S4y5lnBhB
HTPGLMdhfHyZPPBxZkT2KSBDNCA0Px0neT1swCV57JiUvGxlnETGrbz+1SgI
yniyZrPMrtda/wprF01l36F15tdSUYdixpbZumKcj/DDkcBzOBx0nvFrEJLM
RchgUWYBi+Y5n/KxHg12NnKzdZpVcw63jBFUyscPkizjwDKOFc1I1RTCMzIE
Z/29rw+/8vDdVIwVn42z9u/6a2TmNfGroSgWw+ZXzK+fnw0ou6CQjSXvKtwx
bcc+Fzuqwdalyu9DrfxqwIHP+1oZrfP0QehSiYetXWN939PCr23nT0VCaXnj
3bjm15JcPwyaprRJnuWbUc6yThJLsWbdW0p/Qu+8gB7zXsGIzz/ARzvX4+u9
P2LDrkVod934VTm2/TsmoLXMgi9ibUQexHL4VZcXhhfmKP0+9drmB9cjByvb
jdg/XX2mMBjnk+3aLVfCr6bCcGsfzm6T+ld6LrknHomzW4+IC2c2YfCCl/H0
jIFoO6mXlWU7z5kM/xwNyqia+fVclB8S8zPZNWZUygFJkvuh4+UAP6M6URk/
zOBUVpRnvcy9VWNdMplMJpPJZHJVLVqt1DPYxn11GBdWrn9gfMvH0GHzFDDC
ymWOyE2X+3M6HuCJs3b8Ko8Va2U3QW7nWy67XWX965Xw6wWZX8+X4ddiFmka
2L6a7FjVrI4rq7xjq5jzt8C428ysN5lYTCvKMSo/Vg2LaTNKCuETEYLzjF9j
rxO/cmmzPTFujtq/7/LViMmqnF/bLf0SLmgAJTlBGDiz93XiVwEBu5W+mTos
mACP+HjEZyRV6JS8POsYotfCr/riWIycqxxn351+KCdp7Q8AqReXoCNjRbcp
L2L9RT/kaB3f09Qn7bK+A3x9+JXxVGEM3lTb7Lae9Sa8kwNd8qtQmoTR7w5W
WHDJZhSW115a0uGPdaPVOtSR8M+3HYc9v77tgl9FXTJeU8dMemb5Frlf8orP
ZzIyNGXPm2DSIjUzHj4hp/DxGst4Sr3w4k/HynJ3DfBrMuNXrckolwEmdrEp
z98kuT8w/t0omB3KiYrMyxST/fMwu+80jab9f55muIHTbra0oGk0jabRtFt5
muG6TxOVelInXuVcxusZTaLCXCaLWSymZ/zFWU3L284yji1gjspJV8aU4Pwa
eBPwq2ThV5OVX3MYv16M8MfRgPM4ovJrCuPXLEZxJSwlTJIgM6rkbMFm0WSG
yNiVM6yR8aucNnJaMuZnMW1WcSH8wq8/v3L5X9iItmqbzBEbN6HvdNf8evzw
x8r6Zs5BmM45vSVE+W5CF/U9xJrnV6Ao6Tf04NubMgI7ojPh8goQDUjJyLD1
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
FL+/8cITDfHsG0twKSodRdnJOLhtOVo2bYaGda6BX6NLEX5wGe6pp7aZH/NL
2WfJLFbZ9M7zeLLPXOSzQrAifuXPvD57owfqN2yO7edj5bQuiHHHqNaNWDnQ
Fn/4ZSkzmvPw2+dz4dZY6UeyfqMHsXzJdLR47En0eO5ZtGhqece2LgbM/Z5x
h300XhG/mnFow2y4dRmBDTv3wv3McWxdNRmP3VMX9e96DF8fj6wyb/F7xr41
76BNx2ew6qfDSMjIRWLQETzbpA7LH/dg7Md/2e4hQnGZ61yXrlznDe+3v84l
HP75Uwxs/6Dy/P7B53Hx1FYM7NkTw0aOwoBnmuM2fg+p2whb3avWp7Ooy8IX
b7RSYoZnJ8Fa/LDyX8M46s2eyr30yenbHJgmP/wPtP1vMyzaeUl+LmgsSsG2
hex+V88N54rsUkk04fzPS9Gzaz98+eNfOHPmFH7+ahEev/cO1LunKT78PaSK
fXixY183Gfc+3B0HQjPZXxI0Kb6Y2OspPNLyDeSoxZagScOiER3U898IX51L
cWIxCaF7VrH0a4DVfwdBMGlw4Me1eLFbM7XdTAf8fOhXvDNqMEaw8mnS6y/j
4Xvqo9ZtjTBthw/O/7oavZ55HuMmTGZM9CIeuOM21KrbGBN2xjjEoTZ+fRwr
Nr6PBx78L1q1aYsnHr5bOXd1GuD5iV8hpdRuKRYb+e/5DO3+9xhGvvstQhJz
5DEAD2xZDLeHG6L+A+2x4VCI0/G44FeW5l6Hfsbk4d1RT40hen8d5bicoMX5
nz5kvNcVC7/5EzFpOUi7fAlTO90t3yMGzt0EfVX7+TTlYT2L0x5pNwxb9l1E
WnYOYn33oPND9XHbnQ9g2V/B1m3r0n0wqdcTuPOJl3AqKlueluDxC9rfUwt3
uY3ApXTnB7gV8Cu7Rn3++gLdWjyO6at/QnB8OnJTozBrQGt5rIkur36GFK0S
A2cF/gq3O5S0mLTmpC31zDqEsTLsQV6G1bsL205X/B7ENYn4lfiVnac1rz9m
3fZrf17pMzybwvZ/LHPXSBdj6vz9yViFJ5oORXCxLefr0g7g8duV++89PRYg
1u6G7fHTdCWOqFcHD/VZgSy7YOzEV1Pl9d3eeREK7QoSbZYP2jVW+8G4vzfO
JVn6iZNwfssMOX7ivz3x6i5oLbe75G0ygznzK9flfdNk5rDxq7pM2m48qqaZ
c/thqcgLXe9rhKUejifx4pcTrHH4jxG2AX7DD76HO+Xz3gRPtp6IhFIRyZe2
o2PzdvjePb3CNDflhqPDo3fh+fGfOUwXs4+g75DJtnuAqMf+2Z1ZOXQXi3MK
Hc+xUIgNAxTe+1+38chxqKiQ8Os8pS+d56asLbN9Md8Tbmo6lG0/LOHPpc/J
9/KHX1zg+OxezMbLT94m8+s3J6IcVyposLh/Wwz78Ii1nM6J2IOm7Dq546kB
yDbYYt/EX8Yp9RVPf4cSu40fWPuGcl9r+DCeG7ZMrtvy2/MJHnukHQ6F5jPW
SsMot4fx4pyfHTed9jeerKtcj+9uP1/meMuIlR1r33gedzbrisv5dvWmYgE+
HtgB7vG2PlXE7ON4ygW/chnC1sqs5MyvpfFH2HVWB4NW/O2QtiXJx/FkQ+Vd
udnHLc+E7PiV7X/vyeutdYViaSJGPaK8F/rICxuc6m1dS9TnYHTnpmyZOzDp
ZLbtBxNb18NKv0p/hNnqGBNObJLv78t/DbZPIKT/8RLeWr278g1aN2zjV67Q
bdOt7UN6TfiyzOz7Pnsbt987DPEsQ1fIr6YMzGqqrOeVb0Kt15agy8aA1iwO
atwGnmm2/C9ksLJJ3W757Yd5fHsn5vzkZ21XUZp+CW3uq8t+uxsfXLA7z1Ip
Ph35KB58/W8HriyNO4kmd9SV19X9w0t2+aQYo92Utg917+6Mf8KLrL/kRR9G
s7tqy0xxW8NOuJhsK0+yvXcqcVb9NjiRZzvRWu93cRdb1/0t+yPZ7gI4tHiU
vI12y445xGQBe+aiAS/7XLYf1mPPy/e45FehOBgvPcTy/Gs/W8tY+Whiz6Bp
Y6VOt9PKYKVs4kz9jHLva73Qy+7YjZjd7345zv3xXFKZrbuUIRovPaCcry+P
plgnF0cexj0sfWs/Ngrp9rd6Qxh6qPeKek264m9r+ppxfKnyzsR/eo5hMYxd
zbTuMkY3Y+u6fywSdA5PB5G593U5va6FX82FMXiumdK2p069O3Ew0vEeYtbG
47mmd2LBMSU/ls+vEmJ3TlN+e2AcEu1O4Nlt42UuGzL7O4f5U3YOU/NZHXR6
40sUqmklGbOwZvjDym9178Maryy75crn12KfVXjg7i44X+RY2Hw7fYCyX00G
I7SK3bhe+mkR6taug01n7MebN8P/QyUP1n+wBXxTlZVpfRa6vM4PLxnt8jpP
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
4SoSjJMX74HRrSguqoJRe96LneFZFO+KwQ1k0WroanwR0bkVRSkYYUTlilHD
Rlvx8yfLUrzQogGlk+Qw6Umq2D3qPPIWfJn/40G0WBtF3lrAL58u3sTxFQgv
C6bdmbU87Y5j8S44ERlJkbC8eQQT+PnptQwHIiQ1ExGhYQxX5RXgRH8mfvWn
345IOTeiehRE22NsW+Z8yuk7n4nxFE6WLya3U4dO70UIEfPnOfDZysxL6nYc
iYSqk4+1oCjyFgyovXKyyhhhdg2xaZlED7jgyPr5aM1fG5+18wUKMyKRmF57
sgVqr87vPzH2ou0WR3GfuSwJM5swerrptGfic0QVyVjNnwMcufKxsN2Ij/Vi
z0xGV+n0h32U6BpxCVyOjoOKSlNsfhIsmN/g5vpgaCsmXqRBt/F47MLwXspP
sLu+GXrqjMxrDdyMN3buSCb6kpPlifFGzLyDjIoexi5Yh0t3HsP86X2c2L4C
nVp2wuaH/sI5lKx3aE2NedUWeBsquc8n/c0yZp+/rDxm7rhNOEIuvvh8wN7V
M5hzY8nf1FNeyIr1QzTpz/KCaAzQl6fzsi+/54sKTgkC3lyGW2gqMsOIX6TJ
2Gd5xYaYtnw7btx/gueP7+HP9QvQTlcfF77i/Ff6/Bz1ZnjgLT4+Cj5uJDpU
BXNuRYj4SSWY35c5j3z8qQ+iPY3QVzvQUFkWsqrEv7NNlOBTJXFWGP7LNrqf
OdlemGikwZ+DpdrXFJduk/Z99gAnSft2btUJGx9Uti91ntEJNFNn8kp3n7we
7pFMG5flxuESdR4w7V8oYQjhmvbuwSiu0zgrw+Vf9ekyDP79sMTdvXPaMnMr
q66JjT1qjnIZf46yhYk1oye5JdgzuSefuzfFSSs/FOQkw8niOuaP6sGcaavZ
F85pRQjxj6DLl2k5k44lqKfZDFbEHpXlJeL6wVOIKeSiOC0IPQwUad15xE96
Pmsq7+Qf/FwvI5dek5gb2jmlK7qvfEI4i/BysOURxtYq6MLkXoBYnuSyRHsM
baFGt+OCAxZ1aUARVODhcmbOVEZWDxejxAMfizJj8OTUOjTXYfRnA+MpcIwW
1x/lMXfQkoo1lFfErB03EJuei6RIf1zaa4qJw1vT85o6RkPhEpqAYiZwDm57
JjPfVOqId5H5ZNwk4eoViyprFnUAy19Z/kp6PTM5Fs6XF/B1shyMV1xCVFIq
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
fb4btgbM8lTogMhveN4cT4Ir/a24aVfvlbn/qxYpL9FQKIONWnc36/sFml9l
uLlnLhxNTTB8w3lV+/6k17sKML/KMb4dP56Jeav12tvqSyMwuRSfXyt221Ww
9a9KZjpD+XO2nkER3AvWPt7T3R3dubHmbJoML4D6VzneXtiMKoWN0W7KdlX7
Dr7/K+VXyq8FoIDz66FFPbi/GdWYhOjszlHyKPx+4Aj/37m1H949iz+HGNXG
3ZhsJ4gjB3/PvV1TdvlVkYI3915pjLn06comFBWei1vKeRhS83Dezld+ZXbi
Ic358V7NWm6EthKP2O+S0BavOI4E5mEEp5z6v8qD0bskf82uP/uQ1q9Hvj6H
oqbMMhdpDR9hg/7r86tChG29+fN2zZ81x5fIe35l++5shx07T/o22PYk8/NW
eWfXjeSmV3LwL6rr6X87v8pxeTbfj83R+SeIFdqPEUXCe6xefJjLGtlJejKL
a2tQsuZgjX5U35pfOUx5YGH7cmjXoS3q1a6FJu374/ADLW315ZGYIoyxVKnf
fK3zlxb3GQ2KMudJCyc8zNL/lfKrapmibqrGZ+qVzXkmye8Qiukx81GpWS79
XxXweflWow4rLfItOlYqItQzWeGML3PekCVjWithLATzzvDWdiEQfUALIffN
upAx5lVe8itbd9tTeG7mwKWH0cvGEHseZRoTXuKNJuwYRnoWWHktu7pAJUIv
zsZNj5xzZIHmV6kf136YvW/pciC7ccCViLy5Esfdsx/nPuKyi6puz+2R9jZJ
SqZM5e4ZpMo9+c2vqZ47hXHna+CVWn+Db86vqR5oz/YPZK7jJ95n3CfRll+V
iR6oKyxfnaG/I7uunH6fPVUZIrv8KvXfyy2HrqE5DjzQfq1g88TNldPhHiH9
y/lVkeCN15/VxueWifCbS1u+zTXz+dHrLwrvfFt+jfG+hrLc87+tsfJddg8T
FOPTvQfIEucyJg7P9fx4n1YVmuBLvPbjXpHih7ljtyIuxRf9hL6dziPXZ/1g
AeZX0euVsGHzaJE28FMLiAWbX4HNY4XnfZs1xyttq1EchG6WfJvpXr+lP4O9
oNoPKxFyfBD/+3oG2HNH+355dRV/n77FiHUZ3/zG/JrmfUgY19MJj9SeA0n5
lfJrgVEmYXsdPr869d6XZWyJu780zT6/rhqcJb9+OL1auM6Zot/ys1nOZ7KU
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
MPte7V5zVf2XlZIobOnvxOzLzOeZ3N9izHYE+jxCp3rlNebLvmRFtO8+CA+9
hbayqZ6Y2b89Sthrzn+1ViPhnaaA26yuqr/V7TEbkcJmlsb7Y2qfxhrfKVPF
mTnnxGa7nhI+HcaA9g0058ehOJp26ImNJ72y5Ec/90NoXrEEs0w2KOtUC6WK
O6DJgLkITFKrKJVFYe2AxnB00Jz/um36Ys+b7OeFp8DBOU25zy859CzLu9fW
j2WOQUvY1eyDewE/dv3kx6vbUIY5L1lamKOQuTlz3FmjbA1nbL3ilXEvIhNx
5Ae0ruTI7PNFMeqo/986nhQhhBBC8uj/Kb+mxeK6L5NfPZn86sHkV5+M/Kr4
f8+vShn8r6xDp4Gz8TkqHpFhwfD18sS7t2/w6uULPHZ/iNtXzmBcx5qo/8un
LPVD8tQ4fA30h39gMJLSvkPPNmb+4iJC4Ofnj5CIWMhz209ympQ8DREhQfga
GpXxHFhGamI0/P2DkCL5fvtCYlQIAkJjNH73RyZJDENAcCTyEV2/K4U4BWFf
AxEcHqdRnyiKj4Cf/9es4wAxx3VUaBCCQqP/Nes8VwoJosK+MsdCACLikv+2
9rjcT4uT4O/rjyTxP9l7Ne/kafEI/OKDz14+CAyJgjgPldCShAgEMfv8D7LL
E0IIISQzpZBds8uvzJsKhZBfpXx+VTLZlX3JvzG/KtPzqvD6q/mVjatshlXP
r0o2Q7EvWUZ+DUiNxS3v17j04TEuvXsId++3SJSmMmUaCbMs/9/51f/BXljo
6uDni945fs7z1M+ou94zX2PTEEIIh7mOBPl8wvv377/h5QHfyB+7zpcQQggh
359SS36Vqepemf9Pz69yNr9KuPyqkDF5j8mvUia/JilEiFOmwDM9v75zx923
fH5N05Jf5QWVX9n76HL+e2xdnEyYd/a/lezfZQruJWfeFzO/m8zMQ5goCXc/
MPn1xUNcfvkQT73fI16ahlSljMvp/5HamW8gw/ohZbk+X1uu+mX/MWY7r588
HM+TqGaCEJJ/ClEY+tUrCzMzs296NVh7///4PE0IIYQQrumwkq9j5fJlegZk
Xmya4/IkmzflTH6VCS82gzJZUMLkWJFCjBhpMiJkSXgX6Y8r7x/hyptHuP3q
CYKjI7gMLGGmKxamLxXyK/ubqpd6ls1PflXPvQp+OtxLbdpslpUwv5nC5O0k
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
CCGEEEIIIYQQQgghhBBCyL/Z/wC3BHnh
    "], {{0, 147.}, {566.4, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{120, 120}],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{566.4, 147.},
  PlotRange->{{0, 566.4}, {0, 147.}}]], "Input",ExpressionUUID->"3b90e729-\
a28d-4120-bce6-0f930d6cfacd"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsnQd8lEX+xm3nqXfnec3r55X/3SlSLYAivRcRka4oofcmvQpI0QNBioDS
lGqh9xJKEiC990ISEtLb9n23Pf+Zed/d7G52kwAJCfh7+DzsZvYt88477zvz
fWfemX8Mn9J39CMPPfTQh0+w//r6zG4/fbrP3HeeYX/0n/zhuDGTR43sPnnG
qDGjprcc/igL7MGWPcC+PMa+oyZlswnbKrPyz8oWL7et3DZXV7qtOzCLIJlM
JpPrkSvcp51t9W739VzKEr5dkEgkEolE+lHLXmew27neYDerMViE4bCZ/W2y
22Z12MxsqUFbba5UTCaTyeS6t81mt1x2VGBRiwe7lTMWZl6W2E18SiKRSCQS
qSb4VGJ1FLtrik+tim3Ep2QymVzvXBN8aiY+JZFIJBKJ5K6a4FO2hLDCpzYP
fb/u3Ep9yEYmk8nk+mI7n4oywuqBUYlPSSQSiUQi3YlqmE8t4v0j1KDrvh5G
JpPJZFfLbGotLyecyhHiUxKJRCKRSHesWuDTGh3SyMrqQlYLmUwmk+uRbTaL
4FOLUj5YbbfPp1biUxKJRCKRSO6qBT5lRHn3aGofCpLxqY3XhchkMplcf8z4
lI8VYFLY0uKpDdXT+L3EpyQSiUQikSpTDfOpSTxPR80xal3XwchkMplcwVbG
pyaFTwWjKnzq8V3UavKpjfiURCKRSCRSTfIps1F82oRNNWFRBzKTyWQyud7Z
6nK/Nttc21Fvh08tRKckEolEIpG4apBPOZvqFevcPu8kzCBsJpPJZHI9tFHc
920uzyTd+/p65FPFvHyxEJ+SSCQSiURyVjX5lM8bY7aPt2iziefm9jlPjTYL
sxVaiwkqi4RS5iKTAYWSHsVmozD/u8hsEL+JMPa3/bcS5dPZPKxUWE8mk8nk
euQyu9l9XG2WxL2f22CV21TF80wr+zRbYGW2WaweGdVevthNfEoikUgkEul2
+NSk2Ggxl3/nbGqVXaRTI1tdgvSyAsQXZiP6VjoSi3KQXJKLBPZ3fEE2Utlv
CYW3xN9JxblenezwLYdTnD5TKIzC6lmYp3z6IIXVt/SmsLoLS+Vm9/DUvGxk
FuUhq6QA2aWFKNSoYDCb5OeYFgskSYJklGCtjE9txKckEolEIpGcdFd8anPw
qd5sxs3CPETcSMbVpGhcTojAhZgQXEmMhF9SFHxjQ3E+Ohh+iex7TCgusr/5
MpX5inA4/MhkMplcb+zPP+NCcSk8CAFRYbgWHY7guCgkZKSiSFUKiZURov2U
2Wq1eO3jS3xKIpFIJBKpgu6GT/k7R+xTbzahzKBFQmYaLrL6yokQf5yOvI6T
4VdxNiYYZ6ODcDzUH0eCrrDwQPH9RFiAWKZSR1zH2YhrOEcmk8nkeuXz4ddw
IfQaLoUF4vx1f1xgDoqJREZuNnSSUZQZvOwQA7F7eweV+JREIpFIJJK77oJP
zWx13oaqM0so0qgQkRSHSxFB8EuIQFh2GsJvpSEqLxPRuZkIzUpFUEYSIm9l
IDzrBiKy0xGZk1Gpo5hjctIRyxxHJpPJ5PrjW+mIyb6BqMwUBESHwTf4Kq5G
hiE5Mx1qg060oZqYrWI+GqvLWEnEpyQSiUQikbyqunyq2MTqGfz9IonVOexj
+PIxMYrUZQiNj8HV6HBRb8kzaVBoMaLEakKpzSy+55m07G+z+Lu6LmNWM2vI
ZDKZXG+ssplQbDEg16gWjOoXFSL6+cbdSEGZXivKCYNJglkwqtVRxhCfkkgk
EolEqlS3OX6vnU9d+viysFKdBhHxsbgSch2RyQko0KtRajKgzGyEirFpqUmP
Qr2G/W2ASoRJ1bLGaoTWJpHJZDK5nljDrGZWMU4tZPfoqKw0XI4Mhn9UKCJT
ElCiY3zKygjehmp1KlOIT0kkEolEIlWp2+3f68Snks0iz33KwtRGPaKTEnA1
JAgJqSnQm+Q2VoMyti+vq2glI/uUwyWn+WkqM58D3kwmk8nkemN+X9bbTCix
Ssi36BGekQzf0Ovi/Y7g+GgUadTsXs/u88w24lMSiUQikUi3o2ryKX8OLtpM
rfL7p8Ji3lOLeAdVbdAjJjEBAdevISEpCWazBRYLY1mDESbJBBPv62UwwGA0
wsjnHOD8Wg2bTUZYyPetJW0BDp75Gl8c+Qa+2SV1Hh8y+UGzVBaPr4/uYNfY
TkTdKr4n++T3ZT2fp9pqEO9uRN5MxcXwQFyJDEFgbKTgU70oJ0zV41PF/G8S
iUQikUj3oWxOdvvT7ScPgTanfyivJzjzqX3sf7v5PDKMKfViTEbex9ciLClt
o7z9lL9vFBUfBz9/f8THx8NiNos52fVanTz/HeNVM+PUcpsr2uRqXUkaAqOD
cC06ENdiwlGkM8JqkqqwHkmJwWydIERk57G6VFXLP+CW9LiREo7Q1AxxDu/1
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
ym3KIzrhRHqxnGdZfE23Mb/M7fKpVZ+Jd5V5bRuP64/LNwvFeeJzg+l1hfh2
+3tO/bFd55cJ8VuvjDXeGoP28PlljI5rnL97UZgbhr7Tu6LNwvlIc34OZcrC
1BkdlP4BfbGJXYsaSZLTmK2n1eZj746RLvc9T3y6Z8c08HHUfM5FeswNdyJn
PtUyPo1lfOrL+NTfmU/FbybxTFM86wQvW2yC7SWrq/k4f3zKYZ4uoti0kclk
MplMrk3z+gR/DzWQ8enR6ADBhhcZn+azMlzviU9FH1+Z0+6IT60V+dQo2jxN
SGV8epLx6aFoPxxV+JT3ueI8alIss2S5eXsuHw/YbJV/N7I6Ga9naFk9VM34
lLe7ljA+DWJ8eimkDviU12ekPKz69O1K+ZS3HR3+eoLj95cn9ceQVVPxwcpx
6Pbhm6J+2Xr6O/eUT836HHz2iTIXJOOiDvy9znULsHDXCoz9dCzajJO322Ta
SJf2vLvlU15Xz00+gs4TlPZin87otmgMRqyZiWErx6DDpK4iPZpMHIYzRexs
GG5gykyFvaYOxqSdm7Hz/A/48vBGjFo+FM1YnX3EbDmuo74tZ7t7wadWE2Oy
tUMq51MmXWkSJs17U1mmLTrMHYFh/5uBEZ9OQq+Zb5XnmzWbkWtwYxeWd059
ae9v2QYd54/ByDUfYvBH43GpyH5CbUiJ3I8Wo2U+fHHs2xi4chomb1mBmZvm
oN/cvo59vL/nOPQKTxWm7EPrkXJ44wl90X/5FIxaPRXvzOvnGD+r+9rNHua0
8SQb4q/MFeu9xdbxMu0QJG0Ovt45wTF2Dz8/7Wa9jyErJrN9T8fQj0ejy9Tu
Dobl4xvNP3XFae4bG0qz/fH+DLn9/4WR3dCd5Z/ha2bAZxW7nqZ1l3nNpyNG
7j+FUqdzcXd8akNO4FLHO52vz/hA7POD5SPxdVR5PqlpPuXtyJEnP3Tstwk7
TwNXTMHwVRPkvDO8I96aYh+D2ZVPzYYCbFqnvEvq0w7t5ozA8LXzsWDnSoz7
33i0Gy9fN42nvI9zua7vHdyI+QGvKM9eGozoiK4LRsNn9QwM/2Qiuk2X55Vp
Nf9dx3xLFfnUgKmLWbxG9cHxdO/3iduVnU+17nwaWc6n/Dd+/zcqfXAkUc7Y
xPjndh4VxZTyropV4VMryGQymUwm175lPr3O+PQIY8LDCp/msTJc58SnonBW
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
ByXO95xPmcxmM25e/QpPKXGoL3xqM0ssj9d1LO5nGbFqWCv87vd/w4QdV+5N
fwKrVdxHovZ+yNiU56f7l0+tkkEci+Nvi4Rb4bvxz6fYcdUJn7L7NItTtv8q
/OGxh2qdT/XpZ9D8mcfQ5XM/Je9Y8NXMfvjj7/+ORWfqlk9N6nT0a/JHNO27
3ImVbCgM2oGmf34Kj/6mPcJKauvmYYVkUMNvZWs8xvK4O5+a86+iT7N/4g/P
NcKak+m1FId7LHMR1g14FX/8498wbPH3qKVmhPtANlYmWaFKOY2/PiyXl8Sn
NSsp/Qe0e+Fv+OP/NceJqMJqrMHqqdpCbBzxgihz7phPWd3Y5NQvxMYqwoay
dAx59ZfsPN8PfMrLBz1Sj47Hz1k6PPh8yq5Fc+3DXP61XXjpn3/Ecw074mS6
4e42ZuV1WrebJwO3zTP7snL1z+gy+whju7vbxb0S8al3WYt90fRnD+Ev7Ubh
mxN+uHzkK7zd8Gk3Rv0ZZlzIqNV4FIZ9j5//9Fc4mKh1/UFKRpvfyPH4/YAt
cKVkKyI/642/dRwGE09CXRTe+Gnd8SmXueAq/lWf+JTl04Mzx+HorXvR6vcA
y8auY6vtnrfh6ON2KM877lM+tRTjs169kKR2vcdJqjS89odH64xPhfQhePnp
2ufTkwv7s/P3JCYfinIKlfNTXSt579t4nOWvkfsr9q20mk2QLLVfNumCZ+MX
HviUy8avO1vdp1ONih2PrQ7uJfVSxnS89XPi09oSv35st3n9XNkyAD+5Yz61
InXbYGzxr8jDi4b8+77hU6GSI/jbow8+n0opW/DZjmv3ZF93kh8ryoKEzzri
SHSZpx3cd/dW4lMvsuqwd1gT9Fu4D85duGymEiwb0sKFUZ+fdxm1+YQl7/o+
/LblChS776RSPmWHUHge3bq9y/iUHYAuGq3rmk8Lr9UrPi2M3of//vZ5HCY+
vS+lj98pnuHer3zqt206nv7la0h051N1feDTULxyD/h07jvNBJ9OPRxV9cL3
UpYCzHvxMRa3x7HoqrrOoqELmeOVT0kPuIwZePtp4tP6pLvh06Kkc3jpd09i
zRVPfPqf+4xPj+K5B5xPDQVx6N/oV5i88WpdR6Xaygrai+cefxgHIj3w6X0o
4lPPsmqyMHPsAiRqKj5tyLu8QekrLvuf087V6nt32pwkHAjOq/jcowo+5X0v
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
b2DlZ1vMXrMD5y/6YtdnM9BE5JOfY8LGM3I5ZNXC//ud+HRYA7Gdx5/8O5Zv
2sby3y74psrPPMv59E/48vAuvNWqGTr0ehu9u7VWziurr0750o21bAhndckm
f3gSPSd+itDUPGiKs3Fow2y88MzDePIvr2LtkbAKz9dzok+gx/O/xCvvTMfl
2Jsozc/E0a2L8MJz/8LPHqnIp6UJp9D+X7/G8P8dhorzg0WNvR8NxVNP/QUn
oz3zYsVToMKFAzvZMW9Dy//wtH4Mb4xZJK5B7lOh5fXO3LhzGPjys3ix4wgc
D0yCVl2MoBNfsvrer/HwE3/EiBUHoBLPtFj5fv5rjOvTXLwzytNoxMJvMLbd
82IsZJFnfzsQN6oayo6x3cUf9mDrp5NFHuX3pJ7zNjnitn3bV1gx5W3BjHyb
8/fY67YmXNg8F23+8Qv5vP7q9/hy+1p0bfkyuvfug9ZN/yHH4afPYf2VHLe6
kxWRx9fhv08/hX4frkVsVhHyM+KwZeH7+Nu//iTyqYNP+XOVM19j/DuvOfLv
WzMPO7aXHbQTw7o0dNStZq76CuN7tUTbzj3Rvf2rSrn1E/RefBJGt1t3QdwJ
tH3uabQaugTJuWVICzmGga/+Reznscefwp//9hye+0cTbKz2tWZDWRI7f51a
YeictTh25jwO716H7i/ye9pP0XL4GuRo5WeGqqSLWD5lMH7zqBzvf7ceAZUb
BJlUWVg25BX86YXOOBiUiuLcZKyf3lvcHx565Cf41e/+gueeew4DZuxS+MmK
jIBdaP1qG0xd+SXO+fpiz8YFaP7nx0W7+HvLv4ck2gjMCP16Kbo1/pOjfrfs
y23o3bIxOvXsjQ4tGogx5x/6yR8w71iGqJGYNLfwWf//4lG+/GO/xsrDEXDG
aZtZD79Pu+Env3oBuyOLxTr82eL6CZ3xi2f+g42+yeC3D3VWCPo2+h1++mwD
7E5wq0d4aT/l9avdU7sqcf07zuSUPxXUF9/AgnbyOJ1PPd0OaU7P0ayGAuxf
PBitu7yLzfuOwvfscXw0vre4Xp76+xvYG1SeLzlP7pv3Nv78QndcSVfxVkbk
x51Br4bP4uXus2G4jWqZMT8KE7v8Bz/7a2ccj5L3kX59D5r88iH8/L+94Jet
sA+73wfumY3fPimXJ394fz9KnJ9hskpjUcopNP3lT9Fj8XHolAS3GXOwcnh7
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
eOUfITw7w83PQrjfLTTWUKH081i3DInffx8/TcQ8Kybeff29Ul9mY3ZT2v+y
4Hgp+56bh8EtBD5FTax0p/f0eUUp+Ke2BpTVdGBdS7Jfa9W0RtUq9DytNeg8
sz9SQX4qI39vfswzVNYX9IcBdgXTtklOxENU0iH2tnw1OCTJPrP3cCXD5eQM
cSOCA25uAno1NIKcqgVcY2WcTygjP9LllYyOUzTDUts7+Jz9PV7VsvkpPz8B
I+rRe4cdz3+WyTPTPXcK48+XXGD4cgGxEYzoz2YfDfjmln0zPxXUXSAcR0nb
FHc/SNoIH52nUnvShq0HIJuZ5DmfvNHAUBGqll0Rz5GWQ2XmR+KlY229svhp
JmbUovnpcvtSvv88LzQU1CzRqoEHH0X+rgS3Er5jBudosTElutlxFBMfYfNU
Kn6/bHBwcKARZY+ay9AfFiX6o80iJAmnPx9vdjeWzU+L4zCRkZHT90iuV178
BZiRPtc0aUTsdaYP+TkY11wbikqaqFF6TdaqiWrMmqzS/SiySh6T9Qh1GH56
9IlkLECezzJqHDSq1kaQ2Dik+9hCR7AXTGzPnU9E6yQpyBlWDSZQ+zyivuQi
9p0fYlLzhf9nJEbBfUtPWmepdEOkON34gfw012cdxfnUK1lJjUUta3NG9tfG
Ph/6vQsyQtHBXJ2SgdV7zMbDt7HfHifG4+Cjny8y80vGphiJ0R9wbDLtM2s/
bJPkvXlJmNmUjskfuclBFBuRGYxO2hqweyEam+vbRjK6dodMGVGUFoIWlvSe
vMk4d7H9vM8YZS7NTz+67qJ+q91hOWSd2vrW/EgV46cy8vcSfTO/O83jLRc9
pOxufkE6RrU2h4KqJqxr1pIcz1rWqMLM7fotJyC+AoUu+QUpGNu8OuT0W+Ct
DB4oE+Xk7015dwfmgr0D3eYIFJ//3GwEv/0gnMe8Ig5iPgbAppsJ9e6zjorH
Axfh8Qxa/tdtPxfZZZgQ8WHBiCnRn9R6isaV9ROo6+TrLURJy54fnUftZUw5
elf2jUqjLH5anIplDYhdTOSKlZRNWgvmjE1a95/xwpgxQR7gZlVUqfjes9F5
Mh/HS3+B+rL2T7k52NK3Eb3WlWpgn+NzpJXhHCqfnwKPN4yQwU+LcH6aBbXO
dzypSB3gXwuWn1YcnwOIztFVRu3usxCZ8Tt2u0vhh/HTZEywoL9bfY7hp5xA
dNEja1y+MZ6GxSMhIUHm3+fkzAr7Vb7ET/M/vYKFMe37a7EjGHkh9rSNWGc5
QuJlP1/wl5SeK9RNKYHXUVdFjtH3GqjRdBDcgqTjDv9/8NNbsFCRzU8/+Vyh
z28YdkAoMzEeHRlM+X7HbbhVZl8mJHxGZon8+w5+WvTpLh0jq9oKPl97PJub
i5dXd1E5ZpZu24Zm6qo0P73z6/jpnGbqZfBTDoa01Kfs0YW3aE5UlPYYtYk+
tmgyGh9iy56niSnZQj/KN/PT2OdCfrqT4adRT+ygIzi/LF8drpJb7EKk3lsk
jD3a4xGH7LiXqKdHOIxeE/iny8idVAY/zU98jRG16LPX8oqqqGLdHCcffGu9
qrL5aUFiIOpX0aDGoOs12XqTn/4cjZgYsxGrHJkL/2B+6iLNT2NebIMe+b1e
s34yz/L/eH7qLZOf5r2zgx71vgpY7hAhdkER3CY3oMZo5I3kiu9HF3zEIGoc
auPWh3L0R1K6GDcph58S+bmpK80zWk/bKfmsFBdUJxzRqI4NEkuUYJ4PmmvL
Qb9yT7yOKntNfk7OEsm18vip73KZ/FSQW2xHN7pdHSfsYe7FxZ3VHTDupGeZ
/VWUEoR1Uweg27DZOLOuG6Ovuv4kfsqF3/o2NBfc97ps2f85UeTPJfbbk4OT
hed+1HUrocuUnYjLqriHQhZi39zGpF6tMHLOZhyYWZPhpxuluO9D21nUuUfV
OmOEtvRHt/1Qrjkf8cI9Iy52jaU5rvWUXbIfWJSKKU3p3yhUmYVEYVywbH7q
sGU09Vvzsbtl2jW/g58u6EHzE8sFDyi7uyA9DG2qq0GnfhcER30qW98kp1Uo
n29+EuFPVdWgVLULEsrw50uhPH4a7I7qAn6q0wwBMrdwyDp3P4Wh3dtjxnpb
TO5V+Zv5aQmyY15jw/TB6DliNrbMoeMR5OuK+OnB2R3JWKtg5aUK1jItg58W
pwWgoR6xDUz/gf+ncnQ96fuScNzv4qcEuVF30aUqbTvKK2uidsveuBMsnevh
m/hpYSRGmwl0hRpOvv3zavSx/LRiKEjyx6S2VdGoz0IEJZWy54qS4Ov/G2qK
/kx+mvUUDQU8T14P96J/zD7xl/hpcXowmpvRMVyt94Qg23c7vT+i/S/e51bU
MuIjPdQDk/5pJMyToqhrjhnbryBF7NDM/yI/vbO1LdWuQYvPVuwlv4OfckIu
0ecu5a1xJ7Fia1iQ5/eZwyH079Ie41edRGQaRyy+98/lp4Wfr6Mq0dVG9boj
9kuKlL7LD+WnofeOQJs6c2SE/SGypUBewF4mZk4Ou+7EIDXkOqoJ5odOA7xK
kbG+y6kvk5v0FovHdoM+4weSU9RH/3l7EVNejmCZKJufcj69Rm1T2ldVf0uw
bB8Y5z366NFtGL78Kv3ZX8ZP3zuMo2ScTqPeSC+dsAi/jp+Cm4Gjk1pClfC8
er0WoCSEtTg3DhObVEalxiMkcld+Ebmv0ZbSN9o4F1xRB1U5/JTg7e0dMFZV
gqJxMzi+Z/JzElsj0HYQ1DSrYLXbJ5GMynCHNVkTGib18Sapgg3/Fn5KEHZv
M/SV5aBWvRMi8oktlOaN3jVr45lUXUg+sqN9sGPeSNRpPRgXHtHzOtllzE/m
p0V4MK0O9Vn1CW6o8Colffviwia0qaHLPEsexvV64KRH0FfWMeEh3v825g/v
hM7DFuAJkWk8sfheWfw0J+IBqlLnHrUw72a8oCoNjs7sgv9ui+cWK8LmwZVp
+6ffGtl7+9xsbOhKn3uUN50misEug5/aLuxI/dZs2DaZ55b+BH7KSaHPBiub
tcHHzO/fJ8mJ80F9Q9LXBi0RnPsD9k/L5KdcBN49i7Fd6mHo3J0I/JRD5d3a
Mqb6N/PTtCh/7Fw0Gu26jyDr6S1V7yzw7GopfrppfF1q/3Sa7f2KvV8Z/LQo
4SWq6hL9q1Yf99Iqtgi+l58K8PndfYzr3Yw5W0z+lCthypbzEvHb38RPc9+g
gxq9tnc9+0211ssBy0+/DH5xHpb+2wB1eixBhpSPm4eo88MwYtkZsQsENbWI
BK5Anbfvws/kp8QG66BNz9v9t8Ol71cCqqZTxd7zS/yUS/hpM4qfamOxVy44
wbaMT18V9oFl167g80R1pUR9zoefw3roaihTnExgZ44XO4v1v8hP7x/oS+2h
WfSbW+6q4pXUMf0OfloYfQMmzFgvuiOdL13YLWLj5b53LJXHecpON9H3fwE/
LUq5B2s1wTngOngRVXatckGdNP73xvfK4Kefva5CX5XmI30vlc4NS4MTsIfJ
v6CE80HZSA93Qw2BDaFQCafDZeTRKIOfisu0yJfnyXurQF6elhO1bc59ZQ6F
svlpcXoImlnQviqldnaQ6Z7Kf4/eTI6r/w5605/9Zfw09PYcaAj2dkzbISpP
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
8VPKVqRjfAd1do3IEM9CcxB6Zxw0u6wU2YNVJX5K1XDb2AIKapqoV6+emD89
aCkx+/+klTTx0itF/H0o1AY/LUrGrk7yUFHXqbD9KnIybF81w8d48Z5FVer3
ojge69qwdWmk9HA+pOZrqN+Dn/ILUjG9V0P6WuvdjtXgp6DX0UwOzoaGMlv/
j+KHxJe39k+smQfylfnp24N9aL988h/3a9KaCpEX+JDRZ5KtYJ5SNYmsET8l
9jKb2MujxJ7qthoLE684Or93WZ9WNeSnfORnJePhwYVQ026NC+ZUzepCvGDz
e0v4aXFaMHo2JbpDUg+34qr2fhXy0+ySdXYdPAiu2k7fL+OnoPm8+fFF0FRR
YPZiUXxObwBMveNE5LJm/DQN45rI0DHvZ26V71evCT7HT92f/0HLnlLbCXQd
6GebxrJzryWsk8TPutiXU+k4jWzdjnBnz6uoyvkyEWQcmP1v6jjsSNlfPk6t
GIp262zKca/q8lOfV0ehSNczqofrEeLXmrOd99HjQ73f0ZJ7fmd+yivIgbfF
FXSur485+x7RewTTSvJ7OX7K8dMvxOf46fF5jWh5mrWP2N6idKzqw+TdSyj8
gkCxa0n5uDKeqWfYa+rfVV4/pZAb+gpt5ZmcohXn7ZEbcBYt+64UW9O62uun
f01l2i3bEVZp4tpdBPvNjB1SrfMLQtjA/vfkp9H2l9HNUA0dRm9FfMmepW/M
T5eNbEbr4DEXHKro2/5A/DTzPdorUnuD6+ClR1VjtZ/np9QesYU9GtLzQue3
i0hN/Ii+9Qxh7Pv148EUfmx+WgTXm+vQSEMRv2y4hSy2Lrc4fprocwf1CJeT
1usJ/4yq1GesPX5KPdt4d0mdEQmMWbYVI7Rlse6K6J6dqvDTfDIPWynJY/dj
8efVUHo0+sVyxpeQlMaI3U8rnmvfmJ9SfpePd7jIGmjCp/tQl5HBhffizwaj
9hWbbhsq6Kt1Zfadl6BK/JTI0+1FbIyTzK+h96qZOyqE78NP0zG7NxOjVRt3
T+w7VX7+KQ9RnlbYNrU7fRYO9T1Fvba46lCDMzC/Mj+1OPEr/f3WEzZ98blE
wigIewkt+l3l8ad1JbEYIdSEn8Y6XkWPBupoN2ILYksSrL6An6aHf8BvXerD
oPM4+CSVjLQYfpoZhkEttGm7OepebJX6rkJ+muuN4WqMXGy541/xDYTwxfyU
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
tUGn1g2gJC/w2dVClw0fSo0Ll/F4CnXuWk4RW2/8LLVOF1a7kXNTTkkdI3Z8
KnH1Tvl4BoYaiiQnrO80Bkm5Jd3JxZuNjlBRIPi3ohbGXQ4qed4Resfp8fY0
P9XFjTB2SXeK4eJyN3IsabX3gru9Npps+FJurSM36CrmVXiezcTaI9fKVyAv
DZv71Sb73qm/K4zklLH9Vul9U2Gk3UV90g9LER7Hnv+ZMhgwYMCgCBh+WvWR
H/cGtQVruWFX/JJuyRUBD7E3J0OT0BkUtUxx6n10SaWUzk/5uTgxqBHFT2uO
R6wIb+CwkvH4/C5MmzwBMxZuxPPv3zC09u/z0/xIet+W+O2U4G/3X/FTgd5z
cz7tn6nWGm/jCzshw/8G1BTlYDlgpdQ5EyvOT18U46c53/ZBg/Qb9YQE82S5
UBY/RX4IutcQ9KsKVl/5SP+zFH5KyIALkxxofbEFvmRK1iy/HOpM6ofK5o6I
YnHwaMN46pl6XkiQMP0ri5++3u9C6t1dx++Qqn1+h5/O6qxP+c53WlY2PyXa
7f6W0aQ/vVoDV3wI/oC2ispYel7aPJ6FuLFzHlq0aFHBX0uM2ORbjtJ4uLd9
PHmG2bjtWPyI/onWFpqYuLd03iVYA5DzFU660vPTuCu9KM6kXhf3fiWLXXt5
eCTZdjKq1vhXCn768cIKKBP3q9R2JN4VDFdzfQxdfKbsB4vg892daNuy4m3t
MOtROUrjwf/GChiqykGnvjO+pLExoYsJ2swuKU8uF8eXj8KC0+/AEsg8YgEO
8zmBNiZKkJU1xbPIkjfXMp5Po/i+rAI2Xyvuoy+KXVPthDEBOs24VSLvjby/
jY67RnDrxl0QnVWS8GLj2igT2mdXHnab35WsERB6xPEx7eny9XErvKzFko/0
L8fQSE8eylp1cfFTNPZNaQDNfpfLnf826/1GtK5w37dA3xmbpC+MUMIe75hI
yQfL/ngb/AntFRUw/3hxH6NKQfpDNFCk+OnEw+WLOcWAAQMGFQXDT6s+2DE+
MFYX7DWb4HhE+UgIn5uJk4OMoKRExbdRbDoVERIdusrgp8T1m6ObULGAmqyl
czbwwU4PwMg2JlCt4YKvCQWBZBLgVgn8NPfHIWF83vX3ivPq/4yfktfiMNPJ
hNSp+s7zRk4uG+y8XFzbMBLKKjo49a40G5E4KpOfsj7vpO9vKO5jXQGUyU+R
gEECv215dey6V7BXXzo/veLRidYXjXAnQrK++OPiCJIfqFl1QVwOF1eXD6ee
qemGEAmPVBY/fbHDkezPZgPmS9U+FeenXCzqb0I+p9J6fpn+vVlRT2CtJwc5
tTo48z1ZEBQKU83kMXj7HalL/BvI/nGcsq8L5v2zSPBYsehrbYz+86+V3Vbs
X3AxlJ6fRp92oDiLlhVehomfM3x3bjo5nmSU6uNeGUcQeZl+6Ea0rYy8KlZe
+kTGq13f3hgdJm4uuxJ/EbmRD2Aj4Ayyiphx8jv5v8WDbWHpsgcsSe3HS8Lp
XYeL/dt7UTfiHXI4/jqhxLLSHoyjuKScIvbckxC7QPTenw/RsbY26rYfg6/p
pXQkJxVHJ9vDQK8ulp7/VqpvR27SR/RsYoZ6bYYiKKM0zsnBdaG80cDloNId
WvJTvsNZV4X4fnk4r/Ih9ZSLa3pDrt58SExbVEWQl+CD5gZykFU1xTHfWOKz
4zCjjhwGbLxaxpOEnsYhNCo6rxef0OvyOVJ8aOpNmNMx8Oaeef37H8CAAQMG
UoDhp1Uf3LRvaKGpQp4j7LD8dQn740BKyGfcDhXnNL4XV0Kl9kA8vu8NKzJm
iBxcl16QoC+WwU952djh0oCsQ/MN30l9IjcxAH2bE1xPszFuRIrsOFcSP+XG
34MlHfvJfUtx28J/yk8J5KQEYbFDDdSxaoEuvfrBdfBgTJi2Es+/x5crh0Vl
8tP8yKu0jVkOCy/8KqFEPkJf3MHrMuI7lslPc/3QUVcGCuoGuP+rIC5qaf69
fASfGCe0p2y+FyGx3K9HKF9NS2d3sDh8vNo+mT7vVhsXw4vXubL46ZdLnmRb
K5s7IbKkpuGkIeBHAimFfic+0rYprakYMw08kVLKg5xUf4xqTMXd7jzrDHJJ
f30WjnZWRd2xe0uc+38b7PRQDG4pkB/KcF79CNmCCcFJx8z2lmgzeHkl81M+
fmynYsqq1GqObwniPOTn4+3QFsQilzXFufiSS+blxGFBl/okzzXvvxWJpI8p
G3fHWKJGZw9U3SwjuVg0sAlpT2w9+YBQVu/16Anjxq7CnE7S4MKaoZCV1cOD
0JLisvIRfXYw2dayCko4/zG5hPvEn5EW0qdA5kvxVj6+bHOl5Y0cTnwr7Swu
GyfmdCbjtln2LMyb8vTITMgr2OBDStXUO7jpPzGuiS75jR2nnkA2R1DvHJzq
qoY6I7ZJlA/8vDRc3LsOE0cPgUvPnngTzkJWrB9mDe0F+06DcK8MxxtexDHU
FLSpvAZ23PvxR76LAQMGDIqC4afVANw0rG1H+QdqGrWGj4QcofnpEVg2YQje
pBRqVbkxL+HS2AK7vgqc3Lh4vX841BVkIW/QFLfDi67dpfNTXnYU+jaoCTnN
hrhLx+P8+XAjtAi+qWzZF2I14sVhCB0fad/9sML/l/f8KScOU63pPBIuM1BU
7RKNjzTnqWgglD/AT4m58PzEKrjMv4SM3yQJAbfnkfxUp5UEfhpWyE9XScFP
wQ7HWAvKNm7VeQoxb4trcay4L3Ad4ImywoWUxU9z/LbAgCjHsPlMxAtt8KXx
U6InEh6jjRZ1hrj/Agkxmoh2PT+qJqlru214Rs72JJ9dwhjGg9c9IWWGKD6e
L4iPNEKMn0Yfpc6eGdTrhnCxfDpsnBppXIyfJny/ATMNOdJvrcOye8XjuRAy
7OH2GZhzIYTmp1/QlK7XsJPh5eKnNzbSPssGLvhRovMgB2cXDyD3gPRtxyNY
OOCJubu8EWRMXPGL7t/s2DBEVJU0GFwWrq3oTvqAmrYfg1QOXW+ib08Nawbt
ZoR8oM/Fs9JikZoloQHKxU/ZuD/KgJrDNn0QW8RgmPz9Lkw15cg5tNC3JN7F
xatjMwl5SMhUi+74KsybwkfIgW6Q1bPHJzpQU156IsIyq0i+GWI9/nx0BOnT
r1HHHr7RhXL80dqRUDaqj9cRlIWez45HbFwpDs78HCzrXxsGjltpfxhJ4OL9
UioWurxy3T+Ww6SykPl2LSlbBfXd/ihG8k2EEhN4aznlm6NiijPvC23HATe3
QolYow68pOSfIE5ayK+qEpeMg0srh1A+0c1GIVCYD5mHj2usIWPcHz9omcGK
j0C4qHzgZmNaNyOoGXXBx4D3WDvbE0f3T4ceweMHXC99zyHrFRWLW17dkNDL
ip+z4eXngc0tjzRkwIABg7LB8NPqAD7SfRZBl94X1m3SH3e/F64pOfF+GNHO
Er3mnEXBMsFnp2Je18boNH43CtRFLisW41vWJvVfNYuxCBULlFnIT+vYjEFS
kTzcMb5nYKwqiw6jtwp75NPFaRSPUK6HSzEFCg4fqR92wUye8gfbcTuw8CWs
ALSVKSF+788jQl/evZ+yhO/69+B4KJOxODUw7NB34beQdXq+m4qRQvwmnAoR
ywdzeYojxQdqeYjlCiXj8bjoS+an7DCMoOP39l36QqR+PPw4ORU6JrbwSfh9
UvDz4QpyvVex7Ik02oDAYWcRc42P3OBb9DepYuErcU9QbvwD1KO/d9HVgjj/
RBvtHUqfD1OEqcNU+MUV6qwxn66irYkBVlzwlT5+r4w2Nr0uEqeTm4EdPeoQ
fW2BIwHZIu/KxoTWmpTv1ylJMWV4uLXRlYw9o1i7J8GvipSZ+BItlGSgbD0W
v+hAuXx2DOY0VaDsYyZt8TpJ9CE+rqwdRPkbGnbDDxF3v8xnE8h8Q4q6dfHg
V6EelRV0By01KI7cfMACId/l5SZiShvKriojq4q+Mw8Q3Iq+xorDganOaD1q
HSEf6ZKzA9CSbv9uaz5QNnNCPqawyraeRz+h89XIWuK2pEO1BNLeboCJihzk
lDXh7RMp/vyjaYTerYgJR/wIeczC8pGDcCdV4mv+cwRdX03FQ5OpgQPvRHV5
Yt7s7QcZeV3MeZIEXl4s1g1zxL+BEipeHn7KS8OGprJke7YcfbpY/FluehAc
auuScs7ZO0riuM/yP4X66lTcuIVnxc/H5n7bSMhaBXRY+QpsXi5OLhyKY/5J
0jTFH0e87wXyzKkg/s+i+1FiezeRN5aQMVZH7H9JLMNp8B7dEPvulBzfKvvr
TtQyaYEXyaVsuPFzcXxgA9o3/R9xeVkFwc/5Dhc6nv0Cb8k5tXKSvqEjmUta
DcOP+4mdkU35fAlqSnJwmrafmGd5uLOyPyb986Fce1F/Cunv/0EtFXnIKijj
wLMwsWtJL2ZBg5APo/Z/AZeQD+vGueKmGJXMgnsrDZgMPIWNO48jMoONrLfz
oSFngmMRpXUqDyH7qb1erZpdEJwlPjlZCR/Ro3UDtOzmjvjcqurdwYABg+oI
hp9WF+Rhh4ej0FdSXlkdlk1boZVtY+irKsN+5DqhzYjPzcbDXROho2OLB1Gi
53X4SHq6mMpLSPwGLDiGdCHhK+Sn8qp6GL/yKPwjk4m+5OKHzwX0tTGAldMU
+IrkLo/3u4ZamhSPUDKzx4y5czFmcG/0Gb8QPazVSP2wVa+xWLhwEb7HZyPl
+2XS/ia433HmTRRSYD78jk8WxsuYe7pQX2SnhsCzG+WDJ6egSrx7Dnbt3Y8t
q+agT+eWVGwg4qdt0gxeyw8iOodPxrVc1LMp1VYqzfEkvNCGwMkMxzhLKs+r
vuUwMT/QzKAbMKftu3bDdyCvkMhgn1trod+Ybo1aaNCoCVq0aoMODo7o0W8o
Zq3YjleBKVKN1oTvV2GmQejGcproNX01NqyaDdeRcxGVkY/gB9vocmTRbe1T
sXxBQXdWCftu+LoHhSMjNQjuzubCsaGkZQBr29awbWIJTQ0DDFx0BqnssjWs
Qn5KtGej3jhy+w3BvTjIS4/ChS0e0FA1wNSdd0R0NT5yYl/CoaY82S7tph0g
ZIkEz/H0cKwc0R5qsrJo2H8RPkdRvticjHCsG9sR2pZdiTkvHp85iRgrrWpq
UePRqDm8lm3A/v27sdC9L1rZNCNj8AjKtOzkhp13v1PtnvsL3eprk8/oWNnD
a+5CeI0fDOd+U7BzBZUbR17bFOMWbMLPGIrDZ/28gS6NDAvbTqMGGjayhL6m
CvSa9sG/wSJcipuMdW01yPt0zdph9ZYt8Bw3EhufJZSpv/Iy/NHbkDrDNfNe
8bN+WdG+6FZHMC5V0HnRLco/VgS5SZ/Q0lgZimpaaFhHD6YOU1Da8b7/Crws
4rusDcnzm0M23S8WD4cTewcttAkuKacHc1M91LQdjqgsCfpwOfipwM+6hYAP
y+pj4zsJB0wJTnVjKjVfDXqeAqsof81NwBQHC9Ju3mzcwUJ7bwHyo+DaWANy
8oqoZ14TOvU7IzDt79tPBXHcpzpSMdQ7eewrzstT3qGzgSA/jhbq1jWBjHYb
vI2VXG92WijGtm2K+Uf/Lb3M3FgMbWxMvFMTng+TqwRPKx0ceE9vS64lgxaf
LHaVnxePrUMbk7LAqttMpLHFBxsvOxTD6grOpKrBomF9KGs3xqVffz/vMCv+
K3rX1yXlQ8e511F0CuUT8sWulgoUVTXRoI4+jO3GIU3k07ixV9FARQkOHivw
OTKD9G24N8UaKg0GSoxBJwQ/G4d7mFBr+bznEF9G+Pi0uwO9bmthsY/0MRgY
MGDAoCww/LQagcfCwx3uqG2oBXV1Naipq0O7ZiPMOfAMheH5WVjYpxn09PTI
X9cpgpyS1KKSFfMJg9uaC68JfrVbDkBQrGD9LeSn5k3cMH9oK2hpqENNTR1a
2jXhuvAYMopyHKKf3xyZBjMtTeo+wwZYcvId2dd3trlDg6ijhqYhphzwwffj
M2FlUliunoEJ7HuMwevYFJz16AKzGiLXDGuj55SjyOAVfvehOX2hQ5SjrqYG
dQ1NmDtMhu/Xe7DS0vs/9q4CrKqsi9IdgliA3d05w9jd3Tn2b+cYY8dYWCAm
KIoBKCohoAgqKaggSEh3d8d76z/33scLeKBi4cxd38c3znvv3nvuOfvsvdc5
++wNvekb8fJjBu07vTI/hSH92qOu0DtqNmqGKZtuIz3MCoM76gq9f1207z0Y
hvbRiHv8Fzo2byj0nRba683BO14hHW5eJDaP6QhVNTXC+ZShqKgAeXl5Ou+U
jIwM4UuSUKrfHl4xn+HLlOXj5oZhTP8qq6DLuC2IL8yH8cap0BFuN2lDu9+X
IjgnHRfm9kejusLfNUCvKUeRWr5kzcmCwdrRgj4i963TpA+M7KvPtykM4fje
M5aGGNimLr+/ddro4Y6f8N5YKR4fnooG9eqKyFOzTnpYaegt9hyU2+0DaFev
DpELdbRo2w51NTQwavVppFexfF8Y+wrz9FrT/U3Jl6pGA8w98hgeFv+Q8dXF
8oM3kFohXUrsq2voWFedJ3vq6DRlDyKzy+B1eTy02w/EP7ecK7WtMDkAa4a1
hpqqCnkOuU5NHUOWHUeeGNVTkvISf7TRovtFVb0xjtz/3JogXERazKHrcvZf
ZlGBx3Fwf88IaJH+azliFcRKEFGYT4/Pp9uoVqctzH1rwX4e8V3vLWhNj3vr
HjMQI453EjicX0bLulqTgbCOrCL+4Av4aarnNVpP1Ru+W3xfgSrP44JealKQ
V/mdzB/hG3Lw4do01Cdt1uk6rEre+c78ANSpvlZvjhPPxO/B/lAQXft073je
POsFzyribEPsD6CJpgpUG3aBSaD4TFzcsgKY7xiJ5Vc8Pmld82I80aq+PNS6
TkflUyW1E4mv70BDXgraYzZVOkP87tYOXh92gkWYeFks+HgdXRuoQkVDB3ut
vqzmz/cBBzYHR9H6ofmQJVXkV+Pg+ek/efqhDW75iMYxBJ4ZSji3MpY9ZtbS
qDpQ43U10XPBwWqfXJYdgt/rqUKqTh94igkVT/W9htaaxA9pPgDeqbXlwAEL
Fiz+DWD56a+Hopw0RIaFIjQ8CtkF3+o8UMXzp2VIjY9EyMdwpGZXVxGDi7yM
JHwMDUdGnsDX45YVIjb8I2KSs76Rb8dFQUYiwkNDERWXTMfCorQAicnZ319C
iDy/vr0P42esR3RqOhJioxDk7wcf79fwcHeFy/NneGx5HYv0muN/t19/5j3L
kBYfhbDIOBRW3L+peUORn55A+ugjwqPjUVBtLfvKqHj+tCQ/i9wrBBHRCXTe
om8BTkk+4qPDERoWgeTMwk/KBresBMlxUQgNDUNiGhNXXJyfg6yiqt+ttCgH
MRFhiEkU7PcU52eguKzajQJkJMci9GMY4lNzq5Wp4tx0RISFITn7y/bUygoT
MKOHNup3HoP4KrhctSAyk54Yh4z82n0GsBI4JUghc0bsudNyfAE/fXBkDiSl
ZXHavrp6jxzc3jUJkjKKMH4VU83vqr4+m8hDSlZV51drKYiBzkiKQ0pm1Trb
Wn8zVutbI7fk0/rB/9FOqEpLYLXRd6pd8h1A1au+PLsNJJQ683MlfCly05MQ
n5JT6ex7rQbRDxlEP6TniS7acUtSsb5bQ9TrP5+/p5oV7AgdNRmsPFP9/nmM
2w3UkZfEuO2m4nUikbeU2AjEEjv8K3UVCxYsaj9YfsqCwafqy/xXwUWs+xU0
UVfGYZfq82SEOR/FJrMvr1FZW/Dp+jIsvg5cxD07BV3NBjjuHMn6c8Io8MMQ
qv5ph8PV5Oqh4i9DMLWtOjotNEX2Jyh+aZofJrfUQB8xsbD/RXBLcuF1Zy92
nrdCdm4ucqm/nBzCZ6Nw4awZKlI5bmEsNvVWR9MxR5D8iy2JoCAEUzpoovMy
S/H1dv5DyI9xQ4u68pizV1B/5r31EahIK+KqZxTcn/tB7PEPbgEuruiGOi0m
4111Z5RZsGDB4juA5acsGLD8VCzK0rCvmxzpF2Wc8qy6mCK3KB4Hpv0B14hf
JQquMlh++gNA9KKP+R7UazIOb6sjYv8xlESYQEdSApLyAxGcWwWZ5BTg7oo+
6Dp6IzIrHnQVCy7yk97i9/bNcOBZ0n98PYALW/0/oSQjC60GjdCokeCvQT1N
LDxesUYtF89PLIRO2/EI/EXjNpPf3UVbNR1YvE349I//xQhyOAM1Mu6GXoKz
9HYnRkNaoh22HToOx8hcMXODi1i7PdBu0ROvoti9URYsWPx4sPyUBYMi2Exl
css07boIab/aevn3AjcPJnOa0zkgNHR74K+jhnhk/xxePm/h4+UOR5sHOHdw
O6ZMmITjDz/gm4Xq/gSU5Ebidx0ZSEjWwQmvuJ/dnH8tuGX5cLq8HQvW/oOk
z8hb9e8GF8mBzrh26iB27dpF/126+QAfUisoIGIj3G/uw9j5O+Cb+CV8iYt4
HyssmTEXtoG/Qn6f7wNOdiDO7tnF7+OKf55hwvW5ShHx7BymzloFl4ifnxuo
5iBj72WGWbNX4WlwLUl2/RMQ6n4Lu3edQ7RQgbYPjucxd9EqPPAUn985PdAa
MybNwW33L6vzzIIFCxbfCiw/ZcEpzkOMny06yTA1G+S1msHSOwIZWeLWVf97
KM6KwuLf2kFFSR5SUpL8XK9SMrJQUlFHm5Fr4ZdQ3Rnd2o/8nFS4XV0GNUnm
3ZrOPo3wpHRk57Mb6d8Lcd6WGDV+LQJTfrEzjj8axFjY6K/FnF1myKvhAhBV
H3rr9Im4/qLqeissKHDx+t5RDFygj8SKBad/UXCyPuCvPxfAIezXjW35kQh/
aYJho1chJO3n56xmwYLFfxcsP2WRH/sWlndu4ebNm4K/2+aweeYlNg/rfxHc
0gKE+7+Gvc0j3L1thnv3rWDv9BKBEYm/Vg4NseAgwNVGdPzJ3z3Lh3D2TWXX
KL4jinPiEZfK+s3VglOI8Ij4r7cEZQWIiKpJrqT/EIgtjvoYjn9b5Hkp8Wd8
P1SfP4AFBS5iI8PwGSWdWbBgweK7guWnLFiwYMGCBQsWLFiwYMGiNoDlpyxY
sGDBggULFixYsGDBojaA5acsWLBgwYIFCxYsWLBgwaI2gOWnLFiwYMGCBQsW
LFiwYMGiNoDlpyxYsGDBggULFixYsGDBojaA5acsWLBgwYIFCxYsWLBgwaI2
gOWnLFiwYMGCBQsWLFiwYMGiNoDlpyxYsGDBggULFixYsGDBojaA5acsWLBg
wYIFCxYsWLBgwaI2gOWnLFiwYMGCBQsWLFiwYMGiNoDlpyxYsGDBggULFixY
sGDBojaA5acsWLBgwYIFCxYsWLBgwaI2gOWnLFiwYMGCBQsWLFiwYMGiNoDl
pyxYsGDBggULFixYsGDBojaA5aefibJ8+D5/AP2jB3Do2GncefQMyTnFP605
3LISpMRFIik9V/hT5CVGIY/q7P8Yyopy4OniTWT5Z7eERa0A0V1Bfn5Et/zs
hlSNsrxE2FneR1Ra/pdfW5AGz1f+tfr9vhbc4gy8c32KW2bmcA+Mxb/4VT8N
Yk+D3e3h5BP6y/VDYshr3Lf3Rv6/RDeX5sTAPyD6ZzejBihDjJcdnr+L+uVk
6HsiPugNAtNLf3Yzagm4iAn0xiPz27Bx8kHWf9CX/H4oQ9JbBzh6Btf6+Vec
Ho6dh62Q85PpF8tPP4HSfLx9cgUjOtaHhISEyJ98o244afUWpT9Q2ArSQmC4
cwGaa6lAVaM+tBs1gG7r7lix6xTMzU0xvpEiTN9l/bgG/USkx3zA/ZtGWD17
FBpryEFCbQJCC392q1j8LJRlh8Hm7lVs/nMyWmopQq75cKSV1VZLwIXR+sG0
Hqk/ZCeyPkPNcXJjYXf3MtbOG4vGmkqo23ED0v6NbhUnH653jmHCuClY+ud8
dKknTfpJGn3nHUFGwb+E5Hwhkv3vorGyFCRVWsEq9tdRcty8dxjcUAYSUnLY
cdvrZzenxijLDILltVNYOEEPdRRkMGrl1Z/tmXwx4p0vQJ7yXSTr49Tr/4aP
IA5lhdl4ZX8fR/9agX7tGkJaQgm7PXM/feG/HHG+T7Bo3AjM+3MZxg1oC1lJ
Ypvaj4ZnasnPbtq/Amm+D6AhJ0XmnyZ2vkivvRyV8L6HBydBvukqxP9k/4Ll
p9XD6cJqKMhKQUu3BbQ1FStxVLlGvfAu+cv3P2oCTl4YlndUghTRG5P/voP0
rGzk5uQgKdwL83vrQFJSkm7TafuYH9Ken42i/FykJkdgzcB2zHiw/PQ/DW5x
NtKSY3F1dTdIUXOzVvNT4OTyXrTcKvTciIzPUXOleYgLccN4XTX6un8rPw21
2AFFjRawC0wFZaGyQ8zQSpmMZ4NOCIrP+9nN+ylIeGuCBrJEx8no4lZUwc9u
zucj1wO9VChOJIuNxi9+dmtqDG5xJiJ8LNBDgbH7vyI/jbI9zvNbFPD3i4yf
3ZyfBir2LDM9HU4XN/L6g+WnyPPHhMYK+M3wA+2nF2eEYnRbak9GEX86pf/s
1v0rkORpBiVZykeXx4onqbWWn6a6noaGDGlnvZkIL/q5bWH5adU9k+5xBsOH
zcGzgARmj5T0k//TK+ilKy/gqJJq2On8Y/ig0+nl9DO1p56qtO/OLUrGuVVD
ae769813P6Q9tQMcuO+fwPJTFnxEuZ1GHanaz09zEoJx+/oNeIeniv0+PcIX
TyMyK3xaDJuZTf69/JTYjpVDW0JBtzPeJ5VPZi7eOVvBwsEHRb8aKfhC5Ia/
hLFrZd+FW5oPV9t7uO/o9UPjdT4XJVkxuPo0VIy15iLYww437toiNe/XEdaw
F0/gllpxrz4P+v1kfll+yi3NgYf1bXoeFdZCGfrRKAy3hgLLT+mzAy77x0JS
Qg27vcv31bnI/OiG23dtkMnG+ApAOJH7VUNE5NVg9pcV4M2Te7hn44b8Wqo8
OMXJWNif8S8klIYj8CcvhbL8tAqUZuLIpNGwCqqsty5tGi20h6qI5dbhP6RJ
f81oT54nhYFHbcV+X5r+Hn/UlcfqM/Y/pD21A1y8+Wcqy09Z8BHtaYS60rWf
n1YHypc0XPYbdjpXPOdWAocFzf+1/JRbEoEBWhJQbNIV/ik/efH2R4PYzdNL
BmHMlYhfi/sQW//y6mp02fYE/4boa25JOhYP7I0rERXjGvNx7g/5X5afshBF
UbQ91Fh+SuQ9E8v6tiL9UAdH/LJ/dnNqNTKC7KCr0hnuaf8GTVcBnCJ4nBgC
BWkZ3t5bT7z9yeFKLD+tGpzSUrF78FaHF/H5qaRKS9iEV9zj+D7431gd+plK
3dYgTuyRAA5i7kzD7L9Nf0h7agdYfspCFL88P+WU4P6+mVCWUsGO/xo/zXiM
pjL/QX7KKcQr/ZnQkJf8xfgpF4EPDxOfTQqttvz6/JRTmIxTMzpBXrIhy0//
5WD5KQNObhyGdKrL8tNPoCzzPZb0aQRJibb/Sn4a8+oaGmn9hsmDevP4TTu8
Sv+5Wo7lp18I8m5HFvDGT14T0zZfQcEPCrg6tmQAnxcPXHYKcXli5kjhRzx6
5iP2+oLMGLjY3cdVo3PQN7iCh/avEJ/Dc3DJGHx0ewp7e3vBn8NT+KWWO8Bc
ZIe/gYMD852Dowuic4XGhgxomJ8bLG+ZQP+UPq6ZWcLtfTSKKw0fF2kxQbC3
sUVKLhn39GjY3LsJo8u38D5ecI6XW5ILX7dnsLhzE2fJ/a7cuIdX7yLE3u/b
8lMucpLC8dzuAa4Znobh5et4aOeM2AzxgQ5lRdnwdXfCPdOr0D95CtdM7+KZ
uy9yq4iJySUy7er4CNZ+8fT/l2REwP7+LZw9fQa3rJ4iNpOXE5rMn4Rgbzy4
Z4pzZ87C9L4jErMr++tFOSl4+8oeN6wD6DnJKUqHq50lDM+ehrHZQwTHC8Xr
xAXC7v5dGJ47g6u3rBCanFNFF3CQHhUA+0fmuHT+FM5duALLx474EJMpdjYW
5abBz+M5TM1dQXV/SXYsnG3MYXD6FIzv2pDnfP35bE5JHoK8XfDA/DaMzp+B
0bVbeP46WGz+2s/hp6nRH2B73wzn9E/iwlUzOL7yQVJW9cEsmQkf8fSxBa4Y
nsHp85dw7+ETvA9PFPtbblkBgn1ewsbuFWkjF9H+rrh5+Txu2XjwY3u4pQWI
DPCCpaUzsnmfleYl48HJZdCSZ86JzThuSs+3p8/dkE2/bEV+ykVqhC+s7poS
GSJjfucx6W8xvlZZIaI+eOP+dWOEZRF9TjhwiI8Lblw2wDki485vw/ljW0zG
09PJGsYXz+P0BWM4+0ZDHA0uyk7Ec1srXL96BTfuWMDxpRfe+H2g3/dLkR/n
C0fynk/ubIU6dXa4XgtcvGfN10MJmaK50svyk+HhZAPTq0Y4efo8bt6zgtvb
j+J1MdHZ8SFvcZ/MByrVR35SIKxuXcZFUysk59cw9wfRd6nhfrB9cAcXzpyE
0VVTPHX3q+L5RfD3eIY7psa4dsMM1g7OeP/eC1FJzLyg8hRb6a+CnDSTP6Dn
+ut4Qo35S2+i78rvx0VWYjhcbB/BM1m0zZxSMraB3rC88wjxVDcR3RH21hk3
Lp2D4SUTOPl85OtN6lmvnW1wnYz7WaNr9LhXNVrJEe9ha2VBfnsOZwwu476d
C5KEdBAVc/zW+iza1leg291w6iHY0bbhGRKzBL8ryEqEl7MdnP2jKvVhYjjR
M1aWeJOUR6/fh799gdvXDHHG8BocvT5WGc9N6QNfYq9Mr1zACX0D3Hlgh3cf
Y1H8FetRVM7KUytHQlpSgvbV11+3peXvpU8gmGGoyE+5iHzvhrtE95/SP4vb
j5yQVFBFg4kMRvt74P7dGzhH5ulVYidc/SK+Sax2aX46fF7Y49Y1I+iTuWBG
+iI4Vtz5Ui7ykiPxgtgH52DxPIQ6Z/vmhR1MLhlA/9wFouMc4U90nEAOK6Mo
M47YtMcwuUjJyUVY2D4XYy+5yCf+3WsXO1y550v7hHnJH2FneQvniX27ZfUM
CeWyxcnDWxdHEV/EweE5YvjJ+TmI83WBQ/l3T12RWW4IiAyFvnPFffO7MDp3
FheumMLR3R+5YjpaHD/lFBL76SR4tqNrEIq4TPsTgt/y/R/qz9knofJ6DNF9
CaHvYG1xE+eJbTEyvo1nHv7IKxEjF0QmInxfwuL2dVy9dgNW1g548+416e+s
rz6bmBodSOz3PVw6p0/m0hWYP3ZAYEyFcyScXHg9d4DdA1O0b6xE98Miowc8
neuIdzE1PaPMRVFGLJEJa9y9ZYyzZ87hprk1AmIzv/K9OMhJjiDyaw4bz0T6
XpnxIbC+a4IzRFbNbVyQUVjuz5Yhksw3y5vGOHXqLO7ZvKoiTpn4tYlhcLKx
gpnJRZw5a4g7Vg6ISBWti5EV4YHFA5ry/G9tnLawI/3kAJ8IQZ9mJoTiGbGH
USn5tG10eHAbFy9eh090Hu+9ucTfjYGb40PY+An6ojQtAE6ODqLy7vgCafn5
CHAV9skdEJn8fTY0uUUJWDt+APa7JOPc4qG892yCJz85QRLLT78ARPe5Gy6E
Gu1HSGPI+qvIrUZvf2tEWh8UOvcqDWXtgXgW8nl7t0leN9G5nhZGL1iHQwd3
YnhreUhJy6Jh2xHwT6FsCRfF2VGYPaAZpKWl6b8Zh6yRL2TvKd1tvG0a+U4G
qw2fga9ySzNgvLQndDvpYevew9ixYgK0ZCQhq6CCFYZP+dfH+Tlg1YSeqKOk
ABmNjvCKDMfyP3ToM7MSEpLoN9uQPhdTmPAak1qpouGA+XCLSEM20XW7JveA
rGIdbDermAPy2/LTBK/LaNdQFUOWHoTrW388NlgPRSkZKNXpDNM3onkCuHlh
WD2kJeS1+uOytQciAt2xa0Z3SMvKQ7XFGHhEC3RJcvALrJjYB3WVlSBL+m/w
aWdEut9EC1UlSEsxfqkEeU7PKbtpibc6MhfKCnKQlBSMd/fF+ij3TAsSA7Bn
6TjoaipDTlYaKsONkBD2AqObqZD78+4nIYWG/eYgg8joO/N90Cb9LlV+P9Lf
dXqtRGwl95yL17e3or6aAsatP4uAiGg8vXEQnTSkoaCkgjVGTvxfcvITcXbT
DDSrqwJ5WRlItl6D8LCX6N9IAzLl70Ta3aTfTKQWfsV6IycT60d1gpZOH9i9
j0FWajQuL+0KWTkFjNj5hOc/CFA9P+Ui3e0EWmuoYtxOUwR98MDaMZ3JmMlB
WaUOmrfrhG7du2PSBn2ha8oQYrkLzVTVobfyJLyDPuLlg7NoX1cV8opamHzk
GQrKH8MpgKPxfvTUVoWCnAw6/L4WYY77oSMvy8RbSNeHwfsMuJqfxB+ddKEo
Lwcp7eko36oJc7mLWVMnoqE6k7O2/dDxmDVrFhYs347IbKoPhfhph/VwtzwA
HUV5SPL1ghQU281FcPmSAPH1HA23o0ezhlCi5ElCFfeD4nFt/VCoysnw9YmM
nC7+8cxCSbInZvZqCDkZKcF38ho45iTKw7l5gZjTrT4GEC4Vk5aFpDAPTOqo
A/nGQ5FY+qU6m4vE52cxj7znzIm9IUv1E5nroybNoN999pyFcP0oyDea6m+N
bhoqaDd0IWxfByLA0xoz+7eErLwies8+jPRyUSN2KMzFFFP6tibvTum7PnAj
OqiDMm8eSCpi8YOQL2wrA+/b26Gl3hwLNvyNw7vWopmWMj3vW0zWR4rQnOKW
ZODstHZoNWgB/BMzkU38kzMrh9Fjsf9OEP3uaR4mWDBtNNRkpOn+rtd7Av3e
C9cfQTbpy5Tgl9g0Qw91VRQhI62OXd4Mt6D4ofXFXejTpgF9PynFbniRmgmj
/w2CovDYqurisns0cmM8Ma65iujYKrfA5Y8V1r2I3Xc7ORVaig2xwfgV0rKy
4XnvAGSJftIZvB5JPJclL8INS2ZPRyvtOkyer7aDMJMar3lL4B6ahfy0UJxc
PxW66kRHychi+slH/EeEvDTDqG7aUCayKy2lTmQvFnf+nkrmgwxflqXlFLHz
1tvK0lIQg90jdaHadgzMX76F272DaE3mi7yCEjQaNUPnbt3QvXtPmL6M//wB
Jf6Kh/FBTBs1gLSHer4sek+YSY/D+qPGYERaiJ+uuACvszNRlzev6blN+kel
9y4kiSk7d33bONTX6YENfxP7uGoa5MjvKXkds+MhCr/GxSmMwGK9FmgzdD72
Hz6IxaN7knEiulqrM24EldsfLnIiXLF1lh5UlSkZksIi04hKXKEkIxSLemij
SZ9JcPAOgp3RemiRe8krKqO+dlN07dYd3XsMxu0QgZHNi3fDb60b4LepK/HP
Pwcwtnszuh+UdIfiKS/PdGm6P3bMHYYG6kpEDoiMdz+HoFfGaEXaIiVZbvuk
0W3eEZ59I/zTxxzaCrK0HyKrrg3DJx9E1qbzU0Kwpn9zSGt2wN2ANNq3LMtP
wtZR7VG3zQDYBiYjOzMRt3eOg7KcPMZuMqnUdWL3T4ljmpseggmkH2g/qMUa
JPDkvbQoD0Evic2m5jr5Tn2QCfJFOrEUby8tRqPGXbB8214c+Gs5WtWVIXpB
EX+suQIR14TI2/3dk9Go7W94HpJAfJxEPD4+B1pkHo/d8armXi/ReQE3VkOX
2LLRmwzgFxoKx5uHoUv0n4JSAywxcBWs6ZbGYu/yuZg5dRzqqkrT/kLbEVNp
mZ81ex70nwbXqAmJ7+6irbY6fpt3FCnZ2UgMcsDY5rLk+c1x/U1Nci0Rm/3u
PhaM6M6TX0mM2OOOiKf6xKcV+DSU3HVcfhv5pdkw3z4CdcjcLNclksTXbT3n
BnI5oveNcjyIFpqKpM/NkJKRhdCX19Ga+FOKjUfiVQpv4Dk5MN+5GBP5/FQR
w6YQ3TB7Lo489kXqR1dsnvkbNKm2kT5+4PUBO8Y05a1zSaL5oENIiPLBviUj
UUeV8v+kMOJcCH+MuYR/fXhyCg15fre8bn94EC5fxuEgO8YbvVrUgVrTrjB4
6IWcyhs0Xw8iM867BmLIn/qEn3FgunoU7z3rweInJ0hi+elngFMC++tHMHVI
N/4ad/lfyz/m403Sj8nfi7Jc2J5cAk1FgX+hWK8FFm03QFRm1cSsONYO/Vp2
xCG7j4L1WsIpVw5pTeukpiP3onxJPsntAurz5vuKi5V9A0+TnZDWnYNw/kQv
gcm20VDvswFhGQJZfn//AJ1DVUKuEfbZxhKZKITHk/u4tmcslKjPie8ze8x4
HLl8m66X07RePcze/4TISQmOzulK7JU89psL9oFzQ6ygRfks9UfiXa6wUfh2
/NTP6jiaqavhL1N38JfaOFk4NZTJl9p4wALk8Eh5UcZHzOunjbrthsMvXdgh
LYTl4bm0bqrXfiyc45k+yctMQlDgW0zuVZ/WWY269ia+7SG89ItETk4W3tka
QEddDhIKDbFk0Sis2nsR7yOTUZifDZ9Hp+g9JQkZHRj6M7JWkpuOgA8BWDem
K902We0emLJoM6xd/ZGRm4MIbyv0rK9C61K9RQsxZw3h2/5RyC/MR5iXJfqp
MT7YwsuBghlGJuXTs6ugIauGJUYvRXhfatAT9KuvBAlZTUw74kDXMuRSe5pB
gdBfxdNndTpi5KiJuPrYFZHRUfCwNkKb+opkLFWw0jqyZmunhF/dXdwR0uT+
/f/2FqxXlyZifDtFyGq0xPNQ0VoJ1fHTpLeWaConiY7z/uHb6ZLMUKzoxOwB
aer2w/Fzhrht51beKfB7sAdaSjKYuOO2iDYqiPPAVMLRKE44Ze9d+n6FsdQe
yVWM1WHmUEPtbpjw5y7cvn0NCwa3Rb1mv8PCNxjWj6ywfgovDqORgJ9SKCtM
w8gu6uS76uN75dU7YNjM1bjv8hbJqUlwszxBx8ZS38085sq0lejW6KAAOF1Y
xNSWIGPea/QMnLj5BJFJWchKDMaJ6a3pa9Sa/oERE+bjmp0n0nIKkZkQgtNL
e0CGfNdx3CYUla/FEQ5+dXF/KLcfiRQhe1kY54RBnfQQ/hVJjEpjLtPzXEGn
M3wTK+9n5wRZoH8zVWgM2ILILEGnlWRF4ejkVrTOaTtqLeJySlCaFY37Fvex
fkwXHndvhhnLVuKG1WPsXjwC9bSa4qRb3Jc1kMyR1yab0Yb4wC+jBfEHOeFP
oFePsQ0zDlrwP/9gewpKMpI49TSW/1lZbgzW99LAThNfwW1zg9FPhZFB0fje
Mng5WeOm4W40VKb0vhqfn1J2KTIsBDYGWxhfSFoTg0ZPxskbtohIykReajQO
zO5L37NOt/GYMXU2bjq8RnJWPhn3EByb0ZmxIZ13QHhLNsTuDM2f1Af+Bb5l
I/Pw3qx69JrJ5JM+gnlI7Py2CT3o+4jG93IQ5mkDq3sX0JuqL0PszLQTAn6a
kRQDP49H6NKQ6DwJOfQe2BcLtujjTUg0IoK8sWduX3rO1+33J3JEpjAHFzcM
g5RCHZi4CuaGn8U+nnwT33XtMRgaGuFdZBXxIdUgJ8gaSvJUP1cf36tN/MWh
C/fg2ZtgJCdFw87wf6gvzcy9M0/CBJeU5cFmx1B0HLYKodmCWKS0t5fRQkWS
vEddHHCo2RpJUTqxQX0bYcrOO/z4Biru6N66frRfLqfZAy8jc+nPnG2tYXpy
HS8fkERlfsrNhcGi7qTP1WDsncZvp5fZX7T8SkhqYPHh8zC8YAw/3qGCrBAi
8y3qYpeZF3/cOQUJ+Gc8cw6pyYAlSCsifmFBKt77+WDtIEbPSNTvj5FT/oSl
yzvExoTD+uI2KFDPkKmPoz7l+1alCLkxByqUzVdrDLsPaRAB0UFGUzpj0DJD
3nsQ23VkJOTJPBi3TnC+idLtA1tqQkq1A5wqJEmvOr6Xi4dbeTkXm63m81Pm
MVnY/zuTP0ZZz1iEnz6/tAGq9X7HywiBPUp+ewe69HqHHGYdduD7FbmxjmhX
RwZzLwUI8ZQCnF3QD8M22NcwTp6DF9fWQ1FGCotP2ArpEC7yo1wwrK0GpGSV
sPC0oB0USjMj0LeNKmmjKrZ7ft1ZtbI0T4zQptZs6uKm0LrXR8fj0CC2qePk
bTXy6PMTw4m+eICeSoz81ms/BEt2noV7QBQKCrLhdusv2m5ISGhiyKTpWH38
DoJiUpGflwFv4os2VSBypFgfj/0F/DjzvQWaUDnRNUbAn29qOPC7NoXWf3oL
L4isicQ/WMnzu4XiewlHemN/H7f+mQ5V6jtZVYwfPgl/G5jhyoEVaN2wHob9
zwzOz57gtuHfUJdlfHdhflr+XH/LXdBSlISkUjMYBzG6K+61MXSb9SM+Q0oN
eu3zkOh7H206j8eLGGaf6tGW8SjPa23ykxMksfz0M0Dexc3iFIZ3b4Y6ioJ1
6fI/hd47kCAu0PA7teXt3T1oXb+OYM+E8jFajoDF62hU3M7llqThUC8FNBqz
AxVXQl6fXcpfDzrtxdOp3HxcmalL37vT+M2V5tDp5X0x8XYc37blfTCCDvGL
Dr0XJYbcvGAMlmPa1nbgZpSb5qIkO7SkcvRLqWLd/Q9iOEs2/uxMeJCkHHbf
8RTcL+cdutFtVcNJX+E58434aWkCpnRQRoOOy5BUYUMuwnEn6inKo2HfGUin
FVYZXpwcTvvtE7dbV5LQsqwPGKzOrKu3GKePHCH7tmd2H/rzRrMvC/bcqLco
Ssaszo3p7+T+uCian7k4HgvrMX054tAbEbvzcOtE5t215yNCOCkjtwA3JrXi
8ZjhCBVZOCyGzVwt+rvuE4+jPCStKNMffXXkoNpaDxFZFX0zDkKvTKb3tmSU
NImeF/gLfle3Mm1Q7geXFKGXLcvHXyMZ/lx3xn2I2Vb4NEoSsKCJKu3f9t70
SijOlINlwxoQn7wOzj7/KHJJdfzUbO9Yuj3z/rEU+TzfexvUiW+j3KQrPqQI
WkrZ20EUl5duC8fEyrEub+/sYeahpA6M3pf7OMV4sqAe/RzVZn0RkCJeKF9f
2fpV/FS1wUgEZwq3qQDXxzFrKb3G7RbZlymJMoM2T1foC3El+rvwC6hP71nW
w20vUb6W6GuKhsSGK7QcRuYFY5M5BUmY0k0H8oTPhuaK9smt45sQ8BU1Sqvj
p9yiFKzrrUt0Rz2cDKq8rluS9RY96VqpSlh2248fU/Xh4hKenpPDiQrv/qUo
yYnCwLZqGLzyDkTDxbi4vrELwwtaT0cyr+8fHhtPc+a95oEi98l+sRaHTQSx
IFXzUwbF6SHo1VxZlJ/ykOlrzouZ0MTxd6Kx3SlOB3h2Qgb/uIjG9+V576X9
f0nJhniZIBBA+/P/o9uh0nczBHfjIvxCT/rzTqMOg5++skp+yu8xbB3bsBI/
pcApysLYXpr0msnIMx4i18Z73IamPHknpS54JfxKhf7Q0yR9XIe0OUZoXpXE
YVUzxvcbvfVJjb2Gz+Wn3SfsqjD+OVjfW4n+bonQe6b6mNE8e49ZhTM3xAFa
MEibsd0DjiL7i90HLl5dWQx56VZwTBBtJzflMVpTXFlSBuuuufA/L0v3Qocq
+GlxRLl+6AofocaUZQZiQAMVmvePuR4jdA0X+ssGQl1nCEIrFBNIeH0GmhQn
k2mIy0HlXK0Mjmv0mHmoPg6B2YLR5hZGYqwGI/t9twvJAScTM7qq0/Ix7byz
SHtLsyLIPGyC0x7lMagFMBiuTsv62P9dFvywJBXzOlP7XgpY/Fx0vaI6fvp8
z1Tx/JSTh3Mjmlfip9w8f4xoJI2+xwJE5wA3D5cGytG/1+o8Eom8M1mx9ivp
dfoJB19C2ETl+53DnA0PxJ6n+BRKk5+jL1XLSaYzPMScj3xxdgXPVjWDWbBg
T+Vb8tN8/0tQo8ae2OUrAQL9neJvg8ZKVIzFRHz5qhEPZWnY1ZqR3+7TDCAS
Sl+WiFUtmfXBEasNK1yYi6U9iO6UUsABizf8T0MtD9JzU0pND2+EwmaT35yg
9wMaD5iFLCG/Xiw/5T/CFV0o7iwpj4VGzmLX4jk5QeirLF8FP6V89SzsHcfY
EImmfyI41h8L29XBFovvV4+DUxiPXSNa4ahTeY5XLl6Uyz6Z8+d/coIklp9+
PsqK8/DxzVPM12tdgaPKEZ/vC2KJvhrUWcIPMN45hV6T4vNkNV38z+StyJm8
rA+PoCYjCY3mnTBu3DiRv6E9W/KvnX/MjX9NrNc1NKDWm9Q744WQreJmuWFQ
12GIKHffKQ40uzPRRSr4bbTovceNHY5m8sy91dv8RvgOo3GLUp6hjSJlo9rD
PVrcGRgugt0e4YSBGWKFzjBxMn3QWYKJWd32Mkfk91/PT7lIvD8HCoSf/HHs
fSUfi1OSj4C3rxEUlULrHW7OewxXY3ThX/bJYu5XBr8j3Wk9I1+vHbxiBHN8
/5z+zL77ektRyS7LwpYBjFzVmfFElMuVZeBIB55eXmQFgTfChe1fk5l3b70V
qSI3LIXLmm6MXDSahwTRG8J7H1Mztu1vK3lrB1x8NB1Hrxu2/W05+ayyhuUW
fsDQ+pK0rzvj9BP+5wEmfzFtqDcJIcK0gczri3OZ95Xsewk1izLgINnfHhcu
3kRIuvBLlGHJYGrvUhkH7d6LXFE1Py3FkRm6dHsm7jUTfUxxEPpoEO5dtw3c
hPZd3hgsZexF220V+pd3xxTi8/HiDXrPu8qr21ACpxWM79luwGr+2kxFvDPZ
8VX8tHJ+JA7cD3ZknjtkJfKExrA01hyNeXP9sleFc0VZDmgtR+y0ijZs/UX3
KdI/PkFzyu7W7YNgXn0QKt/j6t9a035jsz5z4RomWJPOSk1C3lecAayOn6YF
PkFTNcI/tf5AhLg+JbZq81hmr1Sm9WpeDjkuQkyW8/ZPe+BN7tetIya67qNr
F2l3HISxFfRp7/YNGFmRbgaLREZYnl9ZRde512zSD4aOQvErJWlIFDr//Sl+
WpIRhj6tVMTy0yx/Sx4/1caNaFHtle9/kYlXIbJ00V90BpZEmKCRBBODL5yn
Pj81DFdPHYPD2yghP4uDIP1uPJleBz69+CQ/LcOOyTpi+SlVr3hCXy2aOyx9
FCryXeYHO9RXIWMt2QRWQiGBpeFGaECNr1oDPAsV5hRleL6d0Z96c86ipiUx
PpefVs6PVIZjc5l9tXG7Bft3lkem05916T+8gv0di+YNVRm5lO0Jj8wvbHBp
Av7XnvAe2YYYMqaC7R3zBzR5fkGH1ZcE+3PZb9G1Cn4a/2gdzxdojRcpQqPI
ycX5gfXp7zqudxXwppJQDNeRgbxaC4wcK/r8EYN7Q1GKsdUDDAP4+5suGwcy
z9D9H0QodWkqtrZlasu3mWsL4a8e7mH6T7bxDAQLLejGeBihxaC/IVgO5dJx
lmfPX8X7OKF5VZSMOZ0a0772EAvR2NJvx085CL82FTIS0mj22+hK49yvCSMz
Uhqd4BnPPCf1nT7qkj5S0miN3Tc9BLFKpdmIjKxJbcwyvNo3jtE/nY4gU4yt
Kol/itY8WzV2kzlfLr4lP+WS9r+yuIxrVm4i6/JJflbQJX6fpM5I1LiaKvGD
DrZn2t930b0KczwPh39jZGj69lsVLizBhpH1ab9l5WXB+aTSvCQ8vHoa9577
i9wr0fMQzU+1eo1ButAib7X8NP81eqqS7xTqw+J1gtjmc/NCoaesUCU/pVCU
8ArDdZlzHi2aNUbLcYeR9lUHAKoDF48PzkW3qccJD+drCficmMvnBcdf/dza
tyw//XKUZIVh54iW9P5Z+TiuOv3yp7TlwzNjjOzVTKgt0th915v/vZ/FYchQ
vGvWRpibm1f55/5eNP5sUqcGtH3ptNOdx3dL4XNqHAYuOcX/HbcgDhPaNIRE
nc64fK/qe9+3foZs3t5LUYoTj592ILztEytpVGxigAeunzmIZXPGQIO3prPF
Rdg/+wb8lNjgi0O1aP210OHT+jnnjRHN46i+PlRF3r/i4JOoS9kCuXq47iHg
GFXz02z89XsV/JSThROdmPHtMtNUKO62en76akPPKvgpB+8OMzymZb9FTN4A
bh4uD2TsaJchWyC+vFcx1o9oQP+m4VR9fhur46dX5vFyevU2qiE/Fb5fGRJC
3+LulZNYuWAWWjRQoH2L/bafy085OPNne7o9zWcerrBGnYqh2lJQbtwdAcnl
L8HFiQWD6N9L9z4BsSuJxGYe6sjs2zTuPh0phUwOo3J+Sp0/zaliO/Hb81Mu
vI8z/Kzt4OVfwE+foa28eH6aEeaIlsrUfO2Od/w9dQ4iH/4NXVXmvWU0W2Hd
STNEpH39OYfq+Km/7T6okDklpTu6Ch+HA+ut5bFJjWFLE1QuPpbzU6ne8Puq
JhIfm8eBxu8xqVqfWjxCYBYzgbIjXqF/E8ZvkpRRwKjlB+AWFI+KKaS+Fz8t
+HCF3iMVx0/LYm5Ch+anUrjnJxojz78+IxbOj02xa/1yjOmpychWv9Xfn58G
PmH4KRnH+0IiyUm0QHPCvSTl1HHtRaTINX4X+tP++Zit1jXOI1xzfsrBqUXN
6O9G77rO+6wE+yY2oj/bcvZW1fJiaYu4LyyIWBr7EE1p/jQXN6qxvdauQZ/F
T9Nd9vBsmhyMPIVnVzEeT9Olbd3YK0I51IL16Xmq0XszzKr0Kyxg9zb5M/hp
Gna0Y+ZI69nWIvy0IPQBmssxtnaLOU9GuPkwXtQRW+/7ie8cYifSIt/D4toZ
rFkyHc3Ulel7D7wnqtu+GT8lnxmOpPZoNbD+yr0qx8LigS3i8xirWVaYhCV6
Tfj+Y8+Ja2DvHSYm/+NnoiwP24Yx8frSvxtDbFRmaTK2tmF0dodRa/i5x74l
PxVpUmE2/FztcfrAVkwb9TuUqD39RiOQ9ulLq7hh9fz06EDlKvhpKTaPaUjL
0PzzTyAOxXlp8HpmhSM71mLS8G70XKjbc3SN+OkDnySxz+Dmf5qfUvAw3Ub7
7BISWjjq+fW5sqpCQexTdNdpjNWnb8DMzIz/d2zxIL5cHnjyI/fdKoPlpzVD
UWYg+unK8cdx+UmnT1/0nVCSm4Atw1rw26LQaTHK00I7XdpAx5fpbTT6gjty
4Kc/hvGppDvgDZmLnPw4TOygi6POgjj40oxg9GymBgnlzvD4zDCAz+WnZQXx
xO/pgta/L8WbmAwUZ75B9+/FT0sSMFdXlb73zMef1p4J9of5fb3zaar4H2U9
RRt5Js7lnLPA96q1/LQsBdtaMc9o9/vKKvf8Di1k+I/qwP18vvYj+Cklf6eX
DULj3jNg5xuPopISLBve4Av5KeBz528655SkQmfYJQt1WJ4rOhAe1m7SeaHY
RQ62T+7OtL/dTohPtV4E6xlMfpj6nUcS/4P60b+dnzJ94/f4OJ2rQoLHcRQ0
uuG6+9fZs+r4qZfpEuaMYb1BiBLbp1y8N1jEm5vqMPtYiG/LTwtxYzjjR88z
CvpMv4GLolQfDGujztcZskoNseKqj4h/Vfv4KReuN3ejRYNm2H/HEzmFRQg3
6vnT+SkVs7PsD+YMf5+tZkL9VIwHCyguqAPTkJqfmfq2/DQHa7owPsLVV+J9
1poi781JZi40mIPIzzw4UR0/RVEYZjdlvpuy/abg87J07OhBxqju73iTJ7gi
y2Eefdajfq/dyPysxYCa8VNKv5otZM6zdp24jfE942zQUbcj3iWKMfacbFze
MA5KOkNh5R2BovwkXnzvd+SnpalY3lGbnmNbvD4/HrIkKxjL+9fn6wVpORVM
3HEHhTUgJFTe5UX9efFwXY4jS+w9CmHMO//RbPBCFPJs47fnp1xkBdlgbLdm
GLr+IiLT8pDox8T31j5+ykH48yvo21wHS49bITm3CAlkbtX5ifyUkxOMQcrM
OULdbkuQWBOB+AS4RfHY0FYegyctwurVq0X+5g1tL/BvzcM/fbPvCJaf1gzU
Wfa1wzvyx/Hgw8jv+DQOwkzX4s7Lir6q0C9yP2JhD54PJN0SVklMv724tpXm
p+p665H3BWLOyfLB8IbStB+w/94bJLy9h5b9NyJWKHi4LCsU/ZtTvrky1r78
vFMFn8NPvcyPor2WPEasvYBUHhnj5vp+R36ajBUtGb3dabXDJ89JZnmdo88t
UL+fe9JbvJ+a+wodKX2s0BB3fQQ+e63lp9wcnO/H6MR6XUchMV+80/HPn73o
3zRdYMDff/y+/JSD+JeXMKClFlqO24Uofsw3p0b8lLLjj44vR2MNeTTsOQ2m
Ni/g5nQfy4c0QbfR6+CbJuwdcXFkDu/MlOJA+IqNDS3B08WMj9G89wKkFf8X
9k/LwUFGqCv2LB3N40CkzzWaYK9dTI21dnX81O/RTihR68qyzfEwVdxYcBF0
ZRmPL7fB8+QyfFt+WoS7kxkdO2DuBbG1japCQWo4rh9Zg1aaSnybMf6v64K8
NrWIn+bFvcWKkR1Rp+VgPPRP4bWFi4jawE8JUgKfYd6gNpCVqY8Fuy7A3dsb
t/U3o6mqNnbddKtxbC+Fb8tPc7GxDzPem6982/iqAn9DJh+LRANYhn+e0auW
nxIkvLfF1N7akK7THKuOmcLN0w0mx1ZDXas9/rF4LfL7HJeVdK4llfo9EZD+
Oacla8pPCS/wuQ5tRUnIaHWHZ2YpHP9ZiK5zjVFxyzn+zV0MbqOJ9iPWI7b8
y5JUzO/yvflpOjZ2Zzh0u02uldpfHUryUvD40l70baHF1ws9Z+5GRtEXRgCU
5WLDYJ4/qjwKIfniJgHh+jPq0r/pNm4Lf6/2m/LT0kzc2TMLmopq2HDZhS8z
Kf62tY6fluVE4vjiIVBVb4NTTwL554CT3/5MfsqBzckFaDxiMVpqSENSVgUr
rrl/cxb01GAVmk06g5SKxQ8IYq0282Vxo0mgmKt/HFh+WnXPFOVkIDklDQVi
a1cV48g0hmtIq+nBO4Mnr5wiBLo9xLZ1G3D1oStyvsZYCiH1wST0W/xPtbb3
3v4x/FwtN6IZpRr06CQTKyDTArfCxK8rU2cGbl48i4oqzWQ7Uwep+fR9sNip
h9X3fEWvK0zErI6MH64yyACZVRRzi31jA0PXCPrfn+KnnHQX5hygkgYchM4X
fVd+yi2A2TiGY6g3GoTADPEWJiHoDfwyyHzIfI2+vNxPA2YdFVvDjpt8F7qE
IylpdxJZ5621/JR8FmCgR69lSNcVnJOp8FbYNb0FkS9ZLL/8nP/p9+SnRQme
6KAkS7hFY9yMFnEUasRPmWaR/lwxBaPnLcesKRMwde4ynLd8DXGU3PXYPJ6u
VsQ5L3G2Ox/XBzF7JANWPuBxln83P+WW5sHu2XsRP4zyDfu21ODPw7CCmum9
6vhpst8j6ChTPEwW48zixawLceF2aAbDk7vvAeNCfEt+yoHn4W60jtXsNBwx
ueL98gIis5s2MrUMIgLckSXkaxan+uJ/I9sxNREUOsI+rXz9rbbwUw4urB5A
69m5xx8K/br28FPKeYj3tcLIEeOxdMlcjBs3Eat3nIRvco0ysIng2/LTUhyd
zXzWauaBKurIcJEdZAkDYxdxX1aJsmRHtOPlC15a1dkiMjaO5w/jUTTTL5/i
p5TvFuN+AaOHjsbyhbMwYeIUrNtjgIjsyvawJPIatKUkIClfB5ddIsQ+nlOc
iRvrV+INraRqzk+pOmZTu2vTMtT72GssGtYHF4Mr5GPMDcDkRhL0bw4+F8p1
+iP4KfEfbk5h9i4VtUYgpIrgo+woT6wz9KR959woZ4QK2djS7Cj8M68XFKn8
rjJE9vy/lMWVwmFLed1KJdzxF2O/ubnQ78fkbZz8t+N3OX8aYLqRvr9Ux20Q
PsZcG/np46PzGZlbfknkrM/P46dcZLy/js7N+uMdUbA3tkxk/Hn5TngYWuOs
UpVQFOeAwd2GILgKXznt2W4+P119vnINjx8Jlp+KR3aUB0b0bgvdxs3QU282
PKNE458oH23FkDZEl2jir0fBPLtMfKF726FVXv9FVgVDdjhWqs9YE5SEnkM9
IvtbH0RW2SM3dw2i5Vm66RRE8ZR8fqQTGvByWjfpvwhRFfZAqPe4t2Mc5uy2
qLye6naNeQ95DTRv3QU+8RWcOzJu9hv60b+RlFLBPvM3qIjcUAdM/mMw3iYw
11bPT7mINZtKcyRZ4iu7xgv8DYoTduTx003OWSLXfIv8SJkvt9Jn4iWl5TDu
b4tKY1YU54Klc5cikarjSebFo2096HYqtxqG2Eq1PbmIMxtLnwnuNM8EeUJf
115+StVUfYkuWlROEgXMvO5X2X8pI35CK1kyNrpwFKpHWR0/vfyV/DTU/jwU
KD9MrgOcRKZgGZYMqkfb4r02oueQquOnnPxY7BvbCccf+H6WZimKsUdXBabv
J26paPcokx+EoZQ8y7fBndByPvWl/HSaCD+l6gyP6srEJWx6GlXhqhLYz6+a
n74+9v35KZW/d8awhZXqPGV+uIU29LpNa3iJyR/5OSiNvsTwU+3K/LQsLw5z
OzWk30Gp1SrEV5ykxOYcmUnkTVod2x+Vx99+S35KbLffRTqfsYS0In7fZFn5
nDbxobZPH4l/3NPp5z8+uxr3wkT5ZFF6AEY1oPxxLZwN5nGHvI/4jcdPRxh8
FMtPe/P46c7X35GfcuIwi86DK4V1Rs+Efs1B4MnOPH66CllC/PSviUxMRfN1
1mLyjn57fhr69AL6DFqDj+lfWexaDHJDbHj8tD4MP1bku4Sf6jH8dKQYfnpy
IY+f7rzO/9ThHE/2ZDWw1Mir0lpmbsIbjO7+O6xCxOcxqBKcDOzVY/IrqTbR
g3NyZRsU63QCgxcc5Y/Vp/hpoP1p9Jt7CjE5n7EDSGzBFJpTSkKr2zz4VUrI
w8Ezg/+h32ZrXp7V6vnpX9XwU+rad+en8fYGddB24rZKsWBpL4/xYpoUcN5X
EGNL58XvxOTF17sjehanOn766sB0nk2bJcgHSbc1E9v7MvdT/v0qrx1cJNuu
pvOQUTU4Zxx5WGn+cnJCsGnSYJgHMG2Ie7oBR81Fa7lTfH7jsA603t/sFFOp
Fz6FgnALtOPlpPzzhG2l76mYuN8oW6bQGdZRgrlD89PWDD/d5vF1/PToPCbe
SPGPUyL5GpJ8H0CHspONhqOKE1Gfxjflp2XYMp7Jm9V75x2RXyd6HKDlQrPn
KBF+mvhoNY+3tcKrlBrwU5H8SMGVdXx2NKb1bISFp5l955LMQCzpyOibjhO3
flG8TlWgbPcavRZYev5Vlb/J9TrCjw9c8s+XrZt9a7D8VDze2xyBspQEfx1B
ucUgmL4IYewLeb9Ql6toVa8uJm+6IvADyXucmtGffw3NNRqOQ8y3iB/P80Q3
FTLv67TFdeeQSn5Afpw7JrRiZHm+8Lo3Jw/my7vy8/m0HTQf1yyfwP21F5wd
HtCxea16z8e7jMr+JBWjvq4tL2fOlDNETio3qzThCfo3ZOachEpTLNtnBHtn
V3i4vYCVyQmi99pimYErX5cUJdqiBaVDVdvAJbLymacEizlMridpeawzsENG
bh7iQn1x7eBSKPL6dL7xB+QmhyOFThDHgds+Xq0yxaEIqunRI8IB1wxpzhs3
aejN2QZLawc4PbXHLaND6N68HfZaBvJtel6CN4a1qkPvq03QfyWS67w4IwRz
mstCq914uKeKjtSuGQxnbP6/e6J7DcTurevDrMHKDb4tmt+gLA17eHnVO0+7
KnQ+hQvLTbx8MC03QtRFKcXT5Yw/Ka8+CpEirlwZ3HcwtWea95mHjHLFxynB
ze2TGVlpMBKuQnmHKT806O4KqMlpYNqxFyJnZLwvMmumEnXHIUj4OZxCHCuv
8dntVA1qKAARz4ygKM2MydAdlkjOyUVS5Ac8vLwbretS8chymH/JGbkZSUjg
xXRFuurTOVZldIcgqVRUfzw5sxCS5F6rD13Cg0e2cHJ2gau7B7zfvMWHkAhk
5lf0ScvwwmARVOSkiA74A96pot6T//2DtH8//ZCl0HgWw24eE6/Vuu9Swv/F
v9urC7x+E6m/xtTdmNiHqTXZe7ctCso4yIjwhlsglcOsCPcmMNxXo1nFdYdS
OG5kzqE315svErtRHGZC5z2lvrvoUcHhz7Bmcs4oNsCDN6K2NS34MZpSfoVa
F3hlCvjp5G5NsPqqaMwft+ADRmlJQKXHTpF6ml+Cgvf76HUi2Xrt8Tqmos9O
/MAX+mitKUvXWz/2OEDk+UXJr9GviRLajV6LpHxBrckAo8W8ed3py/OkVgC1
t73498Z8/T500S5YOzyHh7sb7CxNsFBPF4NWn+fr54fHJqLt4uv8NSAapenY
3VkVcjpD8b583AujMU6T8dHbzryGHCK3aeFvYOHN5AwvSvmAHnSeJUUse1Yh
x/KbOzx+2gjXIkX1Td678zzdL4MTXqK8tvjjJbquECW/t9/ycuJwEjGvNRPn
rzNoOfziMpCdFg932+uY3JGJVW3cdRoSsnOQmJBEG/JDM39jfNKe2xFTQOx5
VhTsXMvrOhZhI517TgrD95uLPJ9ahxndvQ7NKRY9EK0RlfrOClpKUjTnvhkv
UigJ49soo07XRbh2xxJ2Ds/g8vIVPL288c7PH1EJ6V8V31sY9RR1FKRpvTLL
OID4P2UI93nBzHtuFg51Zc5bD16gX8EzKcb+CUzuuD82C+qb5IY9R0c1RlZk
lOpg0a7zsH/+Eq/dX+G+iT5GddPFoguuNcrn9MHmANTleTnKGvXF0Sv34OLq
AVeXpzDatxz11dvB4o3gbElp8ku04Mnt9HOic6c06Sn61pFEkwnbcPPefdg/
dcKLV67wfE31awBikjIqeWKWB2fz54F2j4m4amlDdKk7Xjy1wdE149G800QE
8dfDS/F4JSMnEtorEC+sH4oTsFiXkf2W08zFrudzc95geENGLjdfrexbZ7jr
8+SczMlVF5CaV4SUmGA8vHoAzTR4uYF3eSI7MwGRqcwiamGYNa8erBw2vxCd
G7GPdvHup4BNl58Tu1CE1LgQWF0+CL1WTIy/QrM58I1LRzHl1JbGY3HvBrz+
UMWYlQfw2MEFHh6usLt/FVN6tcTI/11CPs9XjHVYhdajtiNR+GWJX3ltkR5k
1FvjSXRN9stK8eDgVMhKSUKt40T4posqYc+r6+n6p4sNnovIW1FqEHo2VaLf
daHYegSfj5OLBvHWY1rCiPipRQVZCPZxxv4lQ6BA+dPqPeBJ7EhCdMKX79uU
JmNLc2aM+yy4XYGv5WJfHyaOafz6ixUuLMI6WgdJY9bpct5O5ZZg/D2ZJiPx
JCAB+Vmp8H31GOvGtqP5mXJrPYRl5iOO6DnqUZku23l5SJVwyT2BuEQFRC/a
IJwKlMl5ic7U/rC8Fsw8xNfULst8j67KvFirvT6ic5746VZ7x6LF4G2IE+oY
uv6pKpF7mbpYfTvgq3Qbta/iZLAMqprD8a4aZyzdZS+990K1c8pWsyp/9yPA
8lPxyAl/QfSavAjXlJJRRd+xczBxYGfIKyrjkNU7iG7PcPDi4CSRaxqNMkTu
N3mFdExqLsNrhyx+n78XvvE5xF/KgscjA7RpqEL7AJ2XmYr6QnSz8vC/oYKa
OJLEH5GWloYU0WOazYhvnFQ1qctx2wAVCU2cqGbj4cPjf0T7SUqavr8k+e/y
C06CmqycAjzbr8eb4/KYctql8nwr/IAR2ozNpa6Xl5eHnKwctps8xpaW5eMg
B3m5FngcVoCyolT82a+8To4KjH1qvDqHghhn6NURvIeklBR5FylIyqpiyx2f
SrVlC2IcMUhHmq4zt/AYs+7LLUrEvpk9IKnUHc9CK9TPKU3AmHaMjyfVfjVi
hbhFUdoH9GnGOz8s1RVeiYKNyOzwp2jKywvfqMMkxPE2ZLmE/y0fyvBMCemO
eCq831yQiGWdmdyRlE0yfyeU1yorBIuaMH6WUpMeeJ8iGH/qnuY7R9M1MbR7
T8HbVCYHaqDdKWgpy2D2kUcV+qEEh+YyNV0lJBvg0nsBpyjJjsDg9ryYT8l2
cIr+8sWDsowA/K4uz5dbOUoeCEeefd4Tu+b2488H+bodYUv1GfH9z8/nyYOs
Di4GiNp5y0PT+HWDqfuVy6qMjAxkZGWhXLcxjj8JFuVdZQWw3TOG2CxJyKn3
h2MQJWMcxLtdRheiI/pteUR0qOCKgnhP6Ckzz5Bv2AHOldZhmH47tqgvT9aU
scVSkGeT8lMuLOSde5WSgYa6OrEpreEcnk18iQAMqs/sm8goa8HST+BPULHQ
wzWYcZXT7gGv5PLFgjK4n5jCf+/1l92FexjhptN4vpg85p55JqRxS/Hy3Aye
D6eKdfZMTC3DT3UgrdkBdwJ4+QWJDnc6NBYyWl3glFS5NunngFuaCZPp9Xjv
rYaNd96JjYEKstWnc7NIKbTEMZtAes0wO9INY3Vl0XzUFuLzCVUILsvHzrFd
ef0sia1mX19LrpDMez0tUT1B61MiTy1mnEWqkONE1z8lny84Zst/l1h3Y6gR
XvE/I+G16WI4r23Dk0tpaNbXhErTfvDh1VSKcTNEQ97eSJ3hx0RyZry4tI6J
Fyb6f+Y10bgx1zOL+e0cv+OB4AtOEZ4dGM6TCUlsM/Hgf3Vz5zh+f8nIUbpW
Dh1HrEe0x056X4GaN5Renv63OT0eAVd4e4Tk+ap11KGgpIqzDiH0vUqSnxHe
w1vj7bYQQUK1MjODbqMFb540XnxXqB40F88Nl0JOkmnDH0c8Bb5oUQiG8eyD
hKQkrZ+pvi+fw7KkrR1GbUJiTWvwFidiTStevmVpedTXVEaz/nOITeUgJ8gK
rXh6WKPjcEQKLUrmBVugmwoz91R6LEA0XxVzkRd4jYlBqGgfST+O+ZvaX6yh
00lk23KD0Ho46Q+mL4he0+gIs+A8ET0WanOUrwPaDd2GTKF5UhJjxdRMrbJf
5dFx6n7EChUN4Ran4MT4RkLP511D2U2dYXCKLRRqagKmd9Pl/a4pngnVrs34
8Bh15JmaGnWbjkF4lvj42Fu7R5D26+JFgpjFr+JYrG4nLWoniN8wesct6I/j
5XuRInZCXhvHeOs0Loar+G3/bf0jFAlPnJJEbOadHeb7IXKy+G3lFdit7saf
Hw3bDoZlOKPv0vws+TWmhcdZiszngWuuiowzxU8VyXzpu8SQv79RmOKDPk2U
8McaU9G2fAG4pTmwWNeH8AvKtxsDr5hs2tmOdjqF1qryGHvQsYK8cRHm+A/q
yTJtVvrjcKX671+CGJt9/L03KWlZpt+0B+DW8+fER5Wn+0xWXgHaw7Yh+wvf
MS/MDg14869Fn6XIEJbfRCf0UWS+q99/LoS3W4pi7NBbg+c/TTiI8rCflxfW
8MdKmvIp5eVQv/skePjbo7UyMw8oOeq/5ASjU3PfYbgmb61JTg2N6iqi31oT
MlZF8Do9jrZJ1DrgiF33xO51xrlfh5IsoyPqd1qMaKG55GW8HtJymjB6ESZy
DeXHTe6iw5ffMzy9+uXgkvddARni80so9IFzgvizEFzyLidnC3SKZo+pSKpJ
Md5vBJafVgUOkgNfweDwVkybMBp6vw3A4BFjsWD1dlwwtUJIcoHYvDjcgnjc
OLIOo4YMw+LNxxGQ8a0GtwQndm6Ds/9HeDhZw+Do35g9kbRrQH/8QZ0X2bQH
956+If0sXreU5CTA9qYB1i9fiCmTJ2Pesg0wvGlN7M0n7HhZKv7aeVpsPS0+
qLofZMzOHtiKuTOmYsr0Odiy/zTsvcIF+dI5uXhuboyzZ8+K/F2/85D0kWgb
4vyfY+/mVZgxYzY27juDl0FUjg4uUt7dw8p5M7Bg1U44+CcjNfwdblw1FLmf
4eVreOz4GjV1TwozwnHX6DhWLpyNydNmY/Oek3Dwjqhy3So/LRKWJmexceUi
zJq7EKvWboWB6WM+hyxHSqQv7pgYiLT1yg0LvE0pQerHN7h94zLOCX132fgW
3IMzkBXqCuOL54WuO4erpnfg6eULi9vGItdcumqKp76pKEgOwn2z6zgv9J3B
FRM4eX1EMeGmd65dFGmHwdWb8PwgqC/ELStEwMtHOLFnC+bNmok/l6/EXwfP
wt4nUjTnaHEWHCqM6YWL12DnHY+CtDDcMTYS+c7oqlmlsf40iH8X/Rqn96zH
zKnTsWbHEdi/DqXrcyS9t8eahTMx+8+NMH8ZhLLsEJibXKogY5dg6eDNX6st
y43GzsE6mLJ4DVYsnouxIwejX5/e6NalE1o1bwINFRnC9evjtFPFPLQchHk7
4vTBbVg4Zw4WLVuFbftPwNYtUEhDEV0aQY2X6DifNTLGw2fe/PXS7KRgPLhj
IjJ2Z88bwuzxa37Oj5L0j7hCdM+MKdOwZucJuBFuWpIRjNvXLoje2+AyXrxP
Rinh8TcvV/jugjE+RCfC9fE9GBmeE3xueBkP7F4gp6gAb+wtYHBe6Luzhrhr
8xKFZaXwsL1VoS8NYOFIdExJLu5evwGzm8bQP3oIRw8fwK5df+PA0fNwCxRf
++1TY5wb8RoWtyrqh3MwvfsAnpX8US5yonxgcu4wli+ci3mLl2Hj9j0wtXJB
htDEL06PFNNfF3H3vg0Ssr7urGJ2wgdcP0ueP38mJk6ejlVb9sDsiSfRO6KK
IsjdEma3b+HCmRM48s9R7Pn7b+zddxjmTgGVziNyixJw48T/2bvquKiaLkw3
FiiKDQIWCnYgKpiIirRiFyZ2F3bHa3d3dyIWFhYqKClKi/TC7rLs7vPN3rss
W6Civur73ef34w/21sSZc84zc+bMTHi7u2H09OW4F5ZMWdfH105j1yZZvblj
7wmEp7EQdOMsdkhd27R5K05efkT6Ngf3L53Gjq1SfbtpG46duY4veSw8OX8Q
mzdKy98OnL0RRK3viGzFma3+GObjhQEjJmDnqTtUnJto/mDb/DFw9+yPJbuv
IK0wdx0vA9f2LMcgLzcMGTsLp+5HEz3BR/jdC9i3VXYsbNm2H8EJOUgOf4Lt
crbgwOmbSOfxEXLvIrZK/b5x0yaculM0fxN+bT3MrLpjvN9o9HXrhQ5tW6NZ
E1s0qGeBalWMqHkkU4clUmdjfh+4Sc+weiapp5s3ZizfibDkPPBSniqOazK+
3pG6ZMY+xM4tm2Subdt/BqmsIrlNDHuATUtnY6A3bR8nzV+Jy48jSn0OjgTE
R3t+8zgWTBoJD9c+8BowAov/2Y+Q2DSpW7IQeOUsdm/fKFvGPUcQLomhF+Lt
xeWEtw7CxHG+8HJ1hj3Vrjaob1UHVSuVpdafmo7cI7P3hE9sQMCpnZg+dghc
e7ug/3A/rNt9Gh/Ti+azBbnxOLN/m5z8HsL9sAzkxj3HgV3SY3Qjdh44g49K
JvWTX1xAz5nXUNzWdlbSG2xYOBU+Xp4YMWURLj6i2zcv9g6mj/CBe//ROELG
HY/4ttfPHMJmef174jxipHJPsIgd3bZyHgb384TP8MnYe/4hcvkChB9ZjpVb
RTYzTu48GGKrEkKwZ70/hvp4wsXVE+OmL8KJm8+QK+dAZEddwr59B7Fz83os
X7ECCxfMx7y587D/vOjc0B+Nt+MjLOgyVi+Ygv59+2LIyDGYuWQ9bj2PlvVZ
+UQuLhxXGIe79h3BjXuvSxdPSvjN6xuHMMV3ADz7DSWyeBARyTmiAxkQuHcJ
8Q89MXrOWoQlfc/6MPH9Qu7gwB5p274J+4+ewvsEFrIi7+LwTlmfZvuBk3if
mInPkUHYsVl2bO46cp5ww3zKf7l3YhPGDOkLr0GjsHbPOcRlcomey8OJDbPg
6eGF6cv3IzYjX1KO2GcXMW1kf3j1G4blu87jCysbQWf3Y+NG2Tbce/QsXonP
qRMWcPAo4AL27pAtx9ZdB/EqLgefgy+RMorHxf5jeJ8qnt8lvCj05glskdb9
W3bhzpvv3cHLR2zAMWyRKuPWnUcQI5dwJpX40wf3yrYjpX+37kF40nfuP/hJ
YPgpAwYM/h8gygO2d2pv1HTfU5TfRQ4CLvHBBzWC+8yzym9gwIDBb4IAmZFX
4WDbAidKOFQl+dUpmBqY47aydTYGSiBE/KN9aFOvKR4lFXc+ihApL47Bqr4X
okoXHsGAAQMG3wWGnzJgwOA/D6KTAhb1gX6Z+rhb4hquAFG73DB2c/C/VjQG
DBh8HeykF2hb2xAth64o8exZQfZ7tLXojVCl50ExkAc34w0cRO3ab1uJcaW8
nDj08llUzDnQDBgwYPBzwfBTBgwY/Nch5Kaib+MaUFGvAN9dgchUyLksWjvN
wevA4/D0nIg333boPAMGDP4lxNzegTIaKjBp5oZHMYr5eqgc0okR2LNkIqac
VMyPyUA5Pj9eSO0rrtHEG8/jc5Se25T26S12zBmIjddCf0MJGTBg8P8Ihp8y
YMDgPw+ik65NtZfk8TCoWg+DJ87Fhm27sWPTakwZMxiWpmVRpYHnLzm3ggED
Bj8GdsITWJTTEed804FNJ2/MX7YWe/fvwYoF09G3e3MYaOpi9PYgKDn2mEEx
4KS/RrMqmlTuGnUNDTR36o+FK9Zjz+7tWDp3Cjw6WEFLpxrmXIpl2pUBAwb/
Ghh+yoABg/8HCAuycOPQWnh1soWRgZYkR125KnXQ2XMUdpwIwBf5pDUMGDD4
QyBAevg9LJ88GNY1jMVn6pAxrGGAus0c4LdwAx6EJTEew3dDgE8vb2L++H6w
qmoETfG5euq65dCwdRdMX7oFTyOTf3chGTBg8H8Ghp8yYMDg/xE8dg54fEa/
MGDwV4L4Jqxc5Xn0GZQewgIusllcpl0ZMGDwW8HwUwYMGDBgwIABAwYMGDBg
8CeA4acMGDBgwIABAwYMGDBgwOBPAMNPGTBgwIABAwYMGDBgwIDBnwCGnzJg
wIABAwYMGDBgwIABgz8BDD9lwIABAwYMGDBgwIABAwZ/Ahh+yoABAwYMGDBg
wIABAwYM/gQw/JTBLwHp4PS4SORw/1v9J+BmICUt63cX449DPusz0nM4v7sY
/3fgc3LwJT2L0qt/KoQFHMRGJVA2gMGfBU7OF0SGheB1aDjS8gp+8G1CpCcn
En/ipxTt/wvEXuakJSImKf13l+SXQkB0QVJsOFIz/0xbkc/6gpCQd2Dl/xl+
Cy/3C1Kz82R+E/A5iAgLQ2ruj47X/2cIkZKYjB9pQT4nHaFhUcgt+PMMmyA/
B/GfUv969sTwUwY/EwJeHp5e2AbnprWgpqmDS5G5v7tIPw4i9Nnxr7Buqg/K
qavBZ+Gx312inwJh9ltM6e8JT8/v/fPCuI3XyHjm4/PbW5jq4wAtNV0sO//q
d1fp/wsCDtZ5NYdhvY5IZP18X+Xa3iWlkA3RX388iM5Bfl4qTmyYgaa1K0Cl
4mAk8n56ERmUFgIugvZMhVW1KqiprwYVFRXoGFng4ru0734Vn5uBwMNr0LVx
ZahoWyEg+xeUl0AoJL5G+jtsXTwNns6OaN+pByYt3Y3EXF6xZ3UWsL8gKPAW
bt1S/Lv/JIRwcuKhCATUu38HPjzYi5Fe3VDT2ID0gSo6zTn4W8rxPWBnJCA4
4jO+eRoiPxWHlk9Hj3bWMFBXoWRt4+3EX1nEUoKHxV6WVD+4LD7920ohJHY1
M+YRFo3qDX0VLUw98lDqKh9By9pCnbRhXccJfyQ3+pMhLMhB0OmN6N64IlSq
9cH3azsx+OlY2kaPkuUuk05Q3Ob3Q4jc1CjsWDAS5hX1iXwsAusvp08MP2Xw
0yBg4f7pPZjobEmN2/8KP82IvIUtyyegjh5tW/8r/LQg/ixqqKhQ9rhB224Y
NHwUps2cg1l+g1BGV532WSvZY9rceZg+eTwG+XigiVkl6ncjp+WICb2B9XN9
YCzyORh++i9DiOjLc2Gip/bL+OnywW2pvjas3gAu3gMxdtI0zJ03F/1al6d+
V9GsiCHT5mDOrOkYPWIQejs2Qxmx/7n18mOc2LES7WpWoO9l+OkfhHxcX9YH
hhYD8DY9nxjndMzs2ZDqp8p9v48fCQj3uHh0L6YPbA8tVZVfw0+JT/H41Fp0
b2MDa3tPrNi6DxcuX8X5kwcwwaMNNA1N4TltMzKVEKYCTjqCbp7HBLemUFOh
ZVO/SmtM91+COVPGoFMDY+iUqYgm7V2wIyC8WJ77q5CbGoNXT6+iq6kaVFTV
sfTU63+5BN8J9ju41BL55VqYvf/xtz0j4OBTZDhubfCg+0CzMZ6m/YGL7MIs
jGysQ8lI3aEbvp1//2TEhVzBhkW+qKajQrWzLD9lY293Q6qMxrbOSOP8ge34
h0LAY+Hq4W0Y1KUuLYc/wk/z3qObIa1Pmvaehz8hTJCfEYoDG+bASosuF8NP
GX7KQBHsNytR/j/ET2mwMd+h7H+Kn3KjD6GyRhmM2PNUJs4lN/YeqlXQoupa
rvE8ZEiZQEHuR8xsXxGG9v6gezYN7rVUGX76LyM7+jps9fWhTjjBr+Kn/j7N
YFzPBe/TpGPx+LgypQ7NOfXr4UGG7HdfnPKHrpoqNt6Ig8hK3BzVjOGnfxg4
MWdhpqaCGsOPobBLeKkvMHvUCJwOSS7VO1NDLsJUT/Wn81NORiw2jmwLHa1y
cJl5EGy5hQohNxWLHGtAlchYk9FHkV1MEPmDA9OgKeLPKhrwOPRJiofmY4lP
C1pG1apjR/CXn1f4b4SQ/QaOFVSgqm6AK3+6vcx9CceK2qS91DH+n5vf8aAA
oVs8qXbWddwN1h+x3qSI8HtHMHDQaNyP+PflQBa5GNzUQAk/BVjxDzHZ1xf7
AiIZ77gUeHt5FfTVf5CfEg0S/3APfH2n4HZkzk8s3bcjNzUekTnyEsDBUXs1
hp+C4acMlIMbsRkV/3P8lIvFTsb/KX7KCdsOiwZdES/HbUripyJkRZ2BZZuZ
YNH/oa+FBsNP/1VwMMe1Jfqt2YQaOr+On872ao7Rl5Pl1pRK5qdCbhLGm2lg
zYUY6t57k1oz/PQPQ/CGoVSfmE88+0P7r6SRHnYd1QzVfio/FbI/YKRjHaiq
asF76RnCTZXfVxB3FLW1iL3RqYiDjz4pvefwrNYUh1XRt8WdDFmJ/hK0joqX
FLVJu36r8W+HTLKezIMh+bZ6pb6I4/6hxE0CAZIinuP6nWfF7FcWIvHpAdx6
Ey/3WB6W97IlbayDgRfi/vV16r8PbAxvXVYpP2XwY3h/fQMMf5if/m7wsWuS
C1a+k9/HzcU5Jx2Gn4LhpwyUg+Gnfwc44YcxbNJecOSG2Nf4KZ/9GWMmbmH4
6e+AgIsHG7zhOGgFUmOvwEz31/HTf+bPQkie/K8l81PR9YitrjgQ8BEMP/0z
sWuMk5ifnvtj+Wl+ZgwmOVSjylmp5Uh8yCqhpIIU9K4hWjNQQ8sZJxQ9Bn4y
RjbQpt/lMBHyHh07/CAMxPy0YXc//KupcYivdH1CK+rbtScG4W8fIu9vbkW9
ipVxJVQ2z1NBThw61zeCapkGeJD6Z+ZG+rPA8NNfhb+enxIf4NG+CaikXh4r
GH7K8NM/CaQDCgoKkJOWgJevw5HB4oJfTPJOIem3PBaLmg8Wkuc4rAzEJmUq
5PoU9S83NxPvX71EQhq5n/9jbS7PT0XfLuBx8DEyHJ9LKC9dZlH98pEeF46w
yDiw80XyVPy9vPw8xMR8AovcxyeyxBcoLzv1XnJvXFQYohIzkF/AL3EOV9R2
BVwWIsNCkZjFJW3G+an8VNTm+ewcRL95gZiENPBInwqKqagodwefXE/NzBb/
LyD9lYG3r0KRkZtfbPuUFl/jp7KQ56ekrPwCZCR9QEjYB+SJ+q+EpwXk3rzM
ZLwNjaDqUpJsiGRf1A7piTF4GRaDHDa5vwRZpfo8NxW5+ULqWVG+no9xnxXl
n5SBy0pFWOh7fMkpYTxRcsxGVk6e5P3srM94/ToSLI5sPUV6jZOVgrC34WBx
eT+tjz6HnEXFCs3xIIWH7I+/lp8qx9f4qey98vyU6hNOFiJE44q0teAruoDH
zcXH96/wITGd6KWSx+y3gOrDfDayc9kolNXM5Fi8jUoEh1fy+0VjVlSeqNA3
iCHlyVcyZkWyJNLPRX/0O2m9JneNXzSwhEKBwjPy387Py6D0UVImu1i5p96T
l45MatKJ2GZOBqKj4gnnEkrKtrx/R5qf+p0GR1IWgVwZCmTGgXy95Ov9c/lp
AY7P7EivaWqZ43j812Q7E54iHUTuV603BXLLo8iP2Y8qYv7pNf+IwtNJ15fQ
Mkr+Og7e9NNynYjas0i+hZQMyL9ayP2Mfg1EPFzka+Z/w/u+N5cT/V2Bkm8r
vl8oo6dE31P6Lbn76N/4SLq3FnUMVVC+aid8yJWVz8yYm6hjoALj5r2RLTUB
QNWppPpQ35KL6abaQNmtX3nXN4EeJ+lZyubVRfqCh9zUWHxMyqDHCJ//U3Kn
0+M7k9iLMHzOIT63sGR+Kro/l5WttL4i34VHdGzU+2jkEttD+UXFCLWQsqn5
SIuLRERsCng82bFN+UFS477oEu2TSOsspfUibcnOTKLenc8T+2hKikLfl4jI
j59LvI++lw92Threvn6Lz1l5JfoAEPtOX+Kj8Doinug7Ad79NH5KyworO0Nx
XIvbNTNL7LOJfHHiK4S8jSb+QMk+UcmfFOD9lcUw1hbpq3JY9pYlsSX0OxX5
KSUP7HTi37xDam5+CfJK10fk07x7E4ovLE6x/vS/BYaf/j1Ie38bI126wNFj
NLbtO4g9W5bAto4pmnQdgOfxRU7B56hgbFkyGd3tbGBU2wFJnDQsGtJRnDtP
ByPWBIhluQAhZ1eji0Nn9PHwgGevDqigp41qdVvD/9izUs+tS/PTYzeuY7RT
a1TQEfsPqhqwaumEPfc+yfWsEBGBu+Hm0ARuo+bhwOFDWDvdB6blTdFpyCp8
ypO9m/3xBgZ164T+09fg0JEjWL9gHKwb26LDmKUK5fn49Aw8u7aFUy8PeLl2
RzVdDZSvVg/9Z+5GuvziIRHMiIA96G3fEg5uo7Bq7WpMGuqOzr0Ho5u1/o/z
UzI2XpxcgS7NbdF7yARs2roJfv07w7h8VbTrMRgXXyRIbhXllj+xZTH69eoE
i6rlYT5oDdJjH2JoT9Ke4vxFWmVN4TP70E/N41dqfnr2CW5smYJGNSuIc5Go
wrCyFabvfqBgawScLziwYAi6OHaFm3c/dG1lCS0tfTRo64xTTz4qfCUj8h7G
uXZCm859MHfFOqxeOBlN6lSHhY09Zm2/gSLxECLz0yvsWDYFTu2boJyWJs68
jsCqwR1QVpu0mYYBuv/zjr6Tx8LZtRPQpWMnuHr7wKmdNTQ1tGHZvDN23QyX
fDsz7hk2LZ6C3l3awLSsNibvCkTSm8sY2L0ZyuiIc59WqIERa6+DS/Tfnf0L
YWddCzoatM+rVa4mpm79nr1ayiFghcPXsTnWB36kxu/fxk9DXlyDT0cb6Guq
i/mANpq6zsYnruKTiS9OwatTRzj18UA/j55ED+ihQvX6GLToJDJLUdXcL9E4
8s8CeHRrR2TbAFP3XcfVTZNgU9tYIqtlTCwwZO5esHhyOoHPRhDpU4c2reE6
dAo2bFgLP5/OKF+pOuxdfHHlXbZEn364ux/t65qgQoUKqGBcF9M2n0M2eV9m
bAhW+zmjiuh38lelRV9sOxOEfPG4yIp/jcXD2sK4gjGcZh5GVn7RgAk6thxd
7dqjt0df9OnaBlpqaqjRoA3mH3wiWevjfonA4X/mow+RURMDPawIisWeCT1R
xZCMYzUttJlxFscWD4KTkxPMq9I5q9SrNUF38r/ot76z9iMzIxanN09BfRNR
GY3Qf+15ST++vX8B62d4oYYxuWZUA6vuf5Bpop/HT4X4eHkRKonHTuvBK7+e
p6YgFl1M6PtVqg9GnIx8CBC8wkXCP1dfk9ct+VjkLd4jbdAQR15l/EjhKbCS
QrF5wVj07T8Yo8eMht+aqzi8fg66dumF86Gy+3vz4oNRz0QbGlU74KNSuRYi
8W0gFkwYDJe+QzDGdxC69vbG6sN3kFeSW56fiTsntmDsqDGYMXM6+vbojgF+
/njxWZYDx79/jKO7N2HWhFHw6uOGTcGi8gkQe3sbGSsOcBkxF184fMS8vodj
+7ZhwfTxZDy6YuKFD2KZFyLlzU1M7kv8Cw1aFxpUbodxEydh87F7Er3/7sRA
6JBrdgP+oc+ZEuQh6MgKeDg5ogPR6ZvuJ4nfJyBc6R1unDuClQumYoCHCyYd
pPdZimzG0SWj0c2xA3oPnoFPWYWrzQIEHl6JPt0d4djDB9fDv18ABfm5eHr1
ILH1rmhiWRU1XJfKrmUTf/b02onoYN8L63YcwKG9WzC6Vws0tLTAvIc/sP+Q
+L6vz60l9q85uvWbiLVrV2B0v17o5D4aLc115PipABFPLsPfbwDa2VrApGEn
JMudMZMQcgmu9rYYMWs1jhw9jDWzhqBZvbqo1fu4QtwAL/U5pvTvgjbdvTB7
8QrMHe8NQ0NjtO42GBfCsqj+SHh3F6t97VFRpLeqWOHUS3HeZX4Gbp3Zh1HO
1jAi14wsnRAv44MI8Zj4Oa2t7TB/3U4cPbQH0/t3Qv269eB+MUPmvofHl6FN
Y3v4r9+Fowf3YJqPI3Wf1yW5schn4fbWqejSuTPc3L3h4tgUZbR1YWbjiG03
QxWalp8TjbV+rqjXpAMmzF+BNf5T0a1DZ7i694aO2g/wUwEbjy8fgN8AV9ha
mKJRl7GSvQfc7A/YuXwaXLrYobqRLtznHkDSixNwt29A73kV5Rs0scSEnU9K
dd7ahzsH4NSqMfS0VKl4Ecv23Sj97e07F5/ZolEixU8d/PHu7gH0bGkFDbH+
09Auj/bDN+GzQqAGD1c2T0dru85w9/KCc0dbaGvqwrJZN2y5m/DbcoUx/PQv
gSATg9uaQr1MNdwKz5T8HLTJl/Kt6o8+BMryCDOxbeFUeNlVpeafVY2aYNv4
DvAZOQ49m5hDj4xnr9mnKd3z6tgcVDRtisDooveFHJ0OPSqPhAGWX/ugUIxv
QSE/VVVXRwOblrDrPhBL16wh47knqpWhfVN900a497HIjuRGnEQ90ZyQsSdi
JP5qAQ6Ma0ztGxq98X5RU7ATMdLaCNZec4ukg8jcs3U9Yd57spTECJH74Qra
WNbBsoAEye/58dfQvJLIb9PBsC2BMvcnPT8EM6JXuo3fA4mbSmT5yZYhMFD7
0fy9QtzbPo5wIH0M3xEk9V0B6YuZMNJRh3YVG1yKzqH6Jz8nFXduXYBPaxM6
t2Z7J/Ru0Rgzt5zB8+cP8c9oexhoqkCtTG1cCf95kSql46facO3VAc06euPM
/RCEPruBUe1qQIPIkkGddojNkVKIRL8fmd0LJi0nIDq70L7ycGRWdyrfj04d
J4RkF300/8tLdKtfAZUbeyMms8i/yvt4F11rGlLy0XPmEcpXF7JjsWrKBLg2
qyX2SdXg2X8AnIdPRffW9WCgq4fGM59QMTI31/VHNdvBeJNeWLYCBKz3gi7p
Z62qrfBUXPGMj8G4cWYjGpdVo8Zah06dYN++Dw4FvEJKShyOz+0OfeJP61S2
xNopHujs7oe7YXFI//wJ++d5QFdDFVo1OiOm5OWREiEk5T3o1wkdR2xDYcrG
v4qfluuEzg52GL/mKMKi3uPYqrEoIx5PvTeEyNi/FDIGbQj323a/iEukvTwI
c1H+HXL/wDXfz/Uj7+3CjFG9UIHKbaiO9nZNYd22B1Zs2Yfd//jDoUFNwvtE
OXIMMfzAi6K5OTL27+2eAD0NTYzaGFD0QmKznu8ajgo6qtA2rIOzr5Ikl47O
cRfXuSve5BY5IbycT+hS35iSoaYb3irMobNDFqJSLWdEFuo/8u3oCzNQx7Iz
7iYV/ihA3KXJMCbjXl3fBHsfx5GipOKf6VPRv5OtWOZV0WPMJHQcPAte3Zqh
jK42LIcelnxniY89dV91qfxIReBgemcj6h29Fx2XuSLgfUFnc23KNvjfjpK5
9rP4qYCXjRF25uJ6aGHdrYSvPiNMPQczTVqW1OpPRrq0y1CQg8mO9cX5jywR
GJcLLjsX6akpiHkXjPUjCd8n8lChpg3WX3//Q+vzonN+Ix/sJz5rDfSasgsZ
orlPQQ6ODbBEBZNy0DSyxKOPslwm5v4WGJGym3Ufo+DpCPlsvDgxB9UNNWHd
dRLis3mU3D3wb075m5q6ZWFi1hvv2NIPCfAlKgjDOjZEDRsPPP5In9XNS74L
e1Nt6FRqj+CEorXB9y8CcWH/CtQupw5VfXNci83Ei9PLUN3EBJqi8WBghTsJ
OQgNOo9Vs4eggmjeQKMy9oRlFFYawVeOYf3qBWhsoE3NOTlNX43169fj3J33
dJ2EudjhVJbSxaMPRpF65eLgPB/UbdoKLRpWpfvGuD/iRPqR1PnctiXo170t
1ER+iFpFrH3LAS8rFsuGOaF5+06oUpbYJo0KRD/EoICdihMzuqKRTSvUr6pL
vctp7J7v7rvYJ4cwZ4YfbE3pM0MquyyRGRs54XtQXccQi4KKOBOf+CG9G1XE
qKulzaUkROiVVSiro4VBKy4W/SzgIMC/M2WHpPkpj/gt86dNglPdcpTNM6jr
IMtPeSnwa1kGRh5HkCcRZAEuLPeERrPNMjmpsmKD4GCihXYj1hXdy8/Cejs6
B6RRHWd8KLTN7BdoUkaUm7sSDj2Nk6nBpyc7YCySCWM7fJQiXLykK7A11EH/
i5+LxpQgG7OdzdB6b6LkN17iZSI3uhh8OVXmvhlOtdFuf5LUeBTgxsaR0Kvm
gODEIvm9sX4Eva9cryGOvWMV3c1NJ9+qjzK17RGcUrRJpSD9Odws6PzHpeOn
RP9eXYPpk0agbjnal63fuYifcjJjcOvCXnQ01aSutXJwQPP6rbD22C28eHID
EztbEn2jAr1K9fEskV3yp4oBNzUUjWroimMuio/vrWzeCU2btYX/7kuIiX2H
zRNdoK9K68k5Z2MkTwj5HNxa7oZaLfshrvB1hPvdXuwEbdE8ppYJLr79PZHQ
DD/9S5B5DXVEXETfFFfeFMlK5qO14vUJ1yK/hiA+eDsqivSGqiGGHHpN5b/m
5WUgKiISX1ikR3hx6GamB4dFD2XzQRQkY1Jd2g+s22tSqYpayE9V1DQwY19Q
0X4eAQ9xwXthbkDzhho+h8Cmvi3Ei9XedD10O8nY20dH/Kjx3GzgYslv2ZEB
MC2jgWaDlsh+uCABY8bMlPi6AnY8BjeohGYDlsjN/wjxzyhHeg3BmPiQYvXF
z3iBbpXJ2K7cG29z5DddpmKcOPd8qflp9kM0NdKCsTnhKtmyfr2Ql4UVPSzE
Z7o44312kdyfWuZD/a5t6UL8m3RJfIboLC/X5kaUT+BzJKR0ZVKCUvFTFQ10
nrwL6eyierESH8HaSLRmWQUHI7IKa4rPAQtQjnDqk1Gyjmx2+BWUpdaF1dBm
1kOaIxCfeF7rKlAjunjRk0w5/1GIuMc7UUWH9KNONWx5V2S3ch4vgL54znDo
miuUjIviHqMjo/CF+I3pT4hfaGCMTXdjZN7ISX6FBlX1aPkccRtFlJKLmV1p
btFqxGqkSSVrEfDS4dTQkLpWd+Q+ZEglm8//8gY2pgZkHJbDnOcKmzm/GanB
G1DXfjSipeTyr+KnqhY4/zpFygfJwa6OtD9Zp80USLYXElsw0rEm6nZbhhwZ
xcTD0fH0uVUG9d1QKgokzMQQax2qb9v5bUGm1NkMvOx49G9Zm47x0GuCB6n0
tbx3+1Fbj/CuaoPxQX7Biti5JT7NqX4v23wCksV1YIUdQwUxv5p/O1Xq/gJc
n9aJ+oamxQQkSTvApN63fM3Rc/o+SRvlfQhEbaLnfNffkPsuFwPbVaS+W9F5
IwrVZV7YPpQRy7zD6J3U2iyfk40PkRFIzi7yY0rmpwIs9qqulJ8KC7Lg3Mjw
l/JT1scLMBPPQ6hU7o8Y9lejUpF82kOyPlBtwDaZOuVnRKNNbT0xP9VHrTqW
sLIwR41qpihvaIjqjTpi3pZT+Pg564fjNB8dnIny2qoYvOICpJa/kftkMrW/
tUq9XkiUkSEhbi5rS63f95l2QuF94VfXoQyx4dp1vYk9KBpn7KhtMBL1n7UL
nofHy3wr/vkxNKyiD+Om7oiV0QlCbBrvQJ1h47Xuisx3eDmxsKupjTL12uND
2En0HTQd0Z+iMLFPG9h5zqTWT0XIirmAWkTX6pq1Q2y2rORw4h/AVLRWX6E9
3si53YLMp2gumj9Qs8LVhEwcJ+WYt/sWsrl8pF4eLeanPjQ/FSPl0UFoq6tC
3cwTn3I+Y4q7C7bcCid6nI/BDiZQ0amM48/jiW0cgbF7H5KxzMHpMfScpMvU
UyX2U0nYO9NJCT8twKMZFoQHlcd6mcoJcH/ZAAw/mVCqeQ3+5zuwM9am1vxj
5HVLQRLc6mgpje+NvTGZsm3y/DQ/eh9MCf+oPOyqzBjIiw2EeauVyJB8go3V
HnWgqtEEj1Okg1eEyLo3idIhWsZmePhRzPf4n9ChonJ+mhxyAqY68vxUgPCt
LqS99DE2SDZOOvzCWjRbHyVZK3+/yZm6b8JD2fven1mJVv9ESdq1IOk8rA3L
YdytLzJtzU8LRiPxPGcztzWglhDJe19v7QVddRV4b3qlwCCeHJ0OHdUfje8l
unySmQI/pSHEtpH0NbOuYxCTlicps5ATjvYmRL9plse2e9Gl+vK38tOKZt3w
PC676NsFqZjVlN6H32PsDskTqW8vwYzYmWnH3su8SZgfg15VVek5+TmK+yL+
DTD89C+BIBPrpgzAgHHLZHxRCT/VaIZgqSGeHHIEVURrBcatEaNwRpYQicfd
oaOig55zNmH79u1Sf1swpGUZOi6xVheklkLxSsf3XgxnyV4kHNXfvSldZvV6
CEyh65IbEwBfb3dM2BxI5K7o9keHaX5a23Wq5LfcD3dRvZwWVMtawP/wXWRx
i+r36PFDCRdNeHIY5XTU0LbPWLk6bsd4lzbiOXo9LH9CO1SPtvtRY7HBhCNK
4hl+ND9SPh5MsqTm+qx6blMam5X9ZAnKqdLrH6suvJP8fn7NcOq7FbrMkY3R
IYNonFNd6v7ma4JKUSbl+LH9p0UoYCWgfT2RP2uI2Q/EcW38XPg7N4KGkSVW
/LNVpk+2rptLbB0dB17Z2hepRHGkPj8BQy3i91bsgggl64/83AQ4N6xMr8m3
34Qscbuy36ylzjgStc2JMJbCc1tHdYK6gQlmLP1HpgzbNi5Hg8r0/KpauT74
KBFGHua7VKHe573yrMy7hERHDuhQjeLoXXc+k7kmyPuEbrVoXtvpcBJKAxbp
j661q2H/Q9nYxL+KnyrkRxIgcq01da1qA3cki9uZF38ENbWJzXeZi21yY3ba
gObiPYlmuPClNB5hLnybG1D9NHX/PblrQnw4PYWaLxaVad7JSIp/7hpGczmz
ybeU7neIPr+Ynr8nunTOdbGME129vosRPX/us0Em3w7r2QpxLh5d7H78WfJ7
/ucXsC1TDrsfFsV/3t05joon8JqwQkF/OTWrIe6DdnieQ7dF/oeTqCSW+cX3
i49T/So/9a5RLD/t2ajML+SnxK/c1EHMNdVgM//e1+PK+NnY4FhZPAeijdH7
ZPXg59fEZ9ei52lHHbiBgKtH0acarWOqtfahYq9/HAJ8uLEKFoYqKGs7nvBC
6VILkXKyB1WnJoOOQyY9L5/wLmstaj1/4dVEuXcWYFlfK6odfNZclLmSds+P
4ieVrLsiUWqfZ07UDXStQ/xWVWOsv6Ho++6b5UrXu+962bXB2HMU76zXxgs+
7bvgQqgy2REi7IArZYsbdJ2osJ8k6tZWKoakuvM0BZlKDlhFcXD9NnNw+dAy
TNj9mM7JR/y+k7529Hqd9zkZu3931wRK9psOX4zzy4djZ2Ak7WfzPqB9FQ3o
m1rj8MZZmLTiJD2vUJCMCRZ0fPHkY6Xz+0U4utBLCT/l4+XiRtQ4r2nvi6Co
dInPz/n0ABdfliImnNjuq/N6U/3bbNkjJV5u8ftPEx8vQ1kl/JT36QRqiWJI
1atj+fGHRbJWkInje++gUFRYrzahMrmvYv+LUEgXLWTj7I412HriQRHn4seh
Q6Xi+OlJVFXgp0SX7vem+ly9Vk+cDY4tWi9NiyB9WThPSe7b607dp2XeG+ef
F537xPvyHrvviu8jcnJ5LPEZtapi+kZZPbh96yp0KE/r7IqNuiIplzCR9Bdo
L1rv1bTCpWRFDfL++vqfsP9UgIdLrYvhp8CeifWoa/bjN8k9lwtvGwPK7/S/
VLqzjr+VnyrmR+LjpB8dm9K630JJPS772xO7qo/hSzbL2ZnNcLSk5/Z0m05C
1k/Oc/ItYPjpXwihEAX5OXh6fBlsa5QV2+ZGeCzlhieHHKX4qapJeyTJ22Bh
Dra2ENloIwya7Q9/f+V/C1dsQ2Ip3N6S8/cKEbHXF4X7gdYGpSs8T+X/ycvE
gYWDUFm8z7K6i9RabkEG5rUxFfuFqqjd0RchqRyFOczAnSOhSe5p12dcsXX0
91+EK6/pMvj3b0Lep4lBu+R9V6pWP8ZPuZ/Qpyxdl8YjlPu64LxHd2O6XVyk
vlESP53QowF1zWblfYXXlRY/i5/yc5PhYC2ST31MCqT9r4KceNjXKwP96laY
Na942Vvxz0GkE+N5f99UKkZY3WIQspR9XsDBdncbsTxZ4Vk6XVj220J+qoaz
UfI6nI9+dsbQKm+C8TMXFC//S7YgQTKRUBI/5WGwQ02l/FTIjodz7YpU+Vqs
L8V5dUSPrhjcCnaLgxX2q/zd/FSIhF30vr8q9XsjkU3n84ne2IT6rfmQ2cWP
2YUrEJBUmvpK81Ml44UVjJba9PgbsuwqBNwsuLasTPV52x2K+5tE4CXdQg2x
LnMcc0oSi5L0ZA0qqKlAx8weH1niihO7eMGvPVTVaD/afU5RzO3rM8ugU2cy
UiTVEmDDYHo9yNNvXvFtsWg9QjNpqSrip2pYGaw4J1OIP5ef5mGnnYbYnlXA
hpcpX32Cm/gItcrSawIahpVx/X2m1FUhHq1sTtkJVaOmeJNJrxW93tubsgsq
uma4nFD6mIZC5KdHoK1ZOVL32jgrn6RamIt99vQ6mF+ALI/hxZ1HdWqe1gYP
M+Q1QyaGiviWmgY2XpXmW/m4PoTm45ZtxyFTsgUzH3N60fHdldz3QVnk4LpR
dJ7g6j4bZOxPxP5uFH+u3twLI8+EK3lSVI9srGtJ900v/yAFPXZpjRs1d9R3
geI68LkFPhQH7zrND+MnbJbsmxFwUuHRtDolT5PuS8fI8ons0350X3dXuC0J
kug+ztslKEd+N7VyRbcJeyGemgEv4TJqUnJTC1dK47SIoZyfklZPuYm6BqqS
Oe0JOwLA+4E8kqLcB4PszSjbOOWWYr6FEvnpE+X8VKTfFnevJPGtqjtOJD50
npxfVICbE9tTOqL9IWXfVYLv5qcErBfoaKyGwjwDPWcdlolXKbrvOdobFd3X
Z+4xZMndJ+QkwtXcBCpliM9QrB/nj6Xr91DxWwk319HvM/VCrJKE2D8nf68A
j0rFT9no19SQmp+cd6F05x2Unp8KcXEWXa5m3vPE1UjFJCtR21fF6LnFt+2i
tUfx5TdsQmX46d+FvJTXWDi6L7x9Z+DA+UC8u770+/lpfjy8KohsjTE2vleS
nOQH8bXzZVjP10BXrEMXX5XeX8RHfPA5jPHxxJhZK3Dh7ktcPzCJWtOQ4acE
vPRQTOltK9HFehVqw3PqVnyUioM6taAN5ZuMWnf7G0rNwZA25Sl7MOagsnzu
P8ZPBZkhsNYQ71fodwbKtyJmY5wtrVtaTy6Kv/gv8VM20a1NTTSgb+WIZKXn
58ni4hpPOn9NdQ8kK1UFfDyc3VEsB0a4KQ4SK5mfZsHJTAvalevi2Tf7p7+D
nwqReH48KldviPlrNmDDBtm/FfN9YaShAi0TCyxcuZb67cD12F+sMX8lP83H
FTc6dsNlS/gvqMdX+Ck/Gb61xXvMF5xGgUh+69Fr6Y1XBSuP4WNHoLs+/Uzb
vhsksZa8nDh0qVeB2s866iKdz4pLeEx7s9oYOXc+tSdZv5EPUkRjS8jGcjdr
jL8aL/UNFqa3oOOfdwR9VvZlBfz1/LQgBZNqifMcGdbD/fji61CIJ4en0rlO
RDE2vTYiS3pdj5eAsebi+c02/ZAj9p9Z8Q/RoKIm1U6Wfjdk4mO/HwIEbXan
ylC/+ySFOST2pzuoIdpnU9YOwTmyF9/vH0eVrUzndchRKAMXM7sRfaOmia03
i3hEVvgl1BLNoehbYFNQUbx8XswxmOmrQVW/Jk68TZV/GSjZp/iOKL73ctHP
/DQsEsf81WzjibgcJQ49RMuTd2CpQevYbW/ldKaQhQUd6XnylVflOY8AU1ws
qe/WbD0UL78UWT5WYjCsK2lAw6QFQqW/y3mHHiY0Z2nWbwmKVAwP98bSczbl
LB0QFFs0Y/n+wETaD2g1T3b/8XeiOH4qsrVPTy1H3bJi+VTTgWVrZ+y7G1Gq
2N6C3EQ4WInyLRrC/4GyPdal4adA5sdg+NpXk/hFhqb1MGLBPiL7hZMCeVjU
vTEl+x0O/kJ+Slol6v5BNBfPt6uoaqBaw3ZYfuyBwh6diLv70EzqvurW9lh5
4mFRbG96GGyrET1ctgVCvuFoovubJ9DvqjUESUp8F4afSvHTvNfoQNmv6rgU
/+edbsXw078FfDw7vRw1dbXRc+5xyZ727CfrS8VPPcvTc6EuO6N+egt/jZ9y
3u8W78/SxJZntI0RcNJxatkA6OlVxJwjwZJ7Hx+brJSfiiDyly6vHYX6VctL
9LGV4zjEide8Ts6nz2R3GLvxG0qdhwGU3tCAyz+3lNXqx/hpzju01KJ9JTO7
OchSyvnyMM2etvNO8w5Jfv2v8dMmhJ+qGNbHg5Svc8OrGwfTMZ36TaE8TaIA
r1c7i8eAGR6l0va6ZH6aCafaxD/VqYJjL+Tj6orD7+CnfLxc2EIi29/yV83t
4i8+Q/FX8lMuLrvSfNDaY49MvN/PwVf4qTBdPJesgjH/PKDO+e3SqBw99tyO
KuS/pJD/Cf0r0c90HHGoaC8/sYEnx4n3uNebiqR8Ad4eHwnzHsuRkR4Ku4oi
H6Ic5j3MBDv6CBpadUK8zHwN4afNaT9j2u4n31S7v56f8lMxvQ7dlhomzfAu
rWRnVMj+iJE2dPyZnkkrBHyWVVR54SeofZrU2vaIvZK+EfKyMcnBipZLTRs8
TS39iBHmhqG32LcevvWl/FUEbBpF8x2neeDKXds4zIHiHx57g6EMoVfWo5ax
HnpO3YHE1DQkxoRgXLcGMKxiicWnpPVMAYKm0WOyknV3JOYqKmxe3ElYEF6r
pm2EY0+L9hnkx99ENbHM9Fn2oNh46pgLi+l+MRuET3LNJUi/A1sRR9Gwwv0U
OX3A+4guVQlvVtfH7NOy9iE2cCHKEl5v3mkkuFIJ3rMeLYKheD1tc0ARhxJy
PsJDPK/QdvJVmXmFDcPJWFMlbbnzx84KLZafipER+xD9HZqinK6GZE506qFn
+N4wcR4rDu3NRBxDB0POKYtHLh0/pSDk4LD/EJhXLiPOTU7sQo8FiBXlOxbk
YkHXRrTeHX6tmHlyOZSKn9IQsD9hZj9HVDLUFLeXAfqsDABLLj6cn/sB07wc
pO4zhPvq29R9In5qI+KnKhWwIvTr6ym31o+h32HUHWFKVAjDT2X5aXs9WkYW
XS/d/qNfCYaf/h1gh25ATT1NlK/miEips8pLxU/5mVhmTetXs7bTUZyLyUl8
iVn7Ir47t/RX10+fraL3eek74HUOLRAX5ntSc9C1R50U73GnoYyf8lhpeJMs
5jZEIDNTorFlYg86/ybxPVvNfkzJ543N/am4Jb2G/ZBWnBgJsnDl0AFiH/kY
I5qvFtkmt81Q1II/GN9LvrPKlm7z8mZ2iFZKULMxxprWz/MOFfkf/yV+KsrD
2NZCn7K7Locji517Tou6haB3SXh3aS20qX7Vx7QHyggqH/entafHQJ1ZSC1M
OVgiP+XCs0U5SlY6rw0stgwFn+/g5qNI8X+/J743LzEMT58+Vfp359IW1CC+
gV7tprhy9xH126vIrB/KQfp1/Ep+ysebxXWp34ysOiI2W/m7hewErJl3ANnf
HW/0FX7KjYBLRVpmNj9OJ3wsD+MLc79WcIWCGInAfg9HHdq+jzwSI9P23Oij
qCXOwbntxn2416iILYHRFHd9Oo+OY67VaSl2jWyH9kO3y+apI/K2ysOUHtvD
Vhfbp4LMlzh2nF6T+Ov5KRmXZ33osaJRuTnel8RPie67s9yDjtMlf7OPvlBo
o+AdfmJfVxVTLkrPQwkRe2IkPe9F/uYeKZ2fKELm43Xi/bKVcSxajoHmvka3
avTapPdSuZw9xLfq26YSVHSr4fTrYuKYiQ+V9OIA6lvZov+AvnDp44ZZ644g
JilD9rwu/hfMtqRjT216rZKxn/R7ODgzpAE1V2vae7vMGnP4CX+6jcrZ43Fm
8QPq4Ew3qh1tpxxRWP9KPDeOakvNlusk+/8LwXmzDBVUVQinboa3adLSxsM5
31pUmXrPviaTh//SuLZifT4JSVIbJHPeX4S+6Awbwxa4J7NIykW/lkZQ1a9O
fMdvizUoDsr5qRBpoQ+RLp4wE+SzEHr3MFoZ0fKjW60l3qZ+Xy5WAScN3WzK
i8ehsjnF7+engpxYhH0QDz4iO+nx77G0fwvJGBi3KYCeNxvakv5Npy1eFdPn
+bnpiE4Rx8qXYv9pdvRLxOUIxEVhI/ZNANysaf9JVU0fBx8n0/dFvUA8q+i+
DyE34VKfPv9KVaMsjgV/pnI4dK9N54OrPuiy4p5ZMTI+vMChl4l4tX+W2Ceu
hO3hip4cw0+l+GlBAkbUpOW458R9xX4z591FbL8W94t9C0Uw/PQvALEvp1zp
PSemjcchTcpty3i4poifSrnvJfJT0i/v17Wj7KqGoQnW31CMURGyE7HU1xs7
Ir4hoEIOX9t/+nTDQGqu03FRACUbor0YHq0qU35jtz2ye8YfHh5P5WSQ5qdZ
72+h7ZTLMnN/oly2J8bT+VOMW6+GKP1tdOB2GGqqUtzGbcV1hZwOIn14ZqE3
hiy/Scnmnsk96LbUrY/TEfLl5mBxdzrnSV//0uQyEyL5ki91poaaXhUcfqYY
0yPMeohWotzG2nVw52PR2uJv5aeN5n6Vn3qL+enSb+CnorULP0fx2oWxPW6G
K+4/To+6A5/2HfE8MQ+chCewLktz9rpuO8CSLwufhUVdG1BxlENOFsW2lsxP
geUDxLypfHOcVLLPLSfhOQbY1se194UxZL9p/2kJyIkLgIV+yftP2Xl5P1mD
yvLT+9/MTwcp8NN4BX5KRlnYavrsS80yGL7ptuIaqpCNYwuHw2t3ZCnOZCuZ
n+aG7qT4nW690eK8WAIEbx4s5h862HwvWeGZvMjTVCyIRpUueJIuVyJhHlb0
qUH54Nb1LWHU0AcfxQIsSAtA4zKq0NIrj0rGtbHxqWKOlSvrfej1DwMLrAv4
oFDf/Jx4zHbpgPV36HJ9Mz/tJ+anw5TxUyGW+tSk5LzrvMMyVwQ84lNb6VH8
dEHAr8nfm3R3NsqL+l/PDJdiMou9LyP8Ehqb6kNN1wgeCy9APt26CKuGiXmO
bnPck5ugFOaFoXc1Wq9Y91ta6rO+ww9MEvv6dgiRCgcR5Gdhx+QhaN2MjrVc
fSGcsjfRyXTjCHOfw6acKgxrtSQ8PB+8zE84dT9RZqyG3tyOxhU0sPj0V/Ko
8JIwphrtY7Ybd1NBTjIiA1C3vA6Mrbrh8RfZmu6e6kT1tbXvzhLagAe/LqZQ
UdfH0guvST1y8TxEfCYi8d12DxLlGtREr4MR1NkxIXeD6fxHonjcCbSubzDo
JKRTMQvzwuFSgV4n++d5NpXPOzzqE3F1vqAflftLFz5n4mX8kuAj86icSXX7
LpORW2FOEBoSu2lk3hExWQXIjI/Eq7TS9ejRhZ5K+GkBHky2xsnnsufIcFOD
0bY20Se6tXAp4juZjoCDRa7iPJH6TXEnTp7fEn7aiuankw89kLmS+HipUn7K
Dd8Bn7H7Zee5BHnYNtae0iOdJ2+DaHynXJ8lztFGfJnFpxVi0vmseGyZ2g83
3onrK0iEg+h8YU1j7HkkGxMcH7wXlag8nG0RK5W/N3SdC2afks2NL8iNwuCW
hKOqqmHhsZfUfW9XO2P+2Q+y97EiMaC5MRXru0wk+6QOe73oeUJ1rWo4/ESW
I1N1/xyK6f164O7HbGS/PS7JY95+7BFw5Qzgu2vi/EhVe5cq/2dhHR8u+T38
ND81DI1riPRwOSwJVcJPu9P81MpxoQI/vSDPT4lsHxvXkJIP3erNcTEyR4EL
8DLDMbSnBy7G/cABeaUEw0//AghZ2GJH78vSrWSFx3G5VA6hgnwOjs0qPHvc
ArdSSS8U8Cj5Snp1CJVFeqNiO8TlKzHenDdoJdm/boKFx5+AzeGCy+Ui6/N7
jGlbFW37ryxVcWXy98rxPCEvB0M7mMGI6NbCsyxFtryHDR1Hp91qMT7nC4hs
ELnIS8bCnrR9N+k6huhdIQr4AsJPb6ByhdZ4ImeDuOHrYUxsbb0xgZTMCbIj
4FiZbjcVdR14LzqNTDYH+flccLKTcGBaF5Sz9kWc2BBlPN0pPnNMBfU6TUQm
p0CSZy4//Tm6i8+Ab090Tj5PJOPfq9w4GNq+OvWOmoN2Q/boBAHCtrpCVU0b
zruiZHyMMysGFcNPCzCmO33mRuNld7+zLMUjJyoQVcvRvltZy3GSNUnlSIN7
TVViS3Qw/5QsNyvIiYN9XVoXj7xaaFOE+HBkFOVnUPyXyMEVwlE5XJHscZAW
fg32Vsbw3lPI5fiI2NaTWhvXqlADgdGyzi875Q1squuhWtv+RI8VNSj79Soq
j4boG6cjFOOIE64spPIuia4b1GiCU2+/SMqQEXMXvW0qocO6UKl+4GGOs0mx
/HRgx+oUL7Db+FTmWtHcr4ifRvyL/JS0277BlJ228tiAjJ8W9MvDGV9x7lgd
c1wrMTayADd8aQ6qYtgHH2WmsgV4v5KeWzGp1x3xhcklCf90b2aEwnjlvktO
Eb3EofRSXmYytvm2RNX2Q5XEN3wLCvmpOoZtvCprh4kN2jXUHqpaVbDtudR8
BS8eo8QxpG2HrlI4gyRg7QhqbsZvv/K4wpBzy+j9kaq68L0qdcYfqf90V9p3
12/rj2wlqiTz7QWU0aZ1tKaBMVZdek3p6HyRjk4IgZ+DKWz8ijgmN/o4fa4X
+Vv2uHiS6O9NzxmY9N2vNL5vx2Q6p6qezTDEi3SgSO/yOAg/NRbl1VUprj7k
WAj4Uo2RFnoNVQ1IWbUscF1pIrNvA5+TBpdmJtRYarH4ntyaMo28+CB0ItxG
XUMLg/+5J7uWWAhhOjzq0n6avv0SKEbxAMcXdKL5v54tbqeXzlGNOCjmp6r1
EfCZHoNC4gO9PLMQ/ufvYHhddYpjXIrKQfDx+dh8h+b1WXdHQo88V6elHzJ5
fBxdPRt3ZHIk5WFiO9om6pg2wsL9t5GZy5Fp8yJwcKoPfW/rkZdkeKZQwMa2
oXWhoVUB2x/Iz6/kwbcN4UDqulh54U3xlcyPgIOxCjTKmOBWZDZCLm7EhLP0
2R8C9hf0blqZyjV1NYGF0DMrMWCXOOaKGw9P0dlaKmUwN1hWB+e83E7NO6sY
9UJ4Hgd357XHhssRyE16CWsTTagaN8c7udjVnRNoPjd5u6yty7w5gIqxsuy+
ASxOCmYM9EZEKdNq7J/Tk7a1XedL2doC3POriUFrL8vqDOIbT3CyhqZJY7xK
/v48W59vzpfsnbYbvAacgkIdKCTc9z5aUfxdHX1WXyL+hmgc0pc/Bc6g+KVu
nfaIZ8ny07q2PZAqR5ZCL6yhvjOcvIcudxomtRL7RSoacJi4FylZeeAQPZuX
EYVh7SzRYpx0bt9cuDfUp8piN/csuHyRfyZAPvszNvSzpM+pNWyEx1m0rqD5
aXfY+axQ4DoH5jpTvHPX3XjQ/LQz2g9SjA/ZM9MJqsRn2x9Ez2vnh29FVXVx
fiojW2wPjEae2F/NSXwJl0bV0WHCKTrmW5CF9e316LxoZcxw4m0y0RFiT46f
j/PLXOg5x3KtEJydX8o8V3wETKfnaS0chiNPTlHtGGtRDD9lwauRPuUTzTlX
On7KSw+HbW06Bs3jAn2+bAE3j/i2Im3OxpF2tM2wsJsuF2NUgONj6XNvGrvP
lPwaF3wQJjp026prmOPggyixL8RFSnggnKtpYMC6q6Uq64+C4ad/AwRIPD8K
ZVVpfVW9YWv06uWEFg2bYf7SKWKfRB2NOvaEY49p+JTHxs11HvQZT5omWHQ7
XqkNf7BvOjUPR415NU0Ym9aAuVktVDDQRRPP+QhPK52SF6TdR9sq2tQ8WTff
pXgWnUr1+5fop5jXtw3qtfHEzTDp85h52DTMTqwv1VC/dWe4ODmihaMHFi6c
DAN1wnUNTOHs7o7Rm68jQ8RPDTXQqv9CpIg3oQi4Gdg1uDEq1uuGp5I5YgHS
Xh1Bs+q6En/XwKgKLCzMYVJOH2Xr9kJgpNS8p5CDe9tHwUg0VlU1Ucu2AwaO
HIexw/uiRdte6NjQgI470a2I7kNn422S0g2RJSIt4g58WppAVdUQ3jN30+c+
krHy7sZWWFcsC/c5+2V5Kz8b89xoP1bTzAORUhf5rEh0NKd9Z0P7BUguLvDl
O5CfnYB9832os8Oob+rVwP5HxeVRECI79CCsdOh+azN2i9Q6hhDJzw7ArAx9
nmndcaeK1j4LsrBrYlcJP1Qj/pFpTXOY1TSFtqo6Biw5IXv+jjAPB+a4Q53I
eO1WPrgZSucFYSW8wlTnBqjZxgd3I6XWYQVcBCztIYnfm3HgqWJcCp+Fsws9
YKBRuHdTC5Wr10adWtWgp6EB5yk7IXV0AwTZr+FUnebsNsM3yPj1gryPcLCg
+6GM42KkSPVDVkwgrIxp+avUfQuySrtQowQl8VMhJw69xXMzmmWr4HbU98uq
IgQIv38YbSuqi9tMG3Yzjin4Q4Xgs1MxsXUtsf9eEWek8rYU5HzENBu6XXQr
N8D9j0Xl+3B3FxoV5iEhslOmoinMzc1QqbwBKjbzxp0IxTX3b0MhPyXfrGiJ
0csOIeZLHrhZ8TiydDAqljXByPVXwZFTlmmRgXCpT/x4nUrwmHcYn0V+M7GL
YVc3oFG1avDyP4F0ZbkpCbgpL2BTRgcVWw9Fmtwtz/dMotakZp6S37coBpHj
5/sn0OcLUm1B62hL81ooq6eNRh7zEZtZpKOfH5ggOQfUbcFFpZZTyE2Eiw3N
/9VNXfE8VVHHfwjcDh0VOiawSv3WcHHphbbNW2LA8jPoY0fPr2mS9hsyf6/4
CT6C9tB6WrQe5nc96QesthApL0+jkxWRXQ0TjF93XjIOuTnJOLdlBpqamcDc
YRjOP4xQWPuh3lCQizv/eKOMWIfpNvPDRyV7MhMe7oeeJn2+X/1e/mQMff8k
DufDBVho0t+x6uCJZcsWoH+vHhi35gJYGY/RUo/em9Ctlxsmbrop9mP5eD6T
9hNr2AzA3NEDsOr4I4W42XNL+5JxU9j3qjCsWAudvMbimpI1Dlb0OdSvpE3Z
vzBxXLSAl43Nfs6o1agXzr9IVOgTwZerqK+tAq0y5giKLyE+NecerIkMauob
w89vBEbM3inJt5Ob8gyNjNWJTTTFhKnDMWbBbsmaDSvqJirpaUCtqhOi5SZC
3u2fSttSwhHGjB2GUf/cgkiFxd5dhvKk3ywcfcGV5uK8OPQz16TGwNFX0rEG
BXgxU7z3tr4H+rl5Yc+dSJQKxNZO70nrK40qnXBP0iYiflodGkZWWHUpVDJn
kvfpNlpUM4TzrBNgK50k+QoEeTi9yBM6IjlV1YZlyy4YNsYPvoPc0bi1K5rU
pvWjyPdxG78CCbmi/aNsXJxhS9k2NUMzHHhelCNLxE+N1fTQeuQWJBQa24IM
rBnSHFpmvfBEKhdg0usLaGGkKZEt3TJGMK1iQmyfKtoOXoEkucCV43PF6yCq
+rCx7wrXnl1hQ8q7Zu9BmJenbXyVRp2w5rxoLzXNT9UNqmD83sfIE7dNQXoI
vBobwdJjHVKoBXaan6obmmLi/qeSNciCtFdwtzZCPe8NhIcUSm0BLqwaJPHj
VDU0YVKtNsxrV0cZLQ10HbcJyZwiCWenBMO5Hh1zqGZYA13c+mPipPFw69IK
bRy6iucFVGHSsDNWnn3+3fpKwI7DdHEuS8M67fBSSo/yWeEY2JDuuxrEH8+T
akrORzJOqTzQamg99XCpciwIuWnws6PP6lY3aQKfAT7o2a0HrrxLRX5aKJzL
0W1UvlZbvJLK8ZH/JQT9Lej9BhWauCJZklaehdMLXCXnxato6BJfqBbMa1WH
gW4ZdJ64S/k+538BDD/9W1CAU8t90cS6Hiyt6qOjywjci8sVBUPg8LiOsLKw
QBMHLwTGxmLhMBd06NBB5m/gmFm4nSBvf4X48OAAeju2Rn0rC5jXsYRt8w6Y
vuk8WMoM/3eAlRSK5eO9YdfcFvUsLVDHsi5sW3TEmMUHkaLEV+DnRGHJsK5o
WNcCdRvaoMfwxYgidjY/LRz9HJvDgjzfrudERBDOzPr4FJ4DhqO/mzPsO7th
nJ8ffNx6wL73GARFK8aEpb4PxMhedmhU3wp1zC3Q0LYFBk3fTPickoITuX11
cSOc7ZqjrmUdWFg1QLuuhP9EJWL72A7o0m8CLgXHKHnw21HA/oLd/iPRppkN
LOs3QTu71rDr7Iq9d2RzVXHSYjBtgJNMP3ZzGYq9T+MR//wS+vaQ7WOXAbPw
4QdCMJJvz0XXjh0UZEf05+QxCi8/y84Rv7qwFJ0dO8rc5zxgJrGNPNzYOxcO
cu/oO3WHZE5atI5+Y8tUdCTyYWlhTtq5Ptp0ccUOJXGMNPiIDtxN7IsdGtZv
iNYdHNC6jR18/fcgVSqvDD87HHMH9ZH7dhcMGjcTTz7JxVDyObh/cBE6t2xK
xg8pg2U9tOzQHevOh8isQUQHbsQA5y4ydfEYORNPE7IQcnMvBrvK9UO/sTgT
w8GL0xvQq5P0tY7wGjwRtz79nDiZvNQX6N+tA7oPmogv8hyR6NSg1X3JuLZC
e3d/4g/82Hjmpb7BACdHpbLh0Lk7Jq66JrMviJf8CKM9ZWW3Q6eeWHLkLTgJ
ARjh1l32Wld3HAsqys+QHnUXw3o6UGPWzLwOrJu0wMBZW5GS9yMLwUXxvRNW
rcNk93ZEN9WhZK9VBxccDirh3EReOnYvGIFWTRuhfuNmsLe3QxtHDxwMfFf8
MyIQG3p9fAvM2qUYT8z/8ghdbdrgRWLJe9dCb+yCc9sWlI6uY2EF25ZtMXvH
dckciYCdiJWjveAo0y+d0G/EOFx6Vhg7V4AbO+ehf0/Zvuvi3AeTpvkjQjpO
m9jvsBNk/DYn+onYlcbN22LxkfuUbZ83qhfcR81HYBjtF/O5cVjg6y7blx0d
MHzSCoSzSi9zuclvMX1gd1hVM4K6fmU0a9kSNo2s0dZ5CA7del28V8BLwvLh
fRRktFO3Ptj0THZeQ5AXh/Hdi8Z11z5DEfDdMWwChF1YCfsmDYhtIXLarA1W
nHwiPqvzE8Z2qE90vA2m774tVWYh0h/Mhw3pzwbNOmD1hTAZncfnZCFg92z0
912AJHYubh1eCzeHZqgiPkdHXcuM+Edf5MohRPTdA3Bp1xJNO7ljyoyZGO7R
A5NXHUdaMVXKDFpE6UnngZuLyddXWMV0TO1lizpWDeE9c49Mvor87Fj4ODSC
Zb1GcJ11mHyrqM/jg8+iq0MHuM/ZoRhz/Oo4WjSqh0ZNWmL27gDx/LkQLw8M
o/pi5pZ7MhycnxIAD6qfRiBG2uEnd6XenAbbhtZo180b9z+U4ixSgqjATRjZ
10lBr83Y/4yUvQAv17rBZ+AAODk6oN+wsRg/eggcWtph2rYbxe6H/Cbw2Xh0
eBG6tmpCbFAdWNZtiM7u4/DmSyYWDGyPXsNmIfAdve7NCT+GCUM9FWR75JIj
lI+d//Es+rr0Q98+XdCtlycmTvSjfATnftMRkaWoN/mZoZg1sCdsGtQlesUS
NsQ/m7LpOnKUBC0IuSnYPskVTUmfUXbS3h1XXyciN+EVXDs7YsrKffgomZwW
IOboFLj5DEHvTvbo03cYJoz3Rfd29hg8f6/U/LsA0Ycmwt1nMLGT9nDtNxwT
xvmim509hvrLzdNThcjHm3Or0KNdU8o3q2NRF03b9cDSQ48U4mtFyE99i4Uj
ehPZqIc6dYjf16Q1pmy5jnf3D8LerjPmbz2L9O82J3yEH12OoZ7yPrYTlh67
S/zeYAzr1U3mWs9Bk3Av8jNCA3ail4Osv9R3ygbklmJuIzfqMrzaNaH8Wdt2
rjgSnApOzHkMdOkqW64ufXDgdiw40Sfh7dxZ5lrHHj4Iiiz0lwV4dHwl2hE5
pNqW9HHz1l2x9vSj7y7bzwTDT/8ikMbn5OYgKysHPCmZFvJ5yMrMRB63dHMc
opiHnKxMZGRmgZ3/c+dJCvLZyCbvzszKBucr7xbFRbGyM5HNYsvaJm4u9bzk
nHvSDnS8BpG7fA5V9pxctkLsnezL+cjNyUJGRiZY7Pyv7vMWFHBJuTPId0lb
i1+cz2F/9bnvAY+bR/otA1nZLJn+/H9CAZdNtYGonfO/Ic5GJOus7CxKVvO4
Pydolc/jSMrALfgP6Rsi8zlZWeAoC5L8G0BsSOGYzeX8DE4vu/9UJEvZon7P
Fsnet7SREAWcXHrM5uQS2/ht7SogtjQvX5lckf4hdfuWTwukdTTv3zmIjtZP
snYlP5/3r+XIELDewd22IpqMPojY5FSqzfnF7qkQIvvTa7B+7LCYUkIIbh6L
yGkGcrmyfcPNI/Y6R5ltIn5XlsgWceXizDk4MtEOtT03IFVqTV5kj1I+vcVE
54bUuo/DXOU5EASUfhTLCffnyUk+m9Qvi6UkvlgormNeyfZXAeQ54svkcX6G
PAmQy8r9pTZU1K6Ux0F0Kof0dRblz/B/2lgQ+TGFvkChCeJyuN/3flK2wv4R
7f0S+V2sPM5X/aI8VjYyKXn5ij0V+5+0T1T40//YuwqoqLouSpd0iYWkEgY2
FqKi2B3Y3d3d3a0fduunWJ/dhYGkYgLS3TkMTOz/znvDBAwIior+b681a8Gb
mTf33Thn73vPPZfwd07RfsbncoS/S9qZJbCZtL8u0ntK+TlJCPw1xSnTMsD+
li0kZWZlkTKniXkfj5P/V/h5QRunEf9RnpydJ6jbNJqv51WAOmL0KQMGDBgw
+Pvxjfy9DCoI+Ih44wFXK02oV62HZVu24fj5q/B6G4RsGQd58PNSccN9BfpP
2oGEIslr/yzkfjkBY0H+qXuyY1QzP12mzl6pM81d5vsMGDBg8LeA0acMGDBg
wODvh6Q+ffq7C8NABgS5xgIvr0JlOXkoKMiL9puJX+po3GEAVm7dgyPue7Fo
6jCYaWjAcdA66T3rfyhYgQegLa+OKZdk5yvKCb4GHXklzDnCzK8wYMDg7waj
TxkwYMCAwd+PNIywVaFyyU04cO93F4ZBYfBz8WDdKIyeuRwnzl/GzetXcfLg
HsybNBgOlsYytKocLJv3wj9XniGlmBxdfxzyk7B5gB20LFxx4510vl124gcs
6NcMdQauQbiM/YQMGDBg8DeB0acMGDBgwODvBR+JIT64uGMcDIT5UA2auuHy
wxfw/ZLEeJiKhBI2nmUmBOPmpTPYu3M79h0+De/ghL+y7TjZCTiyahyaNXfC
yMkzsXL1aiyYMQGu7Ttj1ZE733HuLwMGDBj8eWD0KQMGDBgw+HvBR1pMEAIC
/OHvL369ffceXyLTf1m+HwYMyoI8VjbSUpORlJSEVEEumAqQr4QBAwYMfhUY
fcqAAQMGDBgwYMCAAQMGDCoCGH3KgAEDBgwYMGDAgAEDBgwqAhh9yoABAwYM
GDBgwIABAwYMKgIYfcqAAQMGDBgwYMCAAQMGfzd4GR/Ry84M1vYN4Ny+Azp3
7oxG9hYwM7NAmw6d0bmTK5ya1YNZzVqYfDPxt+VoYPQpAwYMGDBgwIABAwYM
GPzdSHhxBMrarXAvMBJp6RnIzAiFm5UilDVawj+e/J+ZidSEYAx3aoa7qb8v
gyCjTxkwYMCAAQMGDBgwYMDg78bDU7twJoQl+j8v+CCqK8rBZNAVsCTk6NED
m5DzG8pXAEafMqgo4HHzwcplU33k/wF8Pv8PPduCj7x8zu8uRIUFn9hLdv7P
tlukDXJZyOcy9rF8QPxYXl4x3oYPTh6b8l8/tQTcPHD+r9uT8Ij8POTmMbal
vMEnvIzNzvt9/oYvGF9ssP9P2pbHyQf3LyAynPz8P5SjlA48Dgs57PzfXYyf
Ah7xJxks2c+WnBwr8R8X3qucICevhTle2ZJ3QFJC3E8t47fA6FMGFQLcNByY
4IK69Zti6+WA312aX4LHp9djp3/W7y5G6cHJgOd/JzBrZC+4TD6M3N9dngqG
3LRIXD22HaP6dUTnNT74mUws5P5BODrUQesh6xH/d7rXXwJ+fgZe3TqD+eMH
oLXzGLxnSbxHuIvvg4tYMnU4nB3b4G5E3k8oAQ8pYQE4vmMZuru0gPutrz90
t9yMGAS+fYu3RV7vEJ9ZMTtK3OfHWLd4Fgb374H2Ti3Qb9PVUnv9vOxUhMRm
fJNDRwXcxvLlG+Adlv6jxf1jwMkKx7+HdmLOpJHo7toOToMW/eK1EB6iHp7E
srlT0Ld7Vzg1b4KJ627/tYyOz2Pjq/c9bFs2Da4u3XA1KPl3F+n7wGXhw/Nr
WDVjODoOmIY0zl+qUHlZODepCSa43//dJfkJ4OHZvmFoOPfqN3kIPy8REx2q
Q8G4Nb78DBf3A2D0KYOKAH76CzRUloOcnBzaTdjxu4vz08HPi8TwOhpQcViO
hLyKb/9zYgIxsU8n1DTSoNpIu/0asL79tf8bxHmeRm/nZtBUUaTqx3TiM/xM
NXBiYT/qd+QULXE15v9jTaK8kfDlMUb37YY6ZkZ0XVZqCR/h9HE60Uyj+3dF
QwtD+j05bVwILu8ZmTw82TIRLk2soSxH276VZz/+0B1Tvz7F+oWT0dhS+Ezk
pa5riUGTluJV+O+M1Coe2cmhuHftNNpbq0FOXgVzTr4o3RfzYzC5qQF5Rg1s
vxVU/Of4yZhWT4WqC7OuCwivKZ9yV3RwsyPw6L9zGN5cj3r2JsPX/OIS8JEZ
7o+rBxdAm+qLSph7JfIXl+EXgZ+FA3OGom2zWlCRJ8+qZIyjb+N/d6m+A2zs
mukGB3NdyJM2U7NyRTLn7+TgX25sgoqcIrpv/u93F6XckRRwBrVU5FB5yAl8
S3LmRL9B7cpqMO88pcKpLUafMqgQIH3g7p5JaOjYFVf9E353aX4y+Ii6NAHK
Aj8mp4xjLyumH2PlZEv9zyeD9tCcnn+MPuXn5yLjV80H8oktY8VggFWVX6JP
Uz/fQ+8WDhi57hJYjIn8AfDhd3RBEX1a8F7C3blQ+Gn6FFS/4aS+Qkut8tGn
Bbi5awLFL+Xk5NH/8KefHpv848jEyPoaUFDTxSW/pFJ+xRMNhHOaI9ZcLuGD
edg/rhFdH9X7IPb/arxwcHikKVVHE3Z6/pYS5IVehpGg7lUb4vlvzLXy88FH
buo7NDGU/4P1qcAk8fD57kpo/c36lBuLwfV0yLhQQJtVF393acoZHExxtaJ5
WucD3+RpIU/2QU9JDv0WVrx6YPQpAwa/FrzcJExuUVO0vuE882AF6+V8ZL4/
jikLdxV559yKwX+IPuXh+rYZ2PT+F64ZcZIxoW71X6JPGZQfQi6tLUafAtk+
G6H+M/WpAOxP6GJYnvqUj0OzW9HPpNkUz9IqlnWRBW7cZdRSlUMlo9b4lF7K
8hLe8PT0JsyYuwp+UdklfjQ33g9NdNVg03fF3zkuCd969ciTaIlC19nBGFBF
0Le0cCwg47cULfDkPKov6nXahKy/WZ4ScHIi4VRD+Y/WpwJEvNoNPYW/U5/y
OZk4PbkFlIT8y2HB2d9dpPIDsYn+/7hBR5F+NiXHrSjZMhKetKIFFOSUsfHB
791rKguMPmXA4Nci6cM1mOmaonP/ZjSH1G6Bl6XlZL8A7OSP6FFTF23Hby3y
3rkVQyq+PuXzkeJ/EBbKuljP6FMG30DI5XXF61PfTdD4Bfq0a3nqU34yxtdR
pe5n3Gkx8awVHTyEHOhIldek5zmp/JHlhczQx7AyqoyjL2K//eE/DYRrhd1f
hZpNZyKtUN1lB+yBDqlXeaOBCP1NHWHXxA5UnNBQ9ye/pwC/EJycKLQxZfRp
RUbYs8MwMXdBPQPa5lpNPfrXqIyUwMvQVasOU0sd2qfZLS9iE6TAicVkK/I5
tVbwy6x4k0eMPv0zwWFnISI8Ctl53J9wdz5Y6YmIjkv6Zu1zcjKpthWAy0pH
YlpxqoWHtMQ4JGd/e68cm108D+Sy0pCQklWqnHLs7FRERCWA/c3gNh6yEmOQ
lfsz6rIw8nFllgOsRx5C0NNDkKdifBXQduE9lG4bKg8ZaTnidiFjNyEmGqxS
5IsV5HBMjolAfErxOZk4aR8ww8UaSqRcpdWn/HwWYiIikJn77bYVxAgnxUYh
MZ1VYhvyeTywRTmC+UhNSS21JYjzO4+m1TVJOb+tTzmkz8ZEx4Fdyptz2RmI
iU+GzJ5SjD7l5aYjmvxGfonty0N6ao64Tri5pF1jkPuN3BS8vGyU3G35yMtO
QUxiulT9cdk55ZonW9C3EmOikJTx87NmcckzR0VEg10K3sTnshAdFYOMEiqp
PPQpn2qvKKSzSrcXmJ+fRfUJqt+Vsz7NCzmGGkr0/QZvKCnutYKAk4qlTatQ
+0gn3Usp53yhfCQHXsfYgcNw8Q3hExWPgv0geHh4aB6qqsnDdcW5QnXHw6NV
fagY71qzb/3UfG3FIxcjmulBXs0I595E/5YSlAZcwqciiU0pjQ8TsN/cgryo
xJ+lJSaiIO32j+lTPnWv7JIdxS+BTH1KdEBSTCSx8aWZmeYjMzkOUYmZ39hb
QLhmttjocvNziF0sDWf7PvCzPmJEy0Y44fMFg2srUzay+tC9v2lslDN46Vje
pwXmXg/DqI50TL+c+VTElfBwuZ9PwIhwPeMBR3/KvOCPgtGnfxB4bHz2vISJ
bp3gYGuHWjUrQ7WSITqOXAGfiDTRx24eXY3+HZvA0twc5uRl1bQHNl70RGas
L+YNbQcLcs3OsQPGLjkmHW/DzcT9kxvRo10L1LW3QzUDLSjqW2H65rOIyS7g
d3zkJEfC69FVrJjYC4Y6zfEmIQEeG0fBWEMRSlpVccg7RnTL1MhA7F8+Hk5N
m6JN27ZwrGeOGnZtsO7YTaQKfQGf9LHwT364fGw7ereshbZjNhZ6cD7CfG5g
fOdW6NCtLwa79YWLU2t07dwZMx5J52Pk56Xj1TV3DO7SCrZ2djAz0YaGvimG
LTmI0GRpu8ojHPH+idVwbeOMXm7D0LdnZ7RxdkFH5+EIKDko4rvBjr6PBrrG
OPwqHHx2FCZa0uscumat8ClZ9mZJPicbn/1e4Oz+teje3Aaq9VYgPi0Gl3fN
grVRJer7CrpWWH7iiYzRwkNqiBfWTXWDo2NTdHDtiOYNakHHxBYTVh5AIOk3
BV2Ay07G/F6O0KukQGtQkxpo1aoVWrXpivNB9OS7pD5NSgrC7tn9UUVLibaF
6pUxcs0ZZBXRDcTGRL/DjsXj0aqhLexqW0BHXRXmTXrg2L13Iq0n4AjB77xw
ZvdytKljjpXXfBH66l+0M9ei7m/fdwNSviHi430uorV5ZSgrylO8rEbDFtQz
dBk8k/ThgnJx8fb+SQzv0Q7169rDopoB5BT10Xf6ZryLyS7CjwUa8M3NQxjW
tQ0at3RGW6dmMDUyRtdxK/H0o7ivS+vTp4j68gxz+7eAmpI8dU1RrzY2erwR
Pa9Ao3z08cSpPavQpak1lB02ICElChe2ToOFPp2HSkGvFtaefSHRrnxkJ0eR
8fcf1k4fiBpkfJ4JL7pSy86Mw60j5L6tmsCxTXt0aE/K3qglZm87iSObZ8DB
vg+i2cRuZ0Vh+9LpcGpkR9sKp/mIFfqzwHunMGG0G+rbWlPv2fQ5hWypyiHt
GhmAzfNGo2UDul211dRg2aw3Tj/6IFvDfy8Etu/5FYzv3xktHFvApV0b1DQx
QdOek3DtVYiU9uewUvHw390Y0KktOvfog17dO6J2DWO0HbYUvpFF87f+iD6N
+fgUy0f3RkOHerCxrAElBSU06jYet/yiimoh4vTC/O5gxsD2sG/cCi7tndGk
qTPWH9yH1rrlpU+58N7QWbR3YM+9CJmfYqVG4cn189i5ZRO27DyAl58j4eOx
F0vnL8bLWNkr/+zUSLx6cA2H3fdj6+Yt2HfkHN5FFTNXSPx/bFAAbl44Bfd9
O7Bi6WIcvnAHYclF65Ad5wM7Iw3I6znCL0cwn5OCNw+uYPuqBVi2fhduvvgA
lkRlpsVH4H2AD54+uIOzR/Zi75Oo4jUt4SLPLl3Bh2JsKzcrFg+unMD6dWux
c99BeFy/i2cPzuOO55fi7ihd9uw0hAd/hJfnY3icOoi1Zz5R3IjPy0ewzwNs
W7kQS7edRowodzIf8cHeOLp1ORav2YO3ccVzfV5+NoICXsHj7HFsW7cMyze5
IyAitaDkpO+9wIYxTlAVtLW8EkYtO4D7D54iJkv4rNxczO5cl7JtGz0jhffM
wpv7F7BqwRys3XcR0RnFRHkQopcY8Qn3r1/EEdI/1y5fgV0nruBzbMn5j9Pj
QnD38glsWLMGO9zPISb6Nuw15KBpUh/vkn4gooSXir1Te1LcRWCLats3x8QN
N8AiduHVvnlwaVaPui54NXPpiwXuvrRNINzyiftytGtmT96zwtwTT8W3zMuA
953jGELsepMWzujo4ozaNauhdovu2OvxFKkSvoYvaIu3r3Ga+KZWtQwwba8P
Ir0uoJ2NEbU27DCacCmebH3KI/771I4l6OpYmyqfY7vuGDtpFm4F0GOTz0nH
9f2L0bpVW/R1G4S+3Tqiddvu6DR0GUqbbTr181X0cKwrqoPWXYbh5LtM8DI/
UPbJytKCtu+17NF3xHQ8CKP7HTc1EAuG9YCdtQUcWg9CYCZt/CX1aRIrBR47
58LWmM4xJqeshdYj1yI4peiCfG5KBP7dvRAdm9eHnV1tGBMuYWzZHGtPPEBm
wVoKNxvvXj/CoU3z0NquMtqO2oS8lGDsWTAYlVVpu2Vg0QqHn4WX63ySgGee
me2K9pMOIZeUYUwjmjsZdt/8559FQOyc1/7haD5gObEMfEzrZkO3VeXBCC02
BwcfTzcJ+Jw6Jl16/ytLW2ow+vTPgdeJ+TCp0QD3P0QjMysbmekp2DqyDcXD
K9XoAV9RjCgf6RFv0KCGJtVHlVvuQwaPvh50ZAA0rZzwLj5D+uxEThqODLJG
k0HLEZWajuzsbCSHvkQHbYHvI/a3x1qkE2ORG/0ag/oNhEUVWjPIKTTCkqXD
0ahrP1TVVqRsde9jvtQtuekBaG+jh6aj/0Fceg44HA5YaWFoX6sS5BVV4LTq
AdVv3h+bigFdW9B+lrxajpbWp7xMbzhX1kSfo5+QJ+hEfFKOtGD0q6eFzucT
pLjJ+eUDYGw7FG8jk5FFniE9NRoTO1iQZ1BAtS6rId6KxceXSxOgpdkIN8Np
TcLn5iPo0XaYqNriSYlBEd+Pu2uHorJ1D0RSep+PtCfToEnVoxaW3ZDNTbnp
oTh48CCc7SvTdW47AxO7NyA+YiUuepzF9D71oSjQP5q2uJkkPV5ivU6jirY6
HMduR3IWC1weD3msDHgdHg1teXnoWjjiRTS9nipY2xT0qf3CfBqtR65BWloa
eaWL5jNF+tRpMia1sUCnietx4/YNbJhA8yR5RQOsfyW9jyEr/AUaVdPFLPfH
SM/MQnZWBvyuEt6vLA8lNSMsvJ9E2aH7B2egr7MVFKg1ZXUs2LUEberWg0tt
uh/r1GiKz2klqx5Obg4Svr5BfVN18h0dLH8VSz1DekaWcL2Qi89HBqNGk0Hw
iUql+khGcii2dtCmxlFVh+4IS5fkUXm4tqILKuk0god/LHU2IyefjXu7+1E5
V9XNOyKowP5L6NOqg/ajpY0Nxq05jId3PDCkTS1ao6ra4Uo0fX9OahDcD+xD
c2thjtg68zGqU320G7sGHh5nMLGbPZWbR1GrHu4m0+2aEx2ACSOHwkGUn7Va
UX2aH4dFXS1J3TbE9ffxYOdzqbOF0yNeoQnpC4I1e0NiLwT6lAYP/y7qT9+v
+nBESNyOl5eGRe3t6Pca7IZkCFBG8EPYGmpi8QlPUbt6nV8JRcJrlNQqY+WT
5HJaC+Pj2f5J0DU2x8Enn5GdmwcueZ7AY5PoPTbq+tjvmSj8LJe0lwtUFeQx
61gAPXdP+vWH2zugpyIH274Li+jm79WnucFn4GBaH+6vI5FB7HFWZgpe7e1L
jQMVfQvix6TzvMW9OQhrPRV0WeSBdJbgGTjITonErLa2UJQvJ32an4qpjpbC
vmEFr6Sik+dRnkdR18gE3ecdR0RCMlKSIjCyfw84aArmmFrBV0ac14e7e2Bu
qI9+Cw6T76SQMZWMeb1qQNu4KbzjpXmqYC354KyuMDGzw9Gnn5CSmoa4oAdo
UL0STJv0QXihc27Cnx+j2qZKxylgs5MxqX0dGJlawdKInrtTUNXDzBMvRZ9/
dd0d04Z2gLaSArHretjknYjvAZ8Vhcn1q6KSdXf4xiQjOSkauyY4Q5Xcd82F
T6W6x62Dy9C2sR0qqShBXk4NQ28JzhTh4Nm+cTDW0xXucZMnY0RQfh7C/luO
mjpalL0WXK/fcxuyZVEcdjSWDWgBXcseeBgYiah3d2BmqALrnrPo/psfi/2L
p2HcqB4wIH1HQUkVPYeNw8RpC+EXT9tzDisO7a00oGzSAG/jc8Bnx2FzL0vo
6GsJc2cpYNzm20V/m5eDh7vGo6a+ORaeeI4k0n6JwY/RUV8emlWccC9aFuHl
IebRNtQzqYpB6/9DFOlXHx+cRIe+9SgbVq31BmT84IRVfkoAWmjQc6GWzjQf
ocHH5wsLhX1eHmufJknbHTL+jy/pBnmzyYhiiTnSvyv6QV1ZERuv+oNF7DqP
jMeM2ACMsyFtqaSGxv3Jbwg0Kj8XdxcPgmsTc2G9ycFt9ELUrNEIDS1N6N/V
74sQdvHrp5yUN+haRR3Os04iJj1bfDYq4clv1rYjnKwLPqWzqXLzCB8P8pgE
req9kFBa+kuIecj5ScJ+JYfNtyPE886kHyxpQmuxyhb9EJkj3RCsuHdoWFMd
E44Eir4j0qfmzbGljwUadR4Pj9v3cWT1EGEuZlIHaz0KFYKFqZ1s0XLKScSm
ZhIOmYWUyOdoVk0FCooa6LvnOcXm+awgnNqzAvUr0fdp3qE32lbRxeD523Hl
4hF0r6VP81YtS3hGl19QekbwBdg2HolgasCxMbkN/TuaTqt+8blL5Y+McE/Y
E350O1ww78DHgj4NhHvHOuNTMVNgfG46BjQl/VdeB5uehv7S8pYWjD79M8BN
fYGWNQww8nSIVI3kBF9CNSG36bP0P4n3uPh0cQGMqH3SOnB/EoqsGG+0MbPE
ikuBRXij97/Lie3Vw5XAVImrfCQ/mELpJ4VK1XFBwt567Rgh9AeqGLb2X+p3
4z8+w77d7ghKJjooIwgTGunCsMUkRLElfo30i81Dm9PfrTEeUSKqkotdfYxl
6FMeQg91Iz5OF2vfSvPDJ3umw+VguPBZiNZ7vRVmBpY4FiT9udDr64R+RQ1z
PMLoz3OTsLQu8XVV3PBVwt3y2CkY69wRN+N/Qr/jZ2FI0+rETr8Vc2RSjp51
6L0CWk1mI6aE9cF7y4QaQqUmVpx6Kmrr/PRgtDc3oHxzow3vxfdmh2FY48pE
E1XHvWDp3BiCuMeVfR3oucpGkxGcJV5bPD7BnLpeUnyvnK4dNl32gSj0h+iY
8U50zjijwZfEe954mdjqZg89542QpMqCM7cW1KefW8+6F0IzC26UgO4WyvTa
Z7NB8IxiUev6N04dwImbAaWKgc5L+oyGZhoy43vjfC7AhGiX9VcCpa7zUh7C
XpBDVaESpl54K7rufWIBtFQNsf7OF6kxkxj4H6prKVJja6mf0AFI6FPl6u1w
1V8cz5Yb9QS2wlyjPbf4S4xTHq7PFq53qZhj3fmXovfykgPhWFmLqovW2z9J
jfvI25tk6lOBNjg0tT3kVE2w8Vl0oXGehzujzeg5Yyl9CrzcMUGmPiWkFofd
GhXVp7wMrOltAz2XnUiRbFd2LGZY0XFTVRwGIybnx8dRTvA5ooPV0GX5HeRJ
3I6b7IlWOsI41pXX6YusQHTUpq/NOyVeA2NFvkRNwu/l9FvifSHK8z36NC/5
I3rV1kLXucek65iXhqGNdag2sxnpLsrtnxP2CK0rK0C7yTREFjrghBV0BubK
5aNPWfHv4FCdXnvXcNovnJcUgrRlwJn5RHcYYODaK8iRWJw4PaMbbQt6uyNH
0lznZ+Li+jGoql8V0w6/QE5B3B37I1yM5CGnqIrDj6NEn8+M9MEk19pEn9fB
Ic8ocZ8lnGD/iNaUv3Dd+kJqjuDuzr6UjusxaQWWDemFvVe96XHOzcLWMW3o
8WQxBGESdjoj4h6sCb9VqdYUH1O/j8NGPjtKzZFZDl4lasPc2Newq6SCI14p
pb5PTowv7E1UIK/rAO9MDm7sWYARCw8iLouNLSNpm7j4+CsEP9yPPiMX4XVo
Mj5tqkNdt+2wDlmFhkjix9voUdcAZo7D8Uko6lgx9BkQhq1GSJ0Xke65kPLP
6uYTEVvIOGaFnEYNovvNmg1FSlYids4fj2WH7yKNnU/am15fcVsinRtGMH7X
j3KCooo21nj4S/RtPj6ccqPmXhoNWI9cyfhLwt/uH5gBbWUtLDrhKfoOJ8Eb
VlqCOQYl9D4SWg5MjovA7W2peUF98zYIThMbHn5uGMZZ0+t7I7Y8lv4an4Wl
3Www+U6isGw8hF9bjCqkbox7HEZ6Id2cl/AcjauqQU5ZG+OP+YjKzU9/BUc1
epyaNx+Jj2Rw8Yj2++/YPpx+HEL1aVn6NOPrQ/RzdsK8f+5KxQFQJckOQ5fq
utBrOVZ6DY9whamDRiK8DJqezw7FcBt1qnyjNt6Qei/TZw3FBTWM68A7Wlqw
JH7wgLlVL7zNFLdQgT6VU6uMcTtuIk3Ut3g4vaQrxae0W8wU594htuXZSmcY
2A1CKFv6Gc/M6krbV426uCMifDxcnEHPo+laNMMxoo8Kqoab+hKt9YltUVDG
xivvSl8BJSCf+NIRDapg190Cn8DF7K50rn0lhwXILOv9Yu7CXJiD6EdePedd
+eFxwc+Lx4aBjTH3jK/oXqvcWtC/oeQIPxmxgKzEMFw5vQ9rVq3CKvJau+sw
nvqH/GBJyh+MPv0TkA/PuXaQ02yAWyExiImReIV7w60y3dctXMYWitvnYO94
Oq9+Zeex2DW8NprP8ygaa8/Pxry2epAzGgz/COn7RwffhG0l+uyybv+8En0l
+PR04RizwZPkom3kf3YZeU8R0/55UOQ9Vtg9DHJphzX/fZbwfzycmVFLpj59
t6EV9Qz6TqsQni7mIqyQu5h2Uuj3OClY0sgQleoOQHCM9DOE+55BlYK12cG7
6Lif/GhMNJWnyjjpqLeEv+XBe9863C8paP87ke2/FsYmnfCxUDDJv/P7COtS
Cavvxsj+MsGbTUPpz1UZjnBJksLNwConWlNqdbki1IY8fD3al5q7Vq89v2he
R4LU5+tEa9YLzhTw4tLp0yL5kch4vzjRmS6fzTIUdImcd/thSDhp32Ne0v02
JhJ3Z9HrcoqaJrj1voAP5mBIQ02Kx0478wrfg+L1KR/H5rcj141wyT+iUHlC
0MmWnmPW63aA5go8FgY6GkPXugVC0gtVIDcb55YORedhS5FSwCFKyo/ETcFK
G7quHUf9KxGPysfL5b3oeqs6RmK+RvCdVCxsSK+Zm/S9Ls1Lvf+RqU+zY1+h
rqEi9Ot3QhKrMLkh/G59Y5n69NXOicXq06ODiurTbP/t0JdTg9u/74u0660p
tAZW0rPEs5AfzBnKTcOO5oR3qtTDoyJnU/ARcGkF2nQYgidhwnbmpWJTL2sY
VbbHxQ9i1sGO8YKZMeHKiha4kSZ9l+/Rp++urYcG4SeLjr8p9PwxWOTWkL6f
jgveCYt1cdlAck0Fow4/RREQrVde+XsjXv8DI2V63nDgjWSp9z7f2UHZ0VoD
1hSKZ+Pj4MRO1Pzd2PMBEtd5pH6XQZfcr+24wrm8s7FtbEc0770IEUKBxedk
YFFvWyrWdNI/jwt9nocni3vQ9VJ7MURhHvxMrGpNx0c0cR6CjV7pUno/9Mpa
kZ95JNFuoTcmUnmVLduMRuZ37tf7cnMn1EgbKlTvhMBM4VghuuBQF0c8iil9
LGq09zFUFqz/th6EmOdrMX2TB/0M/DRMclCnfMyB8yfQt/M4ep8M8beHW9Lr
gE6LpLV6brwXelSTg7xKVZx6K4zuJGTpxbHJUJeXR7+FknoyDzfG1qHXYVf6
F4oL4OH9bkeqvVuNP40Tk9ph0zXhmjAp1+LGatTvzzkqnovj5afj6LDaVHnt
Rp0rsq6b6L8DugLbb98e8QVrcMTue7mPg7K8IurMuCl1tmxejCeqaRKtpmyD
WzI4wneB/R6OhgqQUzXG8dfSZ6m+2NeFmueo2W6M1J7H/MgLqGvbReST+KxY
DLKvSp5TE7Nfy1g5IyR385DWwjHcGe8LNjWwg9BHOE7HbHkus3jS+jQOcX4e
cDCqhv2PgmV+npv+GS1MtIgWM8Hqh+FSe+pvnz2P0DKGRN/a4UatoRq1m1Zo
P2E6+tmpUfOvy69IjnEO7i5vik6b70qNu5LyI727uI6OcaraG2FCt5gX+wKm
CvJoOnFLEXv42n2CSI/NPPFZdJ+7a+n5cYf+iwo9RQ6mtxDEMylguvv9slWA
TPBwYfkgWA06KdWnFw2geY6c1RSUtXvysqNw5sA+7Nv3Y6/br0J/OMbI658J
sGw5HUkS/nzL8PbCOreD50+KBfwVYPRpxQc/NwJ9TQjf1rSA27BhGCb1GopB
bm5wI6/RC7aAVWhfeUboY9RVU6R8mL6pC94nFY205yXdgb2KIFbdCYOLvf8g
zDjyWtQaIQX6VKERfIvMz/CxfQLhtAoq2Hv7aymfkoezMvUpsX3h/8JGQ46K
0TW1b43NF16jcDogdsxrmOupoVJN+0LlJ6+hQ6j6EbzmrDsmzIXDxfPN7aEi
4NHqOmjaeQKeBUnzuXJFfiKWNtRClwXHi9ijnKCLMFOg7XfDgSuKvUWx+pSX
hc3tLaj31Nqep7knNx3LW9Fn2Gi5XpSZw5Of/R5d9enf7Thlr/Dqd+pT8r07
M13o8pnPQjyHvvZ4aWeKKzfvObBIuwwdTLeJ29AxePSpIBayQJ+qY9lV3xIq
tHgUq095SRhXRzDHbozegwv382EYPIguz+AZR5AqsHOJ12GpSjhw43FILQ1P
KEmfEh6+uwFd102HHAW7VPo0Haub0fFjhl0vSbVhcfr087mB1JxDvQ4zUUSe
lps+5eD+HCdKz7TuN6TYdh00bCJehKYWLkSZkBt+FwaC+A3rsUgupZvl5uUg
NbOgtviI+/AEi0Z2goaKIB60Oi4XWhoruz7l4/TchhT3b9FjcNF+NHgQ3a8H
T8PrZEEjsDHeyYhwVh3sfRBUtMDllh+Jh7srmtLnteo44I3Eeggv9TU6Wwg4
XyWc9S2Ut4U44/EdLCCvaYYbn8Rnj7Ijb6GRHvEdipa4GvyNDfmCNbSlHaFG
eKtq1e74XHg+h/zG6Ukd6Hq2mCm0D6St4oW+R2CDprkX2W/24fQS+jva7fBW
lJAtB8e661LXXWf/991nu7KiPFFLQ5niwfbdVwv5HR+spIRS50uj9nBtbUtp
gpauI9FlyGZECvfwcaI9YCWYK9DugFEzlorioHkZgXCknlkPW/wl6pXU4fze
9tQ8RrfN94VzWHwEXlkPc11l1O69HMEShojPikb/2sakfargn6+F6puTiIW2
SlR7u63ZhlXnvETPlB91FdZU/iwDXPwito8BV1dBS1kBahad8ElG3EP47cnU
WNC0aUt0Nv17qV8uwVZfDTrWbfA5TTruN8H7X2ipKkDbcQLKLzUoDysHNqHb
bMp5sY3lZWBnDxNqTMpr1MKNxAL9zIbHxGboOPmQ6A6ZYZ6wNiDtLl8V/ybJ
LtjHo0J7SNpixwuhwZDQp5P3+sv8nkifKhpg5eZZqFPVHAvvRhTfR3k5OD/S
nrqngrIenNzmwSvy+5NfpAReg546GbMqpnD/IvYY3ISbqEPtv5KDgetGUXtw
k16gdbVquP5e+szhkvTpl2vbaH1q1BkFPxFyaye1b8S6cdui/mDIYBH/2nNJ
XG/F69NczHbWo9p48v47310XBch+fwjNnfoL43rFWD28jtDnDUXkH5ogiZ/p
B+fGHXE7XHqexX1CQQ4Cc9z+CWstvwqMPq34yI9/DTNNwqsrd0JImVMM8BBx
dhDUBbxBzwxXC+2JEiDbaxkqCfqy7TqKl5cGJevTbExtRjSGogoOPoyU9XWZ
5SxOnwp66a0902CiLoyLUFBHi0GLqdw0BWY/yf8KDDUUYNRucqnP9cjPisaM
Xo1Ea4iC9Z6ZOy8iKr38d8sn+JyFuoI8DIxNUatWLemXtQW0hTHaCvoOeF7M
eYUl61NLKX0q2FvV3ZKOl67U9nQxZ8FkYlUzOiaqrtsS4bXv16d3Zwr5p7mQ
f/LY2NynKQRn7y1+XtqztX6iPs32giMVC2ALv1J09PQHI6AmWG9qPrNIDJhM
lKhPs7CnQJ8OLr0+XVMmfZqHfwfQe2qa9VoNdhFOVE76lJeN1a4C366D1f7F
54IuD0Q/3E/9tnK9aSjLSiw/PwM+9y9g3qQRcBs7F1dveMCU2s9YHZd+WJ/m
YHUbev/97ufSvE4m8oLgLOC1KgY4+UKGPSwvfZoXifFmdC4uk5ZDxO3PY+Hs
+KbUdf0uh5BZqOvzMn3Q2FARulYt8VUUM0k0+MxO1Hcq9z/8zdyOWREvYWek
Tji/BkZ4FI4rB5WrZ7orzQdNhpwX9mU+vp6l9xDLqdSQWu8uwKlFdGyJcecN
oj1ivDRvNKPyqGhg3Yu0It8pPfLhvaUrNBUF65XaWHTOu+xsg5OA+XXoeHbz
NmPwSZRAjIegQ32p6yrmTbH/png/QaLXcdrfmPZGiMiO85H0fBWMiW5UMbTF
408R+Oz/HP+sGAY7G3sMXnAAiYVyQ2eFPoOZgQpULLsV2afIjrwHEyq+rzL6
jF+GVJHg5uPTkTH0mKo1Q5QLjc/6ilH2dGxovyXnZD0oHsy1pt43az0cGXmE
ObJjsLQFPQ66L7xWRIM9PTIdysSvdZxzsKy1WiKCPZZSMb5yGo3wMI42Vslv
DqKGkTUGNrSg5uJrzX9OxYizkz6hhXlN7PMSz5PF+l1AVSpOtzJOxsnu2Fk+
20S8YN4Z4ZxSWfSpvApsrAwpvaxZZyQ+ylgXKAA/JwRTXW1Fa4waBpZY6n4d
MenfEbeen4TFTeh8BrUHnQQ1zUDs9YWRVmjdtxtqCOZLFGrgjHBe4o37NFRr
PAUJhZxFyfp0exF9+vjgbOpZe60s/VmiJerTtuWjT/PSQjC0TnWYWljC0lL6
pa9NxxDIGXbH5z8wQRIvNx7bOpugak2LIs9WWaeSsD9VxoXiEyRVeDD6tOIj
L+Y5TCoJbJ4pzseUsT74LFwbY0HPqRO7rd1iERIKce3MZ7OpdUQ5hWb4UMoD
tEvWpxn0OpW8EtZdDJD1dRkoSZ+COr8i4ct9tLEwENlx1UpmWPmQzo8U730R
BmrykK/WDdFlqCJuXhYeuM8U5ViVl1eAjv0g+JfzmfZnlneCfK35CIpLRGJi
0deba2uhq0i3kdnUZ5BlUcqqT7sJ9am69RzISJMCas9vd7o+Gw5dWVAj5ahP
c7GyWyPqmRpt9StlHMtP1KeZz1CfWrdQgMeHb+uqpKvdqXixanX7IC63FKX/
7fqUhQPN6Tnyhp3mI7dIFy4nfcrNwgJnO6pdm+4NKufzQKQRdnMH/duVe0hw
+ZLBSvyIgQ1qwrzFQASl0LlIRPG95aJPs7C0KZ27Z/Yhn28XKPs1GghyDynr
4oCsOL9y0qc5H46Kcpe4TnQXtQsr1h/1qqpTMYT/FAkY5MBvFZ3DxtZ1PeEC
9FU+0bT9mxlSa+STPALxLXifn0mtnSpWd0WUDFvDyYmEsxmpMwVdrH0mzClM
eMLOIa2o8taccEXGfEomRjfWpuYjV1wQ24LYh9tof2bUo9jcH6UGec6ZXem9
mIpqdvgvsmxcLi/sEqoK5xYHb3oiHgvEJq/rKLxvg3VIkohBvr9vGnW9wZS9
4s8L1jtr0WNXRU0dJjWs0LbHMOy94Y+UTNlnQX2+vw3axGfUG7CkyBgM8hDG
Rcub4VSQRCURrrWpvyD/gyLa7fUVfS/+1nxhbh0VHPKVkTU29ysGGNI+svPC
O1QscdSdzcL8Txa4ElWoX/FTMb85rV2XnSnf3KCC/DoDK9O+cuhmOs5266g2
aDDWAwkvV9JjQKk+/FO5+HJ/Haq0WoNUCc4j1qeamPFK9lpl7pfjVNyGoPyL
L4XRF8uiT5WMcfDFM/SsrUbFfTWberjEeXMO4dv3do6GvjCWQMCdzNqORWJp
5kULId1zLrQEft+4FrxjcpEdcg9GGpo4ExCDo71p7dp93jXCuLiYTvr+2Gtx
RfpPWfXp3X1TKX1qPmRDqRn7z9enfNzfPRgNZ15GWlYWsgq9No5tSde1phP8
/8AESV6nl0Kt4XJEpBd9trOzugv5gRaO/rCR/H1g9GnFBzf1LepTeQYU4LLZ
r9izmjKiv8AzRnoi6P3NbahUpS0unNkBU2pfkiJGbL4tZY/Yn/bCUI7e/3js
VXFndnER5nkXIcJ8DSXr0zzMdzWm/EerWUeKPWeCkxqKhKyCpylen+bEhSJN
SF44GZE4v2sB6hnTc1+qOrZ4GpqJ9E+3YSw450TBAGt8it/tHhfyFlFZ+ZSf
jg2NEcaT8ZD8+RlWjOtMryOTVyO3NeV2Bhcv3Rsdqxlg+v3EYrl8XmoQ2lvS
a19yyhZ4ElHUppRFnwpyCq1vS+8DVFa3g5+sDahEC653onOpDFx6UXitHPUp
qeOjI2gfoGQ5VTpPlmTx87Px2CtI2E9+oj4lOqCzkXC/7bHi97bmhHnCJyQD
OX5LqbPtlQ1r4VlYMat3hN9++ZIg3AP9u/UpW7R+atK4N1KKCNTyWj/NxT/9
6PyASrVmI64YSs9jp+P+668/dM5MsnCtSdCWq58VfzZmUmIs9R4nxZf0nyqE
KxnisJc4VqR89SkbO/rS+4Jbjd9WbJkEc0QvX3wk/fsrXCrT3H/MkWdFP1hO
+vTZtjHCulLCkmvic2W+Pt0BfUUB1+xUZJ9V+qdbwtxM8uj7z2eRt+XlR8LJ
RIHwbCMc8o5CyeDi7FR6bc2qxywZ9cFH2NXx0CJ8t2qjQYgWxoYKctH1bkT8
hGo1HAkoHNfDRfD5idAlPFjbbgCCJOJaL68aQpXXarT7d51byBdwE564IlLe
XYK9MJdou/EHy3SmxdsjtNaU02+HV8ninp6fGoxWlrqQU6mCnVJ74LnYPMyG
Kv/yM+K5jfzYJ6gs9D2dNrwo1ZndV5c6Ujp95Pq7Rd49taQX9Rt1Ru+Rmuvk
5iaje30DyGuY4cqXgoHAxfVZrkKu7oqP2UV/++vNTdSapUoNVzxPoNvi6Lye
9Hqf42JIT+eS9r6+iLKdcmQc3ggt78UpHjx396Lm1Gs6jQErwwfN7VrituBc
JE48xjXSpsq16coLbOhsgUXXpPVxVsQrWBvRcUNWC97I7EM5b/cIx70hzn0R
eroy6lNBfqTPd3bDSGg/xuy4L5XfjQI3F6FRwj3XhFxH+N/H/KEdoKpEn49W
h/iKrLIaUG4i+tUjdaBYCQsv+uLGlkGoOeAIlT850nM7jIgGNmkyAMlhF+HQ
sJ9U3rEClFWfvjm1jNKnCpVd8U5G/6HBxwf/NyK/+LP1aaLXEbRo0BEfZJxp
JcB+YXyInJIDXpQxQRIn8TV6NXeEo+OPvebufvJd87v5cU/Qo5UTHsXLnvW4
t3yAyBfskpUg6Q8Bo0//ABDeu6genetUp2prvE2QsYeUnYYtUwbgcaK4v3Iy
PqCfXTWs8hLEQHHxaHMnqAjOfjBpgtcpEkYpNxAuhvSZl20m75Gxbw3IjHiN
Vk6T8VX40yXrU+DEYmHONvW6uPglo8gY5OTEYVmPHrgXVVCO4vQpFwFrXbCn
UBwdN/kZWldRpmzwzlufwE37gGYmdJ4NvcYLECvjIfLSP2NGv16IEOjT/CjM
c+6BMKk9CTy8PUV4FOFymnYdkZgreQ/Sx7nf0RdJR3+zqSs0anVGUomcg4On
i9uK8tdP3V80r1SZ9Ckpb/iZIVR8lbyiKg4+lnEOIjsEA00Ec7Vq2CNxPsfx
ibQ+df5RfSrI++8+XLh2L4e11z4XuR8hwvhwfRXGi/JolYM+TRbr03WBktww
F0tc6PljwzaTZfaR/MwIjG/tBA/S0fmst2ikr0DN6bRYeBHZRQ+0xJdbe9F+
nS/Ncb6hT3d/hz4t1f7TMPGXAg+70msamtb472vhdRAu3q5uKFOfvi7Qp9WG
IExKn+biQP+G0vqUjJMPu/uK2nX7XRl5/0i7+lxYikknxPMAfOJH8vLyy+SP
uSneqCvMbWveYhricgq3GZ/YpnuYs3A79bf/LmFecZ3u+CJhJstXnwI3t/ag
15v0muBedE6RZxLkx/aY2w2TjwlywOVhojMdy6DjvEKcT6sAuZ/E+ZHOlE6f
5mbEwfsl8dOZ4l6xZADdTgq6HRAgEQfz+lAvSltU7zCqUK7hXBxc4oZ6GnTM
32nBPAdpNzabeF12MJobCOJuK+OYbzSKgg9OfgGzZ2NvT3pcdZywo8gnuZlB
GFKVlEvNEKvvxYrXdRM8Ya9NbK11a4SnS/OsHNJe9Qw0oKJtj7NS8Wl8zOtt
Qdmshee9KPuakckuU5+KDzyHXTf8JCsCz7c4U+1ZzWkwcssgULeMdKZ0RINF
16SYSkLgVdQg9apL+L9kPmTkf0WPKoI4nUq4FcIidImNzFwOcj5fEtp+Vcx/
LoMsE+LFypWoI24cpteWp/jnntdp1NmOObkF9ZSLmQI7p6iGrdc/SN0mJ/YB
ahMtrmffDjFZHOSzspGTnw/3EU5U+8k7bCm6V5TwuRVuDsSPaGL+GS/R5YX9
aZ9jP186HlhgQ3s70LlRFSzpXASC5+RI+E8uJ1/6fLsyIj3sGWz0lSCnWhNr
p9rBafZBUR+4vpW2AXU6NEONGg0QmFDo/KPceIxsUINe29bvg9AcGXr8/Aza
nzZYKI43+w59KrC5vru6QV1RHgo6FjhPrkn+Gjf9E9q5biLcQLKAbDxd40L5
bi2jFvicUfZ6OrWAjovXbjUGXWpb4XoU7Qc5GRFwtiHaT6Uqpveogt5LT8n8
fln3nya8OgklYRyB67qnRIcXqlPSf1MDT8Jt9DLRpZ+pT3nsVIxqbYcZF4rP
P3R0QT+hD7XCnaSy1bFAn/Zs6gAHhx97zf4OfcrPT8f6LjYYvK74unm1QcgV
yWu954/sgfi9YPTpnwA+4m9NoeNW5JVg2XYcngWL+xw7+Qvm9GyGTpPdRXlB
Bfuv1vdvjGaDNhAuTF/MSw+FW90qlD81bDoXUaJNRVy4TxXGOijpoMOUPYjL
FvvCCK8LcHWoh633xGdsBJ8SzhvLOcBHRqhkvNcJIa8TnB/ihOPPxfnlM8Ne
YlrP1ph2wkdi7pKLE8J1u2bD10rcSaBPW2DAkvNFfmPbhFaQV9HBqRdRlE2/
O5teG5JXUIbTyNX4IjHnnvb1Kfq3ssao3Z70PhmiTyfUqoLLhebt2UTbNK2p
DhPH/sjMK8hLmYNTK0bBuUMfnAos21jPSwlCW2s9OI/eJTNGSxKcuJuoK9xj
q1l/FGIKTey+Wj9Ytj7lZmKNszA/kvM5UW5Ofl4sxrY0ofnTuH1F4oviH64j
baQAu1GHIE5nwsPZWfQ8Qf3By8XPwaLPiD21ZCD1XqVWyyFN5Tm4OrUdXb4a
k1CQ/pKb+hrthWuWWib1seWKv0TuETb+2z4FttZt4Sc6pz4bQxoI9Kkallwu
ReykDOSnBqGxJa1xR9+nxYhAG+VyuHjiPk3IA5VQt8MUvI0TP0VmxBtM7+SA
gVvu0udbECO1sp9w7VBBG72m70FqwX4tTjbu7JuDVl1His91yE/CCNtq1Oer
Dr8vXd+8NGyoQ9dD44H/SOnTZ0t7FKNP07CkMb1OZ9hFOsdV8su9wvFH9EOw
uDNkht+HjS6dD82Q9KF3SeL3uNmRmNFAX6Y+/XJGeH6gcg0cDxTz49yUj+hg
Izyf1XoJCpaIuCmecDKgn0e7aiPsuv5OYm2AjUsbx6FO3S4S+67ysXPGQDg6
OmH67rsoTbg0XT15eLnakdLc8krqaDRgMWmzgjkHLgJv7EQz25a49kmwvs3D
zfnCuCYFY5yTiOEOf+YOQ3XBXEMVnCy0RyLkkjAWUqM53hTWpz4bqTyxgjip
8xLnVsX7XoSeBh2PqWPZEmdfh4ne42TF4ggpR50+yxEnrONbG4fTvyGviXF7
nkrt1cv9+i9qCTX43IOly1m9fQLRRfKKsB5yhO4X/CR0sRLob2V023RPas36
xX5XSntVdR4uvk78+pNdk7F0/TroCXSE+RAyZnNxd/ss8iwJpOtnoHtdLUoH
jj5XeI8GF+F3t2LD4UfC//m4spjOE99pYuE8v0QvbBlFnXc9Zf8DSKbajbg6
lNrfbeM0CZmSmjAvDmv61oGiggm2/vdOmr9xItCluiIUKxniv8AUhL++iDln
Asu0Rh90czoaTDwuNT7jAo7DhLRB7Y4TyxA3w4JbQ10ql+yRl9Lzf15HB1Dr
ex3G75f+xrut0BfMGVYZi5jcHFxePw4eAbHgxHuiuhy9jt1ti0+RXLyBN/Zg
0ck3ouu5QSdRWZBTT7cL3mflwnPXWFz3i6XfzHqJJlpyUK5kiudRknPZfIRd
6E+Vy6H7GuQQv7Zr+VK8z+bi8Qp6LVS+4XZIb/HhIeraLBioKKHNrHNIEw1y
Pub2oc/Jrjv3jLiNiM06Pb8vRjW3pvRFk81+pKsl4MiiafgonFfPj76DwR1a
oLVrb8LzSpuXQBr8/DTMc7YS2kB1nPYR+/HUdx7QEGolh2EnwCpCIfmIe7QW
VQT7aeSVsePWl0Jvc7F5SHMoVKqK/S8k2jU3CL2E+nTibj/IgiCO3amG9Pky
PFLWpd3rUt9Tr9YCd4LEsTgCfdqsmgUufJQmUfwcf7TUJdzJYjBiiok7Kglp
/seoXMtU+3SZL86bSezpxcnC3MTExx5/I3v/fJjnNuiQOlQxc0FioWSU7y9t
pPWpgQveC7sXjxWBMcK978rqxpi87ZoEp+Ag8OZuNDS1xwkf8VnFt1bWK0af
5mBGKx2q/0za9x36lDyj56ZuqN17BUo6Lv3UEjdhPZC2Ci6/c1Z/Lvh4f2UR
DGyG4WNm8Q/ns22kSJ8uvCxjbeIPAaNP/xSwsHJQQ1GfU1LXRv3m7dCudRNU
1lCGbYdZorPSBPPir88sgqFObVwJlfZP8bfmUJxAcI+RGy+LzrNLD7pPdJmG
6P7qxjXR0rk9WgnOHtc0QN/5J5El4hCEBy7rK/ysEY74ybBx/Fw8XNMDeuoK
onuaWNZB47pWUFfRQMtBK5EisT7JJz5scSt6v4qpy3ik5om1c8Da5tQ5d5f8
Y0SxV7ycaIxvZwrTFuMRXhAAwwrBiKbVRL+nplkZzdq6wqmpPTQUVdFuqrs4
zw3Rp2OrKsC27zIEJ4sSQyL6zVlY6Oli7LYHIg6ZFe2FOvr0c8jXWVV0/aMY
CObwPFb1oPZldZx8At86BoGXE4Te1YT7T+RU4bb1IXJEvoGLQxOE+XG12sBb
YkMNJzMMPazp9RkV6xmIkXDI0W8uoImZNuTlDTH7yBNksLnUc2ZEBWCYoyVq
tRuBoFTp9fjH+92gIthLZlQXO85cxrHNMzFy9n5SllysG0mfXStfrS/eJott
Oi8/A8u71Rfy/FbwThTroldnFkBPWVHIzxVRvXZDtO/QDnVMtaBXozHcvZJF
/CYvxQ9tqypR+rHjygsy9lCWot5Z8RjchO4HqvbDcfLCv1g/cyj2Pw0BJz0I
Y5rVFO6bEqzvG6FhS2e0b9UYepqaaNJnHrWuUICsoBtwtjYQrWvLq5mgfkMH
mBppo1KVOjj4JEz02Tyi5dqY0vpPvT7RJhLrs7lJAeisR9+jdpuZpH8L5z54
bOwZJpwb0moPfwmHmp/2BS5V6bgJ3frzES9RGe9OLxJxjLnXvormPgTrdvsn
u9L7ycmrsnULzF2xFotnT0Q7R0eM7FhFpj7Ni3kMR0P6zAsjy1bYuP8oNi+b
jNbExqweIDzrW64Sxq9yx3uhSH98eCY0FeSFelAZpraN0N6lLeyrV4K+mSOO
+UrE46bdhoVyQd/WxOaHsaVuT35+PCa0sxCNa0UNHdRt1BTW1fWhqmmKFVc+
iLxExLVl0BJyU/PGvbD/iDvmjOoDF9cuqKpDn/XRdMoubFm1Cb5UUCIPdzeN
FfZNU5wNkdyrx8PbIwV+Xh7bn0iUmZuFf2d2gI7omdRg7dAcru1boybpG0Z1
OuJJsDgnCzf9I8Y3M6N1toYRhi3ehas3buLyqX3o1rY5jIX7zvQsm2Deur2I
ySg5y9u6Yc3ouqi3FGl8PtJerYYh0Sv69p0l9DuNr0+IJlIm7aRaFXMP38Cj
B7exf/UUjN18HSGP3em5owZuOLxjAWYceCI8Y5iP0wv6UGvkiqZdccUrCJks
FhIiPuGS+0r0HL0RERI5XqPenIZpJWWYNB+CaFbBvF4uAm5sRSNzc4zd8RDS
KWHZuDRQuPe9+1qhhhDYpXdYO6QZqtd3xWHPqKJrCxlPqTk8VR1THDl/HNMm
C8ZFWdQpH17bifZQr4vTvsK1XAGfPTAE6oq6mHHoTanXM3hJt1CblEWb2LAP
EvNA4KVjg5Mmxa/nXZDMX89DsDutAxXsFuPQxhkYvuxf2gfzsnF+pC01bjWN
bbH7wl34vX0H35cPsWXBOAyZtl3CX/Lhv3cUzQNsp+DY3hUYtPquqA4Tboyn
fLxOvcWFzhVj43J/Pep7DXpvxMFFg7H25Avqndywa2hcWRVyag6497VAP3ER
8vwUbIxNMWjJsSI54E8spJ9FTt8R+/97jJdP72P1tGGY7v4UczoIfIEKOqw9
h51Lp2PtjXDhGM3H/WFiH63ZcCqivyt9C/HVV6dDQzAP12GPtA7hJGFlAw06
h22xe+94uLxpJLTJmDFo3A+PPsZQ/p6fn4PAe3tQq1pVDF3lIRVLlvn1OuxV
6XJ3n3lCRk5ePtLDHqO+nuDsTh2svB8i9mvEvravSscU12xCfu99NHUGgUCf
Nq2sBUe3VcTvFGz+5iLacytqaBth4ung79sfwU3BOidtYtN0sKbQmXWCvbU1
ib1Rd1iEBFlmhnB3z4ND6PxQOnVxNyxTPCbIe9c2j6L9oWptXPwqjh3J+Xwc
dY00RW2rW80G7Tt3QmObasROV8f8c37is2Tzk7G5mxFtpztOlDrXnJPxDp2r
KlA212X+0W/yJumy58Pn4npok7HXecX5YutOsAa5ZICDsKwKGHUk4LvzgP86
8BHy7BgcNAU56/YVOTdZ/LE8HBjXTtQOvRZ4/NQcET8TjD79c8DJTcb55X2h
XbCHXvAifHnU+stIFfmuHCzoVhfqygrU+S7tJm4UxVpkxfihXxMTUVyevJIq
qjfqjeBYwaIBH3kZoZjqaiO+N2WfCAe/Fyg6zyUr5BHa2lcnGlNJrAP1qqNt
14F4HlQonpD0Ad9Lm1BLR3w/BUUtzPznnoTuysfztUPRzLo6Fc9SwHV1DS2x
4OxL0PqUcD4rGxhp66B550GYOmkk6lbWRxO3FYjPkV5kZKcEYc3ABqLce1T5
jG2w+uJbsCTjVIg+nWilj9pWptCvYgm3cdMwqn876OkbYMFJT6k59PzMSHS2
NaI0U4s1L0uXH5iXgIEOVah4aopHKqtBj9hrD4n5QzHycHlue1Qx1BXFyNB1
pQpds47wDPLHgKZmUCvQeMSeVrFywOR/PiDB+yRa2FSBYoFOIGU0reuCK6JN
JXzkZsRg7UgnKCuqQMfYHPXq1oaeLvF9264SvVp09w076SN6W+kIObsyXGYc
RuRnT3SsYyLcF0OXQcvYDFMvhSDR+yKaWOiT+xfMRchDz7Q+dr+leTKfl4/w
J/+gfrVKEn1LGTadpsM3qmCtjgOPFT1hqKsh7p/K6jCr60SeM6CMPpqPxJf7
YC1ci5ZXN8XSSx9JH6bblJeXgT1TXUWak37pYM5BwvEKH1xE7pWd8Bmzu9hK
jYuarUfCP0p8VmPota2wr6ZFzysLdbiheSMc8E1HyLm5qFVFS6xxFZVRxb4D
7vq9QJ9GNUmdKojqtFqtRph19BMSXh1Cs1qVRfeTJ+1g5tAJZx4/x9AezqhS
SUVUFmU1Xdi3HiLaY8zLz8KFVf2hIjo/XBGWLYbh8ddkvFvXSKY+FTxnrN85
WBmqie5r1Xos3qfk4NWyDqhExuP0zWfxNSFdNDYEMYWhD3fDzkRDom5UYN9t
Dt7GFgqq4Cajn4Ox6HMDlt0qU4vmZ8fhn2kdiYYQt4GRnSuuBCZK8woeC9fX
uUFDSTiGlHSw+ORTsNhZOCc8x0GwljfjyFPEvL+Djo3NoCGyZfLQqmyKTgMX
wt/nFlwa20BbVcLOGZiji9skfEkWji3BGuSxhTCUl5PqGy6TdiAhJ68IJ8jP
iseOCW1FcyPyCgrQseyI5+9foIuhEsxbusHj+Udk5uR+M9Yi2f88bAQ5XhTU
4dyrN6oRbWhYvydexbGK/K5gn+e2oUIuJq8AJS0zLDrlRZ35nPjquKj/j97z
TOIcaMHjpeHU3E7UGaHKqhrQ0dWFbvW6WHL4CbILxfwJbP3X25tQ20AFuqat
MXvRQrh1aoZWfWbCKzxNhhfnIyc+ABM72UFZm2iBiVPQ16UJDAyssND9NlJZ
xYgWbgx6WalQY8W22wKEZpZ1B2oe/h1aAxZm1aGpb4qBExdgspsztLR0seD0
K5GN+Db4iDrejrJV1p13SZ2ryE14CBvK7tfCA6lkhGSMXZtIzx3Jq2PjZR+p
c9IEc3wrhZxZXlEJamoasHQagtt+EYXKJdangnqYsPuOmMPzWTjRm57Lab3v
a6F6J7pjSV3KDgn68u5HIRA3I3kev8tw0FeDtpkDpi5cgTHdm8Oh/Qg8DU6S
WS95ye8woame0FcpQUXDCvvufACXx8a+gXS+aIGGOflcMsaSj5Sny6m1arr8
NXGtcKBQacGJxrC6tXBFxlm12a/nwbrL4hLjNAR+Kf7dJbSzNoKKujbMbR1Q
27wKDGo7w8MrVLwPmZeJM+PboIquuniOjPhz88btsOJfYbwDLx3LezeAjpa6
yH8pa2jDod0QPCP24tIO4gO05UXfVya/Z9dyBPyjP6CFhQ3hIdWha2SJQeOm
YERPZ+hpVMEqwn/Kshe6MMKfrEZNl7VIL+LSWFjdzQrzn8niItmY370OKqmK
fbmapi56rjgLVkoIhjoJ1hcURe9p6FfD9AviM3QT399Cjzr6Uvawav3uuP4h
SWTTeFn+6Eo4ZAE3Etjjao064NTTzwh6tBN1THRFdahAOIBNh7EIT/v2+mY+
4X5urSxE5VMkNqter+mFzgHPh8fSXrAyEvAVcXsoqWqS9hyBL8Xunf3NYMdg
jos9tFTpXOFySmqwcByJuEKi+u6hWahnpgcVJQWpvmpSqyU8I/+8JMWMPv3T
QPx6cjTe+nrD2y8QiZnlHJdAGiY58gt8vLzw9lNYGc6BKx4cdia+BPrBN+A9
4rPK7os4OZmUH6f8SUQw/P0CEJmQUcJ8F/GBMaHw83kDv3dfkJEr6zd5yMmk
uVxeThpCPr1FwPsgpObILl9ucjj8334uA3+peMhJicY7X0GdfCpks4uCz8nC
57f+eB8SW+Ss2e8Fj52BoPcBeOPti5DoZPB/clVmp8TA540PopNl5eolujM5
EgE+XvB9+wlp31yo5SM5OhjeXm/wKSz+h3L+/BrwkBn7FX6+vvgSFifkocXn
RypAfk4qPr/zJ2M/EuyCsISkOKSXYAi4uelkfPtT7RoaU/x5p1xWBqK+BmJ0
Q3PMOSvjHNBvgo/M+HAE+Prg3ecwsIojb8SGJUUJ7MQ7xEnaG14Ovrz1w4ew
lHJtP05uKj699cUbH2KXUoruRS2MzMQI+HkL7Gs4bV/5uYiLjv/m9wojNz0K
D29cwunTZ/Dfg9dIyS5h5oz42Mgv7/DitQ/i0yXWlARzDG+98SWqmLOfBfvG
ooPw5tUr+BK7kZZd8mJXPisdIR9IX/DxR1icLF1a5AeQHh8KX69XCPj4FRml
cDjJgvIEfEZOkWQzpQEXce/9kEP6jqCswR8EfukjkjJ/0RkMhBtFhXxBUpF9
1AXvc5AUGQyvN74Ijiw+n55gHib4rQ+CY0pTxxK357IQ9OkzEjNkP69gL0tE
0Hu8eu2NoMikb96bxyHlCPSFl2+gxBw5ncfwxbMXiComDiAzJQ4ffW7B1qYv
Pn3r8KLin4bYk0+yNRyX2KSwUsZoED0dHfIB3m+88Sk05tfadmKrMnPoOsrP
TiH9MQABH0KEcU4/Bg6xy59jUmS+Fx/+Genl5dgLgc8ltiaYrs/3wdHIq/gL
kwwqKBh9yoABAwb/D/i2Pv254CP+7TXUbz4eId/NSRkwYPCnQ6CT723ujVEH
vi9/KQMGDP5+MPqUAQMGDP4f8Hv16dfHh9CxXR88DZE9p8+AAYP/B3BwctkI
dJ9+CInFxCsxYMCAAaNPGTBgwOD/ARy8nGNH6VODGl0Q+YvXMB/fuomgjIof
Gc2AAYOfCE4Cbt3y/AP2SDBgwOB3gtGnDBgwYPD3IyfOF84GdI4PZZ2quPGx
mD2HDBgwYMCAAQMGvxGMPmXAgAGDvxjEhnveOIftm9dh9erV4tf67XgSyMTa
MmDAgAEDBgwqFhh9yoABAwYMGDBgwIABAwYMKgIYfcqAAQMGDBgwYMCAAQMG
DCoCGH3KgAEDBgwYMGDAgAEDBgwqAhh9yoABAwYMGDBgwIABAwYMKgIYfcqA
AQMGDBgwYMCAAQMGDCoCGH3KgAEDBgwYMGDAgAEDBgwqAhh9yoABAwYMGDBg
wIABAwYMKgIYfcrgmyBtmRwVhCe3LmD12r3I+N3lYcCAwa8Bseeh/o/hvm0N
xg7qh2FjZ2D/ubtIYXF+d8l+EvjIDn2IeeNHYdHu60gXOK7/E/DysuHz4CK2
rF6IgX36Ytys5bjw0B9s7nfUAS8fcV8Dce/aGazZdhS55V/cUoKP5LC3OOu+
DXPHDYbb0DFYs+8MQpNzfluJGDBgwIDBt8HoUwYlgv8/9s46LKqtC+MM3WkA
CoKiotiIit392QFid8e1u7u726uI3YGdqFgoIoq0SHcMMDPvd+acEQYYSlDA
u37PM38wczhnn53r3WvvtaMx1KY8lJWVoCDPg5xhW4QWdZoIgvgjfLk6F6XN
e+JFcAIi32xGeUU5yPFUMfTws6JO2u+BGfOceppCTk4OihqlcPNzbFGn6A/B
h+M0W1TsvwWhifF4saY5FJk84Kmb4uyH4HzdSZAcjoE2JlBWUoQ8jwf1mnaI
+02pzo0Y75uwKmOO3c+DwY98i5YmSkzZ8mA2eF8RpYggCILIC6RPidwQpCbB
5dRMaMnLkT4tRESCFCQKijoVBCGbuM8XUU1TAZ023QbnQRPhxvapsDCzxAbn
z0WcutwQIpmf8kv/F+S8Do2qW6CZ3Xz4x/03GujHU3OhoVQae1382L9Fgjis
G9sRFWu1w1O/6Fz+WwR+Ah/SXlZBSiKubXGAEqNxi0qfCuO/YER1Teh2WIsE
SeI+39oFa4sKsFt7owhSRBAEQeQV0qdEXvB3OYwyyqRPCw8Rnh9fj/Ue/KJO
CEHI5NqygZCTU8bY4yXNVypC+Iv1WLzlflEnpIQgwszutSGnZoKLH0Ly/d8x
n05i8PhTzDie8fv3V5dDnVd0+jTw5mrWD15h5EH8ravRCYIg/lZInxJ5gfRp
4ZLy/SaaGZfDmk9FtzOLIHJiiYM1Y9+rYNyJ50WdlHyRFPIR7S31MWzNvaJO
SslAFI/uNTRZfXrpQ/56d1FqHCa0rwybwSeLnT69tnIoq0/NRh0ifUoQBFHC
IH1aMhGvn4qMikVKLrErhIJUJEtlYUpiHGIT8uazS0mKR2RMIlsCBdenIiTG
xyIhOW/lKWTeLzo69/fjbp0KfnL6OjyRIBkxsQmQ9a/C1GREMfmWKszhvkzl
TJa6n4CfgNj4jOvXCkKMnwvs6pRlbCe9XPWpSJiC2JgY8FNzf3pyUgKS8nBd
js8T511UNPO8grQ7pqwT4mXmv6xr+fExbJ3M2+VCJMYx9ShFOn1M/1Og9GZF
mMpHZGR07u0rNUXKLmf6wsRYxOWxfQmSExEVk4CcqmLanZl+NTY6GkkpBV1v
KkJCbDST38m55vfkbqYF0qdCpi4JpF5O3J/ExMt+bkpSHPNbXuZqmPTHxWSb
/kRGm87uXhMKjC7JSZ+mJqem/X9qchLTL2W9m7jtCXIpnOQEJt0JKXmqu6n8
eERn0y9lejLzjnHIY1eZPUydiWHqTGJyznVGJApFG2P5fOvT5Gg/bBtlCxUm
r/OsT5m+NS46Cgn8PChGpq3Hx8Yw1/5anT84vVee9amISVcsk674pLytCRek
pl8nHlOzjCdM2vmp0mMS049Hx8isT1wfz4xJ/51QXARBELlC+rRkEep+Bd0b
VIKWlhaUlJSgZVQNi0++QeYwk4LkGFzeNQ91zS2w15ux/ZOCsG1ce2irKEJR
WQetJh1FRDaxKeOD3TChkxVzf+ZaRSXU67MILx7/qj4V4sOVjbAprwMlReZ+
Ssqo3GIQnD2jZdupIa8wqVt99t0UmetVtAzQZeRKfImUYTcw9cbD+QA61DBG
n9WubE15c3E9Kmtz/1uuZg98iOC0gjAlFocWDEBZFe43Uxt7uMVkrlsCeD08
iq51jGC/5hUje0OwzKFJWj5UbjMaX2J/WjpCeJ5ciCYN6sPa2pr5NMSM8/7s
OwkiP8G+RUPJ9+JPExx+y0U9jvl8GfW1FVi7SfwxrF6PvaZ1nwn4Hi+VntQo
OC4ZhFLaamx6lZTU0W/eUcTJaA5x31+jv20l6OgaoJSWJqw7OGD2grnwCMl7
jMq4gNeY1q0udHV0oashfp4+Bi87lW+/gzdTT+owZa1XqjR0dAzRZeg0zF+y
HHFZ6poQQY/3o3W18ly9YPK3YrOBeBGcjUZhytrl2ELUMtSV1CMlNOo7F54R
sXBa0gejVjxk897feR+ap5VJAww44MnWC1FSKGY7dED9tDKxxfKHEVkekxIb
iFWjO0D/Z/0rZYEp224iKZOoSE2MwLmtM1GzQhUc+S6EKDEA64a3ggbbvnTR
caYjorMxOGO/v8eUHvWhIXmGZtkqmHPgbjZxUpNxdu1oGClz1yprGqDrlL0I
TsqvMZuKh0fmo5o+V58UFZVhXKMVtl96m1Efp37H3K6N2DwqrSXP1lED8ypp
dXnEhrO5P0oYjzMbp6Bqhcp48JVp58nhODK1IwzUxOWmgZajdyBCUrHi/Z5j
fOe6UGfbmCYajtiDMBlaESlRcFo5AqZ6WmzfJ+5Hanedgg+RUvNIib7oVtsw
rW0ZlLVg09yg9Wh4SKqVICEYJ1eMRKWmsxHDjFNvDk2AkboS1HVr4LH3TxXF
x81981HLtBxufpYdrdzf9SzTTxhK6q4yDC3b4MgDL5mjVfKPxxjeppqkH1FE
6YpNcfDFD5n9n9/T42hkbsCkvSxKGRiijcM0jJmzO3/+x5Qw7JnRF9qSOqOk
rI7a7QbjxsewjJcFXETnhuJyrQlNcWwBOSVUqlaLK+v6Nth53S37ZwjCMK1j
ZfAkea2uVQH1mP+zadYPrpJuJ6M+FcHz1h40MtPk6p9WOYzZ+RR8mdU4BY8P
z4GFtjqXfhU1NBu0HD7xebEFUuE4/39sOzcuo82mjadvxqaN7WeHrckUSzgZ
p1aPRgVNLq8UlVRh3rAHzrr4yLx7Urgnlg5rjc7D1jJlLcDuSe3ZcjVqPRc/
JHX66xMn9GtaFR23PYLYwop6exg2FQzY+6uZtcSFd5J+h2kn1zaNh6EO954q
Rra4/Sk8D+9IEATx90P6tKQgwMG5vaChqo/VTi/BF4pN9gisH94C8soaGHv4
eZq98+6uEyYNaAE11uYwwLprJ9GjVVPYjZ6McUO6wVCFsyl6Lz+TxUZ6cnQh
qpYrg3EbTsMrOArxEd9x68gyWJUygAIvf/pUmOCLf3rVR9XWY3Ht+SeER0XB
7/011DNWgZJGKUw+8Ta9dJm6dmvbOBir62PS5rPwC49FfHQwHjhtQTUdVWgZ
VsPsIy8k9owIoS/OYMGYbmyMSfG7NBu+BWP69cDAkZOxZs1SdKltzH6vXW0I
bt0+ic4tWmH0tAVYs2ohetQtzf5Wuu5AeMeIa7IQPtd2wK5V9TTbtnHf+WhS
qTwate2Crm1toaXKaUqFUnXw7zO/tHcMfX8WZZW53zru8Ex/H6YdfLywEKqS
+y1+wNkk4d4fcf3MAVQso8J8r4ERB6/h9u3bePD0NRIleib5+z30sLXF5PUn
8Mz1LV4+vonF9jXYdzVpPAgeYYlpzw96vA9WJuWwwsmFjbUkSo3Hje3joaVd
lbG3c4trIs7KFLgemMzY/Zpou+wqe26IMCUOj/YMgTZjr9btvznbeYyM90nF
nc2MnVfRBtfdgtl84Ef7Yv3QRtC37oSIJGntHY5dk7vCxn4OLt17hvdvX+HM
1n9gKp7/UKuA9RfeZLh1auhLDG9tiTI2g3DxyUdExScg8ocPjizoC568CuSZ
fOmz6EFaXY4PfAlbM1023ysvfAOBVBp9Hu2HhjgONfPbgHPBGer/59u70aJe
Paw+fBEv37yFy71LsG9YCXLMM6x7L4V/ovhqEV7d+Bdj+zSBCtu+ymAT83eX
5k0xYMxkjB3UBWXE7YunAIdN1zK2L6bTu75tKqyqVMPqYzfwLSgc0SE+jB6s
zVyvxLSTafgSm55PEV4P0cO6CkavOMDUg3dwfeqMRYNbQolphxUaOMiYX5FN
wo9XGNzcgrG7B+K261fEJsQjyPMFlg1pDHkFNdTpOBavAyWiQpQIt8d3mDp5
C12txXmogLbTN7F1VPx59TkghycJ8OzsdozpYMaWibx2eWxcuwT9u/fExLlL
sXTeeNTQ49pD95l78WjXBHTo1Bdzl67CsnkTUdNIlY2t2n/NxQz5lhz8EJ2q
lUH5egPhFpzA5mPIh2uwLq8OPcsu+BjKtYfUmG+4f9sJ/yvLPaPD8PVsmp3v
v0LQdw+smTsWNYzUOM1SbRLObx8Lm4Y1oaUgx5bxkgMnsHn+JDQsp8G1dQ19
XPfIqE+FyVHYOKELLGt1wsnbr/AjIgrBX13QjkkfT1kb7Waek5pDSoXz7smo
ZGOHw5fu4d37t7h9Ziuamioz91fD0HXnpUY3Ab78OwHlK9nCydWf9aUlRfnj
8NSWUDVzQHge1yL4Pj7A1H0dtBi5Gu99QpEQH4NPT5l6bG3IxiPuOmkPghO5
p4oSAvHoDlOuN0+ihjaTB0oGWLDnNFfWzs7w+pF9/yFKZP7X+QJGmHB5XbXN
XFwX5zXTnn9OGaTpU6v/4fTyfox27Yxps+ZgRA8btl/kKaphydnXGe6bEvMV
4zrWR68ZW/DA5Q1euzzEzpm9oM2Ukb5FW9z3z02pi+D/4TGcmbRM6NGATZte
qym4Iam/9196pPUHAW8uMOVWCg17z8LzTwFITIyD1xtnTOloBp6SDtoMWYqA
GG5eNM79NKYP6wJtJcl40308FvdqgBoVjSVjhj7WXL6PNQvGoLymeF5HHk3m
bmLGqP7o4TARK1YsxcB2VmwfblC9J3z8H2JI9w5wmDAX61YvQ79WNbi01rDD
54T8zj0RBEH8fZA+LSHEu6CuJmMzMTbfbY+otK9D7nIxIHhVJiNYahkUP/QT
6pmqsfaeVvn6uPjuR9pvN7aMYOe95c3t8V36fwJvoJa+PKy6rkVsBseZCA+2
9YRyPvSpWDvv62sMlQrd4BYnNd4y9WlWt1rcmG4yGgEp3P29Li+GJjOmW4x2
QkbXkAhBV6dDT5F5d1VtHHsmZR/zfTGgFGcvaFVojOte6fki+HETtZS533St
uuJlhNSLJr5DEwN58FQNcNIlMD1pUS9RX0HyPxYt8SDgp/+RsXnubYGFjhL7
m2mnGWnxIEVxnmikppxVnzKk+F+BSSZ9yiY71B21TdVlru8VxHljdGUe2s05
msFGF6X4ogV7NoIi2q6/zz2HaYyrBzSFeoW6+BQqtaZUGIO1vRvgztfIbMsn
7XnRTPrL6TD3VcfEJ1K2X4oXOpQRn7FhgNte8bnfJzEEneqUQrVW4xAv5TcU
Rrmge4vOCP0ZqJjpF55utodW5Tbwi5P2iQuxf1I9tl5q1ByYVpcFcb6YWFMN
SqWb4HFkxr5AFPsajSVlLK1Pxf66IfXMs+pT8f3CX6GyDH0q4vuhfTV99NiU
8frI55uhLinDCfvSbemEgBewYOcYeNA1b4xbn9J9U2eX23P6pvJw/EgXxwh9
tRum6qoYfuCDVD0Rwe/cP2ycU/H/rLoZKMmmMCzqXB4VR57N0B6Svr9AZX1V
9lrLkZeRmxtVmBSIBc20Ge1himMemfzpqaGY0bIMm+c2A9dkupcQY9obsj61
QQcf5/yQzMQ+RHU1sUZXRKXOc+EVm56jHtcWcHHAFZRg1nUdfkg99MWx+ex7
KVkOk+rLUvBgHKcBrDquRJoLjalHs7rXZb7XxLybX9KfLQjG+IpcXspa33t8
PrfmU06tPPpM3s/O6bw6twFt2tvhpR9X/6MfTIWGLH3KjFOPt/SAmmpFHPsk
1SaY8c5xfBuJTqmAe0HizlOEkKdbUE7LAlf8Mp5R8/DAJHaOQU69Jq5JXlSU
4I0uBmoo23kWMqwUEYaiV7tBCMzDEtdEX2fYajH5Zz4QXxMz+fuDndG4FNd/
jdnunLFvSfVHM3E/qmoMJ6lxIleEUVhtxeV1Tut75RTVmd+3ITRtjioVy+xr
sv9Xtuc6/Oy5RIIYHB1cEeX+twrSEk2QGIZu9cqy1+t32YvYPJoEOyZ1Zv/H
eMBuZF59I4z7jEG1NCCnUhUPAjOtx08JRI/qOmxssC7LLqW/lzACi+tyc5E6
euaYeT2ATfP5VSPRbdRGBCdzl03tbsmdT6RrgZ13v6Xdlh/mzozJWuxvatrm
OPc2/dye1FAXVFXgfNgTrgZnmTcmCIL4r0H6tITA/4I2pipQL1MHroHpdmaM
y2bOLlJtirdS5qcgxgeNqmqzumOMc2iG8e77w4NQFNuISlZ48NP8Sg3HMhtt
dh547eusc9S+zw+glFLe9anXjc1QZvTmwPWXMv0iwvcn+9HAwhwO6++w/lBR
ShwGNTWBnLIhDryVYR+J4jGpnRGrBUx7bUCa91AQhvlVOPuo+ejTGffviKIw
o5Yi+5v9QsdMN0zCCFtdxn5Ww4Kzrulf87+hjz53vx6M3slY84S4vnk4FFl7
yxQHv6VIkvYFTbLTp9+voUI+9em7MysYvcDDTme/DN+LG96kLpzdI28yBH7i
xzONaHKX6uApG2D5jS8ZLne7vQcPv2Vdv5oZYYI/BlQvxdjr5jjglSz1QzB6
lZdjfUInn+dus6bE+KJpRTWoGNXDs6BEqV8EuLB7LkITBGnXtamqg8b2G7Ps
r3M9vQTK4nrJM8AaNy5fXp6az37XdsqerDZbSgBGmcjQpykRGGZdUbY+jXiN
qln0qQAf1jWCkmZ9PIrKlKgkT/SSzIHU7Tc//dFhH1DdRJ31gU9+lHGtuu8N
SZtUroMnEmkiiv+K/sbKUKjElF1yxkeIGA25rK8NLGwH4eUPsa3MaNaLs6DK
tIeD7zPFU02NwByJ/1+jTCO4R+UsXNxOzmN9NjqtlyFOhtHrfnkd1MR2MfOs
9e+k9WsB9GnyZ9iK25GqEU65fs/wU+SXu6ioxeS/khkuhGVMUJjLES7fmH7p
XtpUE1M2m1oyfYkcWk45l74elKn7i/rYsv7d1rtept8kF316e/M47hlGPeAu
a7G8+Bb+R2EsQ5/GeZyHEdMHVhm1B5mKEEn+99GzvgWaDN2OEEbQiFJiMLlt
VZS3tUN0pooe+toJWirybH/WcvV7ts8QhL9BNQ2mfmjXwhnvjH3C/nXb8S0P
2yL3T+7Ezl913HRPhr4R4eTCHuy7K5friI9STfR361NVy54IyVRNH2yfxM2r
VhyBIEn2hD4Xr21QwbyTLpmSnoxdDk24cpM3w+3vedsjmr0+TcX9Jf9j9yiX
6ndG5hzP7dWDJONqRZz2+lkeyThux7W9mp2mZrs/eLFdQ/Ya8/GnM+6PYNru
mHpm3LqeHhczrjNODcVMc8nanan3KZ4TQRD/eUiflhyig/3gLVnLJs7AcJ93
OLpkADeO8mrDRUpWivWpraUOaz9PeRyV4T6hL04w+lRso1fEdYmLLdbjEjTE
2kunGd7I2LaYv/hIIuyZ1oqxJZSw+Ypnrlfzw57ASpsHno4VXgTEyrzmzBIH
7j01GqT70QThWFiVG9NbjjufaUyPx+LG6uxvg5aeyXS3FIxtU5o7O+PwI6mE
eKOfgUTvrHyZxcaL+nAR2ircnrz/HfBmfy9cfSrC7imNON9YvUZo3Lhxhk99
63qoU6cO6tTtgZdsHohwenZPLl8UymD44j3wCEnK99y7MP4HvP3TSzUh3Ac3
Tm9BLR2xVtDC0Yc5remUpDw5BuPaWHB+Q0MbrDx0DWEyDL/QD4ztz9QjvXI1
srxfo4YNUFf8fnXqYvLF7+LISVjV04i958z9MmL0pH7HWNNC0Kf8AAwuLbZF
y6BhpjQ1bmwLazZNddBy6Py0e6WGi/WpeB2oFma9ythgfjzYJfGlVYazpOkF
3d/BfldxxHbk6gpj+s9tDk1Zv1NtGxn1oF5dNj31m7bBy4DEHG+1YVQz9rnV
Z56SWS+SAp/ARIPzq9Uae0NKYxREn3qisT6nd85mmm+K8X6CynoKjB6uiBsZ
uyVEvzspyTcTOEo7DJm+zvubb5qOSE2Mxut7F9BdYuvX3yh1/k0u+tR5ywTJ
+t6pkL2zlLnF9xMy9entDaPY/Bh38H6uWZAU9hH1jZWhqVcOtpnrVKOGqFuX
q1OdJ13g3islDItsOe2jplsNi/ZcQEB0ZhWc4xNhZ6PH9veLr3+QeYXPrW2S
/aLqmH4nfZ/j79ansuL3vj00RzJP0BffJK95aeUQdl185RrWWep8A2trru9j
+gan93nYt4Ds9amIH4HBjczZ+YFGe7/KbBex7w9CU9J3D970cyxIxr8DyrDf
tbBfla1lstie68Mtpp7PeI0gBjMbc32kXr+bGec4mLxcU0MyDzbIMUteEgRB
/NcgfVrySI34hEUOzVG6dg+c2jdDok9r4Xke9WnYy6z61P3sas52MbHDdxlZ
nj99mogpTZlnKyjjwP3ctU3021XQFT9b1wovA2XvL/r070KJ7aqDTe8lNnlu
+rRJdvo0FePalmFtzREHHqR/nYs+FUa5oY4Gp0VtZj1jdUbh6tMETG+ixZQl
D2c+xjDtSJTtJy1NzPOHWSnj575ZBSVdbLrhnmN+Z4cwNQ7HFjuggmltbLn6
CN3L512fion7dBxVJettxbafZrlWePgt4xpjD8d+rC+s4z/XmP4g+/dj3zDp
IzpI/Nmrz33N+sBC0qcpQQ9RRlL3AwU5pEkq33PUpw+z6lPnrRPYPKk/82iu
+SheTzC4OaO9tKvhcUDe6oFsUjG+LWdPW83OvIZAAt8f3Upx+y3L2cxBuju2
CPTp+1OSfDPGMV9Z8dBS4HZ5KxpVrYT+8w9hXBfOT2W94Wn6Nb9Rn64d2YBp
mypY6PQym/9MJ+LzaZRn2kLtDv+w+8qzL8P0/xGvhbc1UkxrP/qVmuCufx7P
n0r1QlPWz6+BZTc+yrwk6dtVbo8Gc/82y1zT2kVR6NN3h+dy72nYJ02frhlh
DTlFTex29ipAnU8nO32aEsWMjZU12d9sD3jJ/ue4t2ioyL1bu9H7Jf16wfXp
rCbZ6dNorJPo0zr2x7OJG0UQBPHfgfRpySHO/xXmDOqCeu0G48xjdyZPRenr
ewuoT58ensPp07L/g5cM0zB/+jQGo2oos/7T9Rdz10oRLxZBm90TZoYrX2Sv
SfW7tlZit+li64ei0adI/IaWmtzev5Zr3bi4sIWqT2MwoZYya5tuuf4NeSUh
7Cs2T+/LxeVhfalaaGY/A9+i8mrbhmPfwhGoXdkGm50ecLGMJOt786NP2b3C
7s6Y1K02q0FZvaxtiqELDyNBsvja7UAbdl1dg17Lcz8/I+Yhakj2Ay9z9JCR
7sLRp3zfm9weU+UauJ23QDT51qcXVg9jvzMduDn3sy6SY9GnsRFTjqWx43Vw
LlfnRDLGtCzFPtfIbmeWNanci4RiUmVuT1y5hguKqT4V4cnp9ejQtD5GLjsM
zx8xUut7/5w+XTSgKsTrZ4fvuZtrFoR+OIjSTN0t26Anovh5H8N+fHqI6XZN
oC6p93KKBug/d3/uey6TP6ERO5ejjKHHXGReIp6HKSvRp21Xvknrq4qLPl0y
0JIZx5Qx/eiTvKchB7LTp8mRXmhUiZuTMZ/+WHZ75Huht2Qs6DDmEOlTgiCI
Pwzp05KBMMEL/ayNoKJngbtf0w27wtKnb08t5fSpggUuhmTN8/zp0yRMa6HH
6qxeMmIEp70TPxZJTMVIDDwHUzYuoibm3fGWea33pVXce6pa42GU5I5/2n8a
8wk2GiqsJpknWUxduPo0EbNacnFnHdaczybXxMmPQ1g4tw46MTH93FDfl2fQ
zqoS1JS4vW0VBx6QeR6NNOLzNpb+rxJjB5fG0mdR6e+cX30qPpeU/9MKFOHR
scWoZlaG26/L08JIJy5vPM8NZs9LNKjTFaFJ2a10FSAqKADJMS9gq87l35iN
N2TkQyH5T4OfsHpErD2GnQnItr4mx0UhRBL7NL/69K5kv51cuT74km1QIyGS
EpPYGMzDWjJlIieP+iseZ7seWMT026HROceuWmAviUldcRSCZBniKcEYbcb5
kqqPvCZlMxcTfcqMJR6nJ6E00z9Y2+9CfJrT78/r0/WjON1hMmBL9nGphHwk
JqUi8st5mKrIQd6gDl6FZr8GOykqiDsTmhkvY+Il7yxMwUun1WhQ0Qg8Vk/K
o+PKp1nOEMtINP5XWYXTRZOdZNaZ5MB70Gfvp4Ipzun9UXHRp+tHN2T7LcvR
e7LEM5JKLMIjco/7JiY7fSpk+rwudbh4S3I1ViJSVh+Z5In/6XDv5rDBpdDW
95I+JQiCyBukT0sCqXgxtx7rdzKuPRHhUoNtdCHp05DnRyDP2i4K6L71Q5Zc
z58+BXZO5va9KRu1hUuEjDIUxOHQ+EG45ceHICkYbatpsbaJ8UBH8LNejWe7
p7H3M+y2Mj224x/WpwnfbkNXVQGKpv/DV0kiM+jT7Zn0acDVfMbvFWH3ZO5M
BLUq/eEly/3JtJWHq/pi4YmPbCNau2IvwqQeKkiKxPllfSV+1Kq4E5yzt+7L
vZ3QUeJBpWpvREq/cD71aUrcd8w/cC1DXNqEUC/M6VSN86NWX4AwAbf/VBxj
hqdUGiueyPYNxny6gA4d5yKcH4Ixlly8zIo9F2a1WVMDMSY3fbrgdab4va6o
kmX/qT8GSMrdtMHINA2aEQEOzB+HG6G/pk8D72yVfKcM+60vZOqHePcDWLf3
DqvJNg/g4sHIazbC02BZ1roQH09OxKZLb2Xm4U9ureX8tnLypbHPPatOEsZ6
wFZXHOfbAKsyxEUrHvo05cdjVGbXBahh3hPpWLp/Xp9eXzuCS59yeex2jZLx
n6n4sHsojjwMZPefWhspsecGNVn+WKbeEs93TejQAe7hyRBEuaPn4BMZYlgl
RHhja38uDnWZyt0RkJDTWCjCgr71uDpTtjc8ZfQdUe8cuT6+dDu8i09/UHHR
pxfE+0/FZaNuhQs+skYBEYKd52HWhswx92STbXwkIR/7HWwk7aI87gRkXVkg
CLmLyux4WA7/fvnZbkifEgRB/ClIn5YARLHY3pg7a9ygYhd4S53X4PbvdIlN
Vx2PotIHNUH0z/i9WfVpiMuxNH167edR4bFf0NuY0wJ6Zm3gGpTRL/Pp+gro
iNecGTSBVx6CC365viltjWfFNhPw7Ft4mn7gR/jg6Mrx6L7oKueHYCrDuQV9
2DMT5ZSr4MrXzNYMo8OGNoS8kg623f4s9XV6/F5Z+nSRJD6Sw+LTme6XKomP
lL0+7bn0SRZ9+vzYTCjJy6HvCim9y2ibXvqc36LWkH+RICU8Pl9anHb+6bwb
6XZfSrgH6phrsP7iKc8k78o0rFShEG7nJX5isT+rxzy4BaXHixIy2tP58AJU
az4enmLHKJNvU3u2x76PGctKlOCOrmJ9oFQHT8Jzbj/Pjo5ly0m+TDO8k3K2
JgXego34TERFLRy855fDHSTvJI7L22oYPDOd3Rf/biu7t1i5/lqIQ+OKr+tg
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
LFXWg+TAsTe7/n3wklNKpvhH9Snw8vA8tv6Y/gP/tHgsaGCMjdcLt+2TSwdC
V9sQy8/7Im+67G/Rp9zPsDFmP5vhVPQ5Sopg7M2JZVJ7o0rZm8n7H5ToHj8L
ok/LDiXTp2KkvtyPztaTwRfRewF2ZmKL1utc5XJUkT4N89jF7geuWwMHAjIU
xjkp725h15XP7L1Kuz6l4nL7jmysPmCth0z68vdH+v36VIRb28agfPtliMzK
xKWl3Zj9lY1qdcbrgptSfZeyq09FGQHoItkDqdPkw1C8DEmEs5tX407M931e
ou9VOL2SrRN8eJy1R31D9hl2W5+BLvcpPaox/qHaEMdC+wSxaeXh7bFpOP/0
C2LfXkZlXXqMWw/jb8YVag8/ok8/7upeSJ8KE27hby021lx+/hUUwc+IwFLb
GXifzo6flEifUuXtNqkW+9zyTeEVoag/QIyAR5fxMikXGW+PSvZAUseMY36K
9Y4oHfYrdyBWyf7yovQpP+I2zrnm+3daX768vgstq7H6YfwuVyXuLsKzM6fx
VibQEnET4bzSFgbMe2jjoG9+DFTa9Sk9V7kfs4e5Jibdlt+T6HfrU+63+zCT
pL/1+DOFzl5i5uNdGMbMu9GtOQFR3+v8KAAv9jGsO/6DpwmKlYk4+YFkzZYK
hvzrrPA7RcGPvMm2TxVdXPyQb69+lj6l90zqUY+dx2nQea+Cc2Z/RJ/y4Xrt
otz8n4xvLzDfhh3j06o3CXH08GSqB1oasL7IdudthXd6cZ6t5/UHL1dyHkLJ
9emXp0egr6kKzTrDIbctjyhWoT69efkm0mXuy08LweZJ3dh2pd0UT5KUS+nP
06diJN6dweSTqroujnsq7lPOinmLsbOPIfV7yRNxcHWTI8Jk1qBnJwRj+5Qu
jIbTNKyMp984EGWHY2R9ds3FiCvyvuV36NM3h+eyn6lXwTE/xfs+idLfYeWO
k989g1oYcwHVNKn8066IXY8Vz9XOTQrC9H5TECbZgOp7+lSUHYkD/07Gur3H
ceKoE/YfOorbT/0VnDcnwtWV7H7sJs2GIUahGRHj26N9WOL4VHJOwI/rU0Hi
C3Q0Ytvd4DkbYFrVRm6fbeYWIUdQQ5feu7o+3sbnezt6f6Sfqk+jbkn77qT6
VJSGje3YPZAa9FtUyL/l5YfHkVXY/DCOUXGu11wK2Zt5Ns0k9mYKY29+N0Sf
lh1yv1yCiZL6lJ8ZCbtm1dB37lkqBwWw61ieaQ8t192RyVEx3l5m90cy72on
1afc+EA0r6YvGTtpj2dUzC39DVVwWclhGGU9HF55e2PnhqGX5Nyt3pv8itwf
ye4X6NPJCvRp3v5IefpUJLNnUv/VMvqUqnfnJ7Zn9Wnrw5Dt8b9/YDKjT8v3
WCCNo8WSDY553/L0qSrsXxSlT8PRldanWhVxppA+pdr+h+Ooa94CPhInzUsJ
Rre/WT1h0HMfUpQZHJe5X8zF4fn6tIDzjDxdzP5IQ0uuT3OS/NC0HPVu+nXw
MCLPCYrZ/Z8pfTo6T58u8CqgT/P3R6L1KbtnQC4uj2f31lTRqYJdnhHgyRy8
LaLn5bnMR2e7TUr1qYffWI0WE64Xiqme7/mHKc+hK+8yn7gslezPQf1N2OWO
XJlnikV8BN7dDUOLgQjJFDF7k7aozs451TDtLz0rN+/enKgbqKVTWJ9meG+U
7NVjgnOfZM5REHHhOrWRRJ92ljn3Iwsz2rN5p1KuDW6FpMvtESTgZuDs8kHo
s8tXEmeK8LwYfbpaqk9vSP0TL3g/Kqmz88kbjN6O+CwZv0m9d+zrkxgwaAa7
Z2fuV4ytyvpEnWqt8SI6Te5MdH5OEi7Obo7x224oUTIsQa7LWX3aYqj8/r0f
dmHolJ2Fvu+2exqT1qGbryhxdxHOzRmMeXcL9CGIM7CxswFzn+1P8uedep+d
y+7f22FSobHcYvdHytOnhv0L69NDnRXr09QXUn0626Xw+Z15+rTplHx9mvnp
DnSZeYEamCCnT0XYMJrdH6nxursyd6H06cg8fbrtB/RpLlxs2XNaNeqtRYr0
SAfaaXNwZaQFU5+N63RASGqBiIeKx4/Z1KTiXANMuZtYomeLchOxtqM5Jmwt
pg8i0xtNJfNAe87ZV5KXQtQViU6h9yGV0aeCtA9oZcCeQ217W35MuDh9OlCq
T6PzPoTz6BaSZ2jgzKsC44SU3bNpoMf0b62+p+weeFysHDui0BkWOV/uoBzt
r6qMQDhzTQSHKeyztRtNpWxAwZzn4/jU2lBR1cJql49Qjhyc6Mbq07YjdhW5
P5KsPn14gD2DUeMveX0q4nxAp/KsPr0qsw+x/RRbXImWVzzi7ED0pvsRVGvi
VrRyHV7Xd9gx7aai9cr8M6Ikftp/3xS2TIz743OR+yNZwi9vzWD2G3Qpz+oV
o5bj8TktR3qmAU1uRgTWDbPC1qffvp8wYQY2d7KE0+sCmkuUArtGOlDXL497
wZnI/uqBSsaaTL0ZKqdPRdg9g+3DrL9Efm/9zMinSulTj+L0aUzemevXUVWd
bVfVWo9CTHqOnEbJSfqI2c2Nsf2mMnUnE4MbSdZmmHaD+7dMuXvxc1Kxa2ov
DDz1TRqDCWNcitSn9Lk020a1xfAD75RSAcGP9rLnV1D3qzPmBBJzZOoQfTZg
hA86NuuOh/F5n+fgSDH7Iw0oRp/SfdzPN7aS7sXX9UBggTSKEbqfjS31LCzl
zlbixTzEX5L4cYO3fCHl69NycvqUPrumuzbrizuu8ITsltqpr/ZL+l9VYP80
f92/zzFbaKmy/XJDj/iDw89vmPT+cPH+p2DVdbqkb5mL5Xa2CuzNbYm9sZXY
m98L0adlh0QPR8keilRc0mc+eIqyhsp7v/unMbJ9PWipqWPVXbqPV4w5fVmf
omZcH/vuvUdK5Eec2DoPbZrXZ/yKbt2eiOBk40XAJ6q8efDaO4ZdF0j3R1Wt
j4FjZsN+41pMHT0Q9SsbYsXZF1LbI84MRAtV9rvt5z6U1yS8rxhlwV4bvkz5
eVkCThy616V9uj4WP/wmd40X9wo1KrD7LvY9HysXCwli3aVzHSaf+cJcE3M+
wloyfmZcuxNcA6IQFfIa+1dMRLuaEj1Q0RYfYqPw5FEQ0/Y9Ty+FJvVO6qat
cS8qF7zUz9izbQeyBCJmPo6R5BlL78ZBITlv0ILuX1M3xn4P+b7E3NRQDG5m
hhEbXeX8UdSjDTBj8lETy8+UZJ6vCB92suMp6tpV4R3Hl7v2bktD5lrl5oPk
z24TZ2JDOzY+6zl9l9JPy00LRhsLylaq6mH00VfgC7Lh4bwKDwJiIM4JR29z
dp5N9RE35ON+fjSmSc4b62x3QNq/kvblHuqZsfGQiq4Zug4eh40792P39nUY
2asVDEza40GwEnv6g9anK6Fn3hxe4bJ2Xwzfo4OgqWKKAz5sHJpD+fhuEv+j
oWuM1t1HYPXW3TjguAljB3RHDctWuPZJ4l9FuXi03lrii1Txd5cxOHffFx/f
v8L5fWvRtV1rdn1XAX0qSn6ONvrsM5rYzMXb8GREBb/CzsXjMXZUK2aNh7p2
RRx0e4u0bLbV+J1fIdXN+mZ1MGjyfOzcuw/b1i2BdZu/Ua/TDERn57UwAW7M
ZmMYFfNxkHVn9PkydtXZcqhsfQLSI2wom759rOTMVBU1VGvQDpPmL8e61f9i
VP8uMK/SFuff5ukLMYLvrEMFSd+TrnldDBk/Fzv3O1HpWYh/rCxh0n5BYa1S
DG/OjWM0oc7f/SBbQrQ+rWxhhWcF9pd4fHAeVCg7tv+RMnunUPp0Vm/U7Dyd
quey5yhxsLMP1c4r9MYbmb4b9wPsfo96jUehYC/TQ8cZbB5VHQ355ZYiPF/J
nj2iotYSbzNkrY8Q7zaxe5oYWXRAsMzBJPxoN3YfMOpv3MHAAvpNjCOzWV1Y
126j9NPcqGew0GFjkvL1++HJx1iEU/5x04xBsKzM6lDTPtsQEx+G2/4pdDQJ
J2t2/nbrYat/YD2ZAE/mtmL9hA5Vl79mITPGHwuWn2S0Kj81CP0aUs9V18XA
7Y/k4rmkT3fxt7E22o7dhuwSuWwRnhycDF2Nyrj9TdHaTRZh7C3UkvgYS9uS
vVu69wbpWUhtx6zDl/hUvHt2FbNH9oSZZEyi1dKHiAvxwetw9uCNbRPZfoby
Aw/K2TBhRji61GPPV2m667M0OuFGPkSnSuy9zP/ugdPPQhk/ws+MwbG5PWCk
wba3Wv0X4eKtx0qcl8TF4u6V0NXeU04f5lLPMaNsUKsZTlI/mxryEO2YuXw6
GLb5gVxckPTqGGrpaqHDnFNIUTBvWiGUnt7elI3zm/dZAfktynKxcxBb91pM
yt+f4sX55WwsrKqPXkvPIDo+Gp43j2FIT8qm0Od0qBtiwzV/fAsKQFKuEOvt
WqHR8L1Ik9HT4pwQDK1AxRtdVkHJ4VM8PDSX3SO3Qgc8iqb8dEoQdu3Yy8Sc
zzaNYduphpXcWeh0nQvaJVm3q26B57F86efXNoyQ2t8KtVtgwtwV2LNvPzYs
m4529Sqj9cR9SFcYeBWA1qcdqqDj1F3yY9aUz51sZQDDehMRyRGBF/8G9Sqw
41wGNbvBLSASkUHe2DZvOBpUZ/eJNe6+CtFULOzmz/ZRpX25hZp0f6hhA3jG
y8+jj3x2Egb0Hjeq1XEpTj6d0W4bJe9WGS7fJDZbzMXttT0l55KrU3XXCuPn
rsJ+p4NYt3A8rCxrov1CF6QqWXee7p0szT/jKvUxYuZS7N63D5tWzEO3FrXQ
avBqub0KuR/Yc8VU1TVx0ks+lkr1WgpjSm9Wb9kTYybNwsp19nBw3Isjx07A
5dpdfKD8qewbCjIjMb0lO49BlfIZlla9sGjNVhza54i544egXlUTrDz/Mv83
ohSsr8+mtd2oA3L2TJzhg1aSOYELCp1Xw5IR8RT1TTWgadYCfkmFbVeyqx27
L5m6Dgb8exzhcfF4ee8Uxg7sLB1nmnDQF/HvH+BLImtlUh7MkcT4mrgRItP3
IM7GWZvyrN41awKnu2+QmBAJ9zObMWIk9W4SH91n7lFEJrD92py4AHSqZsyW
BxWrteg5HKs3O2Kf41ZMGt4dlQ0qwPn5t7ySwKJuldB9YwF7E/GAsTetZx75
7vj5r4Do09JPVsJX3HI5DOtGVaRtn/Z1pjXqoUXLVmjXvj3atmqBBpZ1YGGo
lv8dndbS83/fXFiPGiZa0mvqBhboN2sHggIfoK4xu48eraWm7b3L+n6q7C/Y
j0U1Yy2ZZ9I2xxJTdj2RnK1HzwEIwNkdM6XXTau1xynK/8ZmCZD+5SVObRwn
6Q9SQaXm/XD7qS8yvmPrYkLf4NbhRago2UusxuB1eOTtj0yhCBGfA+Cyez7b
R0jb9AZjcePxC8Rl85jzcw6vzN8DtH7P+Xj0/BVSuAK8OToeZvr572JYsTaG
LjmGoFsr2XO56JjZtBrmn/nI+JP0YHc0r6IrsXUaKEfZWvsLPgjweoyNE7vl
P6P7DDzw8ER4giTaFmbi3QsPnFnTR6Lv1VC3/zzcfPwSGVQDCHvngTWjm1Nx
sTHWXH0tXQNI798R4HkWLctJ8roc9bzT9xHznb0Cs+PC8Nz9JkY1rCiJmdVh
t+oQvN58Bp+fSdnD0/inAntPzfK1sP/KA4REJUOQFYkHZ9ahmuTdDS0749Ij
LyRnf98KiQUcbLBrL+0r0TE0R5exO/A1NAhXDq2AgSSm1jFqiAOX7iM8nY+s
cH9ccJwjjRNN67THRbfnSKY36aKMgf+lDWhSq6L0jEM2rtBDvQ7D8OCb8mdD
h99YBS39cpRGGQeXB54IeOePJ9cOomONqhjveF/OB0W/Po9uDStL1zmqSPxk
jcYdcbTgPDxhCrZO6Ag9VZn0aRmicXc7uAd7K5zfS+sVj4OTUF5bQ/obLSML
DFnghJhHs6CrqYtqlk3R13YKLnlLfLMoC66bbFGzgp5cu1PTMUGbwUvwXqKv
xLkp8L7vgi51zSTfqYBNZ+8jMCIT3OQw3Dm5CcaSctAzbozjt54hXhJoCiid
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
/22D+mDP7QSZeeRCnFk+Er6ysgb2wZLd56mukYJlob3k6xHQF6cfF3NDMW7t
mQ33pvaUzE7oPOIXfM7n4eKvk0rV3Qc9Bo7GuovxTO8QcVOx5ZcZ6NPFV+47
wb2H4UpEyZ4/bnoUFgzrDHeqza0bW8PRpTm6DV+Adxny/CXh2RkMGTUKfboG
wr/XMEyaOBa9u1DvHL8aMdlV3YslRtK97fBr4QRbO0d4Bo3Eo/iSPXdiQR6u
bZ9B6dJNqss2gb2x+6+PcnPyYedWwl+uvQIxbvFOysaKcGjFmDI2seL3Eq7J
+RKJOT8FMDZubW0L5+atMGv7FXDDV6N9+65YsusCMnlVi4rEnA+Y2c+Lsntr
OLt3wPITz0vdTSlE5OXt6ObbBk2bOKGNty9at+mAyauPIpdfdR/G+/IKU7q1
QlN7Ozg6t8CAGduRSAWqhbnRGOTnyujSZxjVd5iLBuXvP92xYx48XJvAmuq7
zm6tMHjWTnxSEOSW3H86Byc3TEILJ3vY2NjBpXk7TFh9CrLbc7lpbzA5pJOc
nv0CghA6ZQmeK5io4GfEYM2k/vB0d0YTSv72bTzg12M4zlF2WDYGLsKRJcNL
fFDf8XhM7ysV5WLPmA4SHzQYD1JL3iPK+4AVY/vAzcmRlbmFFyXzGWTJrAMn
v/0TAzoGyMkc2PknXPuYhajbR9DdT74vdek/FVFVWL55dXEjPCn90m3g23si
orIL8cfOGWX6Zr9Jm5En4GL/snHyfsDXH6NW/CGN6cUFaTi2LBRt3V1gS9kV
3ee9KV2dDkup1qhH34N6+dcp8JbxS+2C+2Hf3U8yfYmPM2uno6+/vKydqPed
jy+WSIj4a2soH2+l2Mfr6jD7V10GyPt43ucXmDesE1zpNrG2oey2OfqMXYrw
9BL/LirMwarxveXe7d95MLZdj0Bm7EOM7h0o91nnvpPwOqOsTy5KOoXuQxaX
s+YtRu77qxga2IKS3Ybqp20wYc0pZp4u5fUltHV1gJ2jC/rOOYScggzsmT0M
vqXGgoFj5+JxWrHcIiTc3o0ubVow/d7JzQNjVp1EbqEYZ9YPQmDIJJy+/75M
WyWHX8HILm3h7GjH+B0n91YYtXAP0kqRuRtbFmDAqJHo5N8BvQaPxpQJoxDg
1wHjV5+k7Kc6FiDClyfHMLCzN5ybNoWHlzfatmmLIbO24lOuQO57sRfXIDSk
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
jsCIld+RWy+qHZ0RfgEuX/6iuKYsxQeO7D2rNnqHWp2Rl/oSPXvPR2zBgcxH
89g4ENYNxiNUPdOxaVhboexb9YCvmOnyrAjM7cZ8D/O2uBel/gLLUh7A0Ua/
lPN7M7G0R4VC+lQgH2M6WvPtfqUmLjj1KFLxSejNzbBhv0+vUie8KIVsyY19
gjl9W8HYUE+pUys0wOKfziK2iLUxfn+uhqFJZVwKTlJJlePF0RF8nWFYsQnu
vBV8MFl+Kr4Z1ITd7wCEp6kWlnwc+LwZX+6snWagoBbLfHUTlSwMi5zfm/j0
GGoYa9GnzHdc8bEDO585fn8Yq/EtCb4f247/bZWd5iNcxf8IubSAL4f6ppUw
fPkxJOaKz1wSjzkdLfnvDF9zXLfM1ECen4yT2xaiXV0bsZ/HGC4b75cqFoQ0
MxYbJvSEhWGBztVDvyXHhb534l8D6dOiyY84joaVW+F6jGr98Q/o0/wYTK4p
jicYWmHXLV33j8jHhpHVFe/vpGvCHD5d9enAub8VOt+Kj+34c43acEaR6vXb
UujpG+L3e+r+DjcHdU4/IUaTnt1ohInZlPvid17jcekb3TXrzJKQYP+UWvx3
e88urHe+GVWPv78uq0+ppXM++hSn+sJn+0LExDz8PqkLjGt1RYRGmyNJ9ENT
c2P+OjU6r0JqgW+piz41rosrseplItn/pJjn1XHkjXgyeTr2OwvPtff3TwrP
SWHv358ThLWbeuXs4Rmdz49FbO7H+SpWWOlbeM5SftJtNCq0/lSGw7P6CH2V
X1+C6p3FsXd+x/03hc6jSfY7L9StyLS/eWvc1zI0Ic2MgUtzwUeoMv6sii/7
fvo0N/E5OtQ2Q88pewrNG3tyYo24f54V1vgIeZDw+BiMmC9hVH8oXqhlixxb
fzms9L1K0KfyvHiMbWavXZ9KU7CuidgfP+4PjX1PMrDWUZh/O2TB7xq/Jg8L
e1fi+2m+3H9LkZoa9CesOV+6wxeIU7lQcvAOPt22TX/EZyvrv5L06e55A7Xq
U25dzuLeLYXPPr+u9pkk/rGolQwwyVV9tubcgfa8D7noz8dq6ZGP9sKW+QVm
DfshSQd/IOEJezb6H2H+HvdCn51c9Inwm/Qq49grZamJDTiHGqba9emZ9RP4
79SetF2tdZDmRKJnLVZ3GVfD8SBlvfL6xJfQN6qKI4EadY00FWs7VRPqcaum
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
Vxy580qZr9Is3D+xAU2aDsStN8oyFeN7GtW4eQKWbaAZpjo11AMuDStgzUk/
na4fd3szr/d5n8rpM9wKSVK2Kvmp+HPzHNRpMR4vkxW7xuJTbnxDiz5Ni7iE
2tx9WbdGoBZ9yvfhTRT3mjGsjSMhhX3PazsnCON2lbrCO1UZRywj5AgacNrX
xA6nn6j3Fz3+xYX/Tq1ek9TXUzP/br64x/XArw+p7GuZj5CTs/n9dj4yqYY/
VfaS2SX2I3Hxaz5d+isUW6dxey1GeGPBJ10xfJewn5UsIwIujVvh1Av1elqe
6YOuFZh/bd0Pr7KK9yt//UroN9GvMggByoKOaK8fUZ3rg7JqBu8opR7ICdkr
6lM9/BpYuH1I9jsq7lfD2tdmA3HuSZSyPEky4Lp/OWo5DIZ3TBHto0h2pBda
WAh9fZVaj8WLRJXjWf65ruksjIW3Gayo/4VrvMMYe+H6S1TjxUrisbieGfbe
Ve5vIpwrDYOblYdFrXb8PnXy7HeY10x4ZkYWdpj/4wUkFmyMKctm78NmdOwy
Ht5xyrfYdVM3vu616/SZSuwX1n68voJOlQ35umXUVmVs3WiPXbBpuQSxGjGR
3l6Zzo/nuix2FXy4KDc0qNxWbV9mjtTXF1CHlcWW/b9GlpSr+vzQz1b4zeZ2
zbDz3BNkKzMdwTf2o0stBxzxjuGduwfbCuZu6eOLPR5q/oc8JxR9ahvxenLG
ofvQDQk2i/touyw5UOjTyb2ratWnGW+90ZCPSW2HP0rauo6RHXqe5Y8eHHrP
x2ttm3KydnD3EKGvwLhaPzxLLuiJzcPaUeK4qnE1fP7DeaTlFWSQHFGB1zHe
uQu+uypo+9SXf6Ievye1Hqq2H47zj8MVl8iMe47NMwdg+vpTinzLjvBAJUvu
d1hg+SPhnZBLJYq+qrQ3t9GQ2we5fEO4xyjrHHlOBD7vUJm/r3YTNxfqV071
P8TeNT3Y9/4akSrr0cPubSpSnx76RujvqztpY8kZynjlewdX3L2RnqfZjyVD
xIUlqFyxHnY9TlHv82DvgedvqzHj8wU4+yRO8ZmctRfTe9RjdasN1rqHoxDZ
/uhm/RHMqvTBc5X+/qwof6yaPR0L1h9CodDLRJmF9GlpKU6f5uHH8U5q+tS6
1qeKNfQfAlleKjZP6AYrU9YmVe6KU/efIyUzl89XmTQPqfFROLl+AvT19GFZ
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
OH3Kjs1j/5sFTp/KmD5NYPrUGxf9HjB9+hChTJ+qxlUiIyMjIyMjIyMjIyMj
+/caJxczmD59FPYcl/29eG14+7k/06eZOutT7kQfRJ8mJeB6gDcu+Qr69EV8
FD+2msubTOVfGaX9bWman1EapVEapX2ItLJQv1Fa2SkPlEZplPbvSisL9dt/
La2sPPv/PS2HWYokFw/DQ3CF06dMG94OYfo0u5T6VEWjyt5Tn75m+tTV3xuX
2T1cY/r0afw7pMjzkcabROVfCaVRGqWVKk3be/T/Na2s5S2lURqlUdo/nZb/
L0ora3lLaZRGaf9EWrwkG15Mn15l+pTThneelV6fyjX1qUxDn0qL16cZ7N8w
pk9v+HnjiqhPA2LeICYvE7G8ZYn/qhql/f9Oy6I0SqO0/3dpmp9RGqWVlbJJ
aZRGaaVL0/yM0iitqLS/t2zGsP//LjsND14/5fXpFR+mT5/6I1bUpzml1ady
9b1k1PRpwXrVgvi9oj7N1tCnV9k9XPd/CI9nvrj7MgD3yMjIyMjIyMjIyMjI
yP4TdvdFAG4GPcY1Py9eG95l+jSO6dNMDX1aoCs19aZCn8qU83rlqotci9Kn
YvzebLkUWewaEUyf3mT69PqTB3D1ewhXppevBzCtGnCfjIyMjIyMjIyMjIyM
7D9grv4PcMP/Ia77evHa8B7TpwlMn3LzbrXtL6NNnxZoVLk2faphqvo0n18D
y80jluEN06e3fL3hyu7hBtPKnLn6cffnSUZGRkZGRkZGRkZGRvYvtxucMQ3o
xulBH6YHHz/A/WB/JDJ9ys275eIpSTT1aVG6U8NKq0+j05Lx6HkwvEIC4fUi
AA+e+8MzxJeZDxkZGRkZGRkZGRkZGdm/3O7z5guv50wThgTB61kg/F+/RHJu
9v+kT4vb1IY/jzgXmNOn3BzfXKZPM6USpOTm8NdOzMtCQm4G4nPTeEtQ+TeB
0v62NM3PKI3SKI3SPkRaWajfKK3slAdKozRK+3ellYX67b+WVlae/YdMS8zN
RBKvDXOQmpfLrwnlNCOnHbn9TIV5uyXrU102XS3QsJw+lXIalY+TJGfXkzNN
XGBc3CQJs3xmeWRkZGRkZGRkZGRkZGT/CeM0IDfHVtCGOaJW5DSjBIKGlMuV
a0t10aAljrHKlfF+uWuoatRcxfW52ExS9jn90R/90R/90R/90R/90R/90R/9
/Rf+OA3IjZXmqujSPFEzSsX9TFX1qS5zeItdmyovrE8LNGqBCWkyCLvQkJGR
kZGRkZGRkZGRkf3bjfuTMuO0YGF9qEWfvuc4qrZxU4WJd8NdSyLO+S34jN93
VS5jpvovpZX9NBmlURql/WfTylp9RGn/W1pZK1+URmmU9s+mlbU6itL+t7Sy
Vr6YKpQrNaNENE3dqKknP6g+hbo+1dSmwvdk4nlkKuektH9PmuZnlEZplFb2
0spCXUFpZT+trJRXSqM0SitdWlmoPyit7Kf9PWVTVTdK5er68EPpU825vZq6
tMhryDW+S0ZGRkZGRkZGRkZGRvbvN81xzSLGOEvUp1IVk6noU7nGNTQ1aRH3
pDb8S0ZGRkZGRkZGRkZGRvbvN21jlcWNpaocp1WbStXHTrXq3WLGYxX6FFBO
lyYjIyMjIyMjIyMjIyP7D5hSI2rVqFrm48o1NarKmKmmzixqLFYnfUpGRkZG
RkZGRkZGRkb237FiNGKR+rQIbal2DtXjtP2pfK4qmJXfKQN5Q0ZGRkZGRkZG
RkZGRvb3WXEaUZu21PhcoUk1T0wQBEEQBEEQBEEQfyekRwmCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAgt/B9hrIQi
    "], {{0, 351.6}, {561.6, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{120, 120}],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{561.6, 351.6},
  PlotRange->{{0, 561.6}, {0, 351.6}}]], "Input",ExpressionUUID->"eda0bd4d-\
4a3a-4967-a485-28a1561eacf1"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["5.3 Diagonalization", "Section",
 CellChangeTimes->{{3.9062857721201787`*^9, 3.906285783145425*^9}, {
  3.906461263019992*^9, 
  3.9064612704642897`*^9}},ExpressionUUID->"4b370e5a-1b0e-481a-9ae5-\
17e3dc8a37e3"],

Cell[TextData[{
 "We can pretend that most square matrices are diagonal!  The matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", 
    RowBox[{"(", GridBox[{
       {"3", "1"},
       {"1", "3"}
      }], ")"}]}], TraditionalForm]],ExpressionUUID->
  "648cf792-c43b-4d11-8085-f29bbea9b172"],
 " is similar to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", GridBox[{
      {"4", "0"},
      {"0", "2"}
     }], ")"}], TraditionalForm]],ExpressionUUID->
  "f00466a3-6e88-45c7-9fcc-0369757c3dbd"],
 " since \t",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{"A", "  ", "=", 
     RowBox[{"P", " ", 
      RowBox[{"(", GridBox[{
         {"4", "0"},
         {"0", "2"}
        }], ")"}], 
      SuperscriptBox["P", 
       RowBox[{"-", "1"}]]}]}]}], TraditionalForm]],ExpressionUUID->
  "ce296270-20be-45c5-a0f1-adfcc7783366"],
 "\nfor ",
 Cell[BoxData[
  FormBox[
   RowBox[{"P", "=", 
    RowBox[{"(", GridBox[{
       {"1", "1"},
       {"1", 
        RowBox[{"-", "1"}]}
      }], ")"}]}], TraditionalForm]],ExpressionUUID->
  "98b13240-8060-4207-a4f1-d22aafd20642"],
 ".   Where did ",
 Cell[BoxData[
  FormBox["P", TraditionalForm]],ExpressionUUID->
  "ae4338ae-8e6e-46d8-9c84-bc03e00af694"],
 " come from?  Well, the first column ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["p", "1"], "=", 
    RowBox[{"(", GridBox[{
       {"1"},
       {"1"}
      }], ")"}]}], TraditionalForm]],ExpressionUUID->
  "3366b8c0-c860-4a6c-b08d-ebacd92f9b5d"],
 " is an eigenvector associated with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Lambda]", "=", "4"}], TraditionalForm]],ExpressionUUID->
  "e1d7fb34-0e8b-4712-9d5a-46182655740a"],
 " and the second column ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["p", "2"], "=", 
    RowBox[{"(", GridBox[{
       {"1"},
       {
        RowBox[{"-", "1"}]}
      }], ")"}]}], TraditionalForm]],ExpressionUUID->
  "bf58e747-8ce2-48c0-a6cc-f12af501ae4a"],
 " is an eigenvector associated with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Lambda]", "=", "2"}], TraditionalForm]],ExpressionUUID->
  "17581dd9-36a5-4b6e-8191-6551f7da5e7d"],
 ".    "
}], "Text",
 CellChangeTimes->{{3.9062858390694942`*^9, 3.9062858617449627`*^9}, {
  3.906461284766593*^9, 3.9064613221279716`*^9}, {3.9064614191370573`*^9, 
  3.90646151033305*^9}, {3.906461643810007*^9, 3.906461835319107*^9}, {
  3.906462068123519*^9, 3.906462214680561*^9}, {3.9064622663208084`*^9, 
  3.9064623813849144`*^9}, {3.906462420538162*^9, 3.906462479991314*^9}, {
  3.906822109730126*^9, 
  3.906822113590796*^9}},ExpressionUUID->"295cdb6a-0b4d-4cbb-a2b2-\
9ec8695ed30a"],

Cell[TextData[{
 "Definition: ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "cca7f581-e83f-4cbb-8665-c813e4726e85"],
 " is ",
 StyleBox["diagonalizable",
  FontVariations->{"Underline"->True}],
 " if ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", 
    RowBox[{"P", " ", "D", " ", 
     SuperscriptBox["P", 
      RowBox[{"-", "1"}]]}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "107bb1c3-30d2-43cb-897f-d043f7d9a926"],
 " for a diagonal matrix ",
 Cell[BoxData[
  FormBox["D", TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "16c019d5-8413-48b4-a4ba-e8dbeccb5973"],
 ". "
}], "Text",
 CellChangeTimes->{{3.906462702359604*^9, 3.90646276745671*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"6a27de68-b1f0-4fdb-a2b8-189d24d6ac7a"],

Cell[TextData[{
 "It is easy to compute powers of a diagonalizable matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", 
    RowBox[{"P", " ", "D", " ", 
     SuperscriptBox["P", 
      RowBox[{"-", "1"}]]}]}], TraditionalForm]],ExpressionUUID->
  "55e498ad-1310-4ace-b2c4-7f69f2d7f9e0"],
 ".  Clearly\n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["A", "2"], "=", 
    RowBox[{
     RowBox[{"P", " ", "D", " ", 
      SuperscriptBox["P", 
       RowBox[{"-", "1"}]], "P", " ", "D", " ", 
      SuperscriptBox["P", 
       RowBox[{"-", "1"}]]}], "=", 
     RowBox[{
      RowBox[{"P", " ", "D", " ", 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["P", 
          RowBox[{"-", "1"}]], "P"}], ")"}], " ", "D", " ", 
       SuperscriptBox["P", 
        RowBox[{"-", "1"}]]}], "=", 
      RowBox[{
       RowBox[{"P", " ", "D", " ", "D", " ", 
        SuperscriptBox["P", 
         RowBox[{"-", "1"}]]}], "=", 
       RowBox[{"P", " ", 
        SuperscriptBox["D", "2"], 
        SuperscriptBox["P", 
         RowBox[{"-", "1"}]]}]}]}]}]}], TraditionalForm]],ExpressionUUID->
  "c1a6392a-85d6-469c-97ac-ed87ffd5259d"],
 "\nand it works similarly (the interior ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["P", 
     RowBox[{"-", "1"}]], "P"}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "4c5c19de-432f-41cb-8379-9bada4738ac8"],
 " factors all collapse) for higher powers so\n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["A", "k"], "=", 
    RowBox[{"P", " ", 
     SuperscriptBox["D", "k"], 
     SuperscriptBox["P", 
      RowBox[{"-", "1"}]]}]}], TraditionalForm]],ExpressionUUID->
  "ff0a7c57-f8e9-4806-b605-a02b2e873972"],
 ".  "
}], "Text",
 CellChangeTimes->{{3.906461865332323*^9, 3.9064618778802314`*^9}, {
  3.906462021724839*^9, 3.906462050516616*^9}, {3.906462484709018*^9, 
  3.9064626316206813`*^9}, {3.906462790072174*^9, 3.906462859116413*^9}, {
  3.906819951316241*^9, 
  3.90682000947971*^9}},ExpressionUUID->"9ca88ce2-8824-450f-9beb-\
dd4c25a27d0c"],

Cell[TextData[{
 "Theorem 5: Diagonalization Theorem. An ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "\[Times]", "n"}], TraditionalForm]],ExpressionUUID->
  "33de9939-7750-4fb9-9c71-c3363690b799"],
 " matrix A is diagonalizable iff it has n Linearly Independent eigenvectors. "
}], "Text",
 CellChangeTimes->{{3.9064626388231497`*^9, 3.9064626952971807`*^9}, {
  3.9064628668646393`*^9, 3.906462909965187*^9}},
 Background->RGBColor[
  0.94, 0.88, 0.94],ExpressionUUID->"ef8ec2e4-0fac-4744-a211-dbdf39a3ccb0"],

Cell[TextData[{
 "Why: Assume ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"A", " ", 
     SubscriptBox["v", "i"]}], "=", 
    RowBox[{
     SubscriptBox["\[Lambda]", "i"], 
     SubscriptBox["v", "i"]}]}], TraditionalForm]],ExpressionUUID->
  "ea71fbb4-a3aa-4695-bf6e-3f815e80fc58"],
 " and build ",
 Cell[BoxData[
  FormBox[
   RowBox[{"P", "=", " ", 
    RowBox[{"(", GridBox[{
       {
        SubscriptBox["v", "1"], 
        SubscriptBox["v", "2"], "\[Ellipsis]", 
        SubscriptBox["v", "n"]}
      }], ")"}]}], TraditionalForm]],ExpressionUUID->
  "b836fd7b-ab7d-46b4-8764-d0b13b1c2e7e"],
 ".  Then \n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"A", " ", "P"}], "=", 
    RowBox[{
     RowBox[{"A", " ", 
      RowBox[{"(", GridBox[{
         {
          SubscriptBox["v", "1"], 
          SubscriptBox["v", "2"], "\[Ellipsis]", 
          SubscriptBox["v", "n"]}
        }], ")"}]}], "=", " ", 
     RowBox[{
      RowBox[{"(", GridBox[{
         {
          SubscriptBox["Av", "1"], 
          SubscriptBox["Av", "2"], "\[Ellipsis]", 
          SubscriptBox["Av", "n"]}
        }], ")"}], "=", "  ", 
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["\[Lambda]", "1"], GridBox[{
          {
           SubscriptBox["v", "1"], 
           RowBox[{
            SubscriptBox["\[Lambda]", "2"], 
            SubscriptBox["v", "2"]}], "\[Ellipsis]", 
           RowBox[{
            SubscriptBox["\[Lambda]", "n"], 
            SubscriptBox["v", "n"]}]}
         }]}], ")"}], " "}]}]}], TraditionalForm]],ExpressionUUID->
  "9e7ab610-a19b-4fca-acc9-8a3c21fe9c3a"],
 "\nand \n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{Cell[TextData[Cell[BoxData[
     FormBox[
      RowBox[{"P", "(", GridBox[{
         {
          SubscriptBox["\[Lambda]", "1"], "0", "\[Ellipsis]", "0"},
         {"0", 
          SubscriptBox["\[Lambda]", "2"], " ", "0"},
         {"\[VerticalEllipsis]", " ", "\[DescendingEllipsis]", 
          "\[VerticalEllipsis]"},
         {"0", "0", "\[Ellipsis]", 
          SubscriptBox["\[Lambda]", "n"]}
        }], ")"}], TraditionalForm]],ExpressionUUID->
     "f8bb0060-7d69-4035-ad3a-716789f0528e"]],ExpressionUUID->
     "689c8e34-a0ff-40da-be2c-26fa68097521"], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"(", GridBox[{
         {
          SubscriptBox["v", "1"], 
          SubscriptBox["v", "2"], "\[Ellipsis]", 
          SubscriptBox["v", "n"]}
        }], ")"}], Cell[TextData[Cell[BoxData[
       FormBox[
        RowBox[{"(", GridBox[{
           {
            SubscriptBox["\[Lambda]", "1"], "0", "\[Ellipsis]", "0"},
           {"0", 
            SubscriptBox["\[Lambda]", "2"], " ", "0"},
           {"\[VerticalEllipsis]", " ", "\[DescendingEllipsis]", 
            "\[VerticalEllipsis]"},
           {"0", "0", "\[Ellipsis]", 
            SubscriptBox["\[Lambda]", "n"]}
          }], ")"}], TraditionalForm]],ExpressionUUID->
       "d42e929f-a595-4924-a8e0-6d093259f168"]],ExpressionUUID->
       "79827ca3-a7a5-4939-99b1-f57c61922a4c"]}], " ", "=", 
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["\[Lambda]", "1"], GridBox[{
         {
          SubscriptBox["v", "1"], 
          RowBox[{
           SubscriptBox["\[Lambda]", "2"], 
           SubscriptBox["v", "2"]}], "\[Ellipsis]", 
          RowBox[{
           SubscriptBox["\[Lambda]", "n"], 
           SubscriptBox["v", "n"]}]}
        }]}], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "0a61b6e8-c9a4-4e76-956d-872461af7c2b"],
 "\nare the same so \n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"A", " ", "P"}], "=", 
    RowBox[{"P", " ", "D", " "}]}], TraditionalForm]],ExpressionUUID->
  "7b6d26e9-6c4d-4811-97fe-8a787365e812"],
 "\nSince ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["P", 
    RowBox[{"-", "1"}]], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "95a8fb34-61e3-486d-9ae9-528349cad152"],
 " exists we have ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", 
    RowBox[{"P", " ", "D", " ", 
     SuperscriptBox["P", 
      RowBox[{"-", "1"}]]}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "4547ee8c-3060-4c28-99e2-d9264c33eeee"]
}], "Text",
 CellChangeTimes->{{3.9064626388231497`*^9, 3.9064626952971807`*^9}, {
  3.9064628668646393`*^9, 3.906463455379264*^9}, {3.9068221211208086`*^9, 
  3.9068222436568766`*^9}},
 Background->RGBColor[
  0.94, 0.88, 0.94],ExpressionUUID->"b0740a0f-e366-4f88-a3d3-941bd44a8799"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Lambda]", "=", 
    RowBox[{"-", "2"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "2b8be821-c181-4e7d-b5b1-3581f02a1cf6"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Lambda]", "=", "1"}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "aff9e734-c3da-4035-9da4-a7a25ac9c91b"],
 " are evals of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", 
    RowBox[{"(", GridBox[{
       {"1", "3", "3"},
       {
        RowBox[{"-", "3"}], 
        RowBox[{"-", "5"}], 
        RowBox[{"-", "3"}]},
       {"3", "3", "1"}
      }], ")"}]}], TraditionalForm]],ExpressionUUID->
  "81557532-4a40-4ddc-8c39-55b36c74dc9e"],
 ". "
}], "ItemNumbered",
 CellChangeTimes->{{3.906285810735995*^9, 3.9062858356952763`*^9}, {
   3.906285879810129*^9, 3.9062861993666525`*^9}, {3.906286354915329*^9, 
   3.906286397535026*^9}, {3.9064635072077794`*^9, 3.9064635678307223`*^9}, 
   3.906820055578205*^9, {3.9068226033771086`*^9, 3.9068226950088167`*^9}, {
   3.9068227362560415`*^9, 
   3.9068227362560415`*^9}},ExpressionUUID->"9118ca08-a2a8-4e70-a436-\
50052bc12bb1"],

Cell["Diagonalize A.", "SubitemNumbered",
 CellChangeTimes->{{3.906285810735995*^9, 3.9062858356952763`*^9}, {
   3.906285879810129*^9, 3.9062861993666525`*^9}, {3.906286354915329*^9, 
   3.906286397535026*^9}, {3.9064635072077794`*^9, 3.9064635678307223`*^9}, 
   3.906820055578205*^9, {3.9068226033771086`*^9, 3.9068226950088167`*^9}, 
   3.906822770186988*^9},ExpressionUUID->"2b7a2f82-1e5a-45e6-a7f2-\
0384fc25aa9c"],

Cell[TextData[{
 "Write down an expression for ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["A", "n"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "318b579a-3190-4229-b457-dca52a06905a"],
 ". "
}], "SubitemNumbered",
 CellChangeTimes->{{3.906285810735995*^9, 3.9062858356952763`*^9}, {
   3.906285879810129*^9, 3.9062861993666525`*^9}, {3.906286354915329*^9, 
   3.906286397535026*^9}, {3.9064635072077794`*^9, 3.9064635678307223`*^9}, 
   3.906820055578205*^9, {3.9068226033771086`*^9, 3.9068226950088167`*^9}, {
   3.9068227474218993`*^9, 
   3.9068227663943233`*^9}},ExpressionUUID->"ee36dbfd-5f09-4f96-83ce-\
1f31578c2412"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["5.5 Complex Eigenvalues", "Section",
 CellChangeTimes->{{3.9062857721201787`*^9, 3.906285783145425*^9}, {
  3.906461263019992*^9, 3.9064612704642897`*^9}, {3.9068230632241507`*^9, 
  3.9068230704767427`*^9}},ExpressionUUID->"4d8b28bb-1ce1-4557-9983-\
039ce8dacc51"],

Cell[TextData[{
 "Real matrices can have complex eigenvalues which always turn up as complex \
conjugate pairs \t\n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Alpha]", " ", "\[PlusMinus]", " ", 
    RowBox[{"\[DoubleStruckI]", " ", "\[Beta]"}]}], TraditionalForm]],
  ExpressionUUID->"b2c3af00-6781-4d06-a279-d20662234d99"],
 ".  \n",
 Cell[BoxData[
  FormBox["\[Alpha]", TraditionalForm]],ExpressionUUID->
  "ff3372ca-beba-4748-8eb7-619b25301a82"],
 " is the ",
 StyleBox["real part",
  FontVariations->{"Underline"->True}],
 " and ",
 Cell[BoxData[
  FormBox["\[Beta]", TraditionalForm]],ExpressionUUID->
  "054aa817-fde2-45cd-88fd-ba607eef91e7"],
 " is the ",
 StyleBox["imaginary part",
  FontVariations->{"Underline"->True}],
 " of the eval ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Lambda]", "=", 
    RowBox[{"\[Alpha]", "+", 
     RowBox[{"\[DoubleStruckI]", " ", "\[Beta]"}]}]}], TraditionalForm]],
  ExpressionUUID->"8297be6c-633e-455c-8828-4dcfcf418f5c"],
 "  Not surprisingly the matching evecs are a complex conjugate pair.  \
Functions ",
 Cell[BoxData[
  FormBox["Re", TraditionalForm]],ExpressionUUID->
  "601893e0-68b8-4149-85bc-c0067ba5711b"],
 " (for real) and Im (for imaginary) are useful.\n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"Re", "(", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\[DoubleStruckI]", "-", "1"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "3"}], "\[DoubleStruckI]"}], "+", "4"}]}], "}"}], ")"}],
     "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "4"}], "}"}]}], TraditionalForm]],
  ExpressionUUID->"f5575311-e478-49d0-acb3-fa3587a95945"],
 "  and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"Im", "(", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\[DoubleStruckI]", "-", "1"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "3"}], "\[DoubleStruckI]"}], "+", "4"}]}], "}"}], ")"}],
     "=", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "3"}]}], "}"}], " "}], TraditionalForm]],ExpressionUUID->
  "3e749b87-1ec8-46a2-9f5b-3595d4aa5a29"],
 "."
}], "Text",
 CellChangeTimes->{{3.9062858390694942`*^9, 3.9062858617449627`*^9}, {
  3.906461284766593*^9, 3.9064613221279716`*^9}, {3.9064614191370573`*^9, 
  3.90646151033305*^9}, {3.906461643810007*^9, 3.906461835319107*^9}, {
  3.906462068123519*^9, 3.906462214680561*^9}, {3.9064622663208084`*^9, 
  3.9064623813849144`*^9}, {3.906462420538162*^9, 3.906462479991314*^9}, {
  3.906822109730126*^9, 3.906822113590796*^9}, {3.9068230845924253`*^9, 
  3.906823285216451*^9}, {3.906823357370977*^9, 3.90682363004002*^9}, {
  3.9068236773461313`*^9, 
  3.9068238290380697`*^9}},ExpressionUUID->"b0cbce34-35b1-434a-b0dd-\
8db8f9ae2592"],

Cell[CellGroupData[{

Cell["Diagonalization", "Subsection",
 CellChangeTimes->{{3.906898585312261*^9, 
  3.9068985891245985`*^9}},ExpressionUUID->"5bd0e29d-dfa7-4c2f-a0dd-\
e6b96506f6a4"],

Cell[TextData[{
 "The diagonalization theorem works provided there are enough LI \
eigenvectors. If ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", 
    RowBox[{"P", " ", "D", " ", 
     SuperscriptBox["P", 
      RowBox[{"-", "1"}]]}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "51a524c3-6e8c-425e-9c92-74d8d9bbe0d3"],
 " then ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["P", 
     RowBox[{"-", "1"}]], "A", " ", "P", " "}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "0371dda2-25b7-4e74-8548-76e46d05aebd"],
 "should be diagonal."
}], "Text",
 CellChangeTimes->{{3.9068238328700066`*^9, 3.9068238844640713`*^9}, {
  3.9068967769262476`*^9, 3.906896844614254*^9}, {3.906896987687297*^9, 
  3.9068970670351515`*^9}},ExpressionUUID->"49d23c7f-35ad-4570-9aa5-\
0454496c0416"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"A", "=", 
   RowBox[{"(", GridBox[{
      {"0.9", "0.1", "0.3", "0.2"},
      {"0.1", "0.8", "0", "0"},
      {"0", "0.1", "0.7", "0"},
      {"0", "0", "0", "0.8"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"v1", ",", "v2", ",", "v3", ",", "v4"}], "}"}], "=", 
   RowBox[{"Eigenvectors", "[", "A", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"v1", ",", "v2", ",", "v3", ",", "v4"}], "}"}], 
    "\[Transpose]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Chop", "[", 
  RowBox[{
   RowBox[{"Inverse", "[", "P", "]"}], ".", "A", ".", "P"}], "]"}]}], "Input",
 CellChangeTimes->{{3.906896848437614*^9, 3.9068968486781816`*^9}, {
  3.9068968827790036`*^9, 3.9068969768696795`*^9}, {3.906897049036618*^9, 
  3.9068970840650406`*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"679dd151-20d0-4d61-adad-40b74d24a2ac"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1.`", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0.8000000000000002`", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", 
     RowBox[{"0.7`", "\[VeryThinSpace]", "+", 
      RowBox[{"0.09999999999999995`", " ", "\[ImaginaryI]"}]}], ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", 
     RowBox[{"0.7`", "\[VeryThinSpace]", "-", 
      RowBox[{"0.10000000000000009`", " ", "\[ImaginaryI]"}]}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.9068969339450183`*^9, 3.9068969772598286`*^9}, 
   3.906897086861274*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"0f9e803e-5688-412c-8e24-9cd7c6166d60"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Eigenvector Interpretation", "Subsection",
 CellChangeTimes->{{3.9068985468478055`*^9, 
  3.906898569001154*^9}},ExpressionUUID->"03e96b4d-1079-4c6d-93a0-\
4650bdbee063"],

Cell["\<\
We want to know how to think about eigenvectors. How do you explain \
eigenvectors to your precocious young cousin? \
\>", "Text",
 CellChangeTimes->{{3.9069052579573994`*^9, 
  3.906905305795189*^9}},ExpressionUUID->"b30e674c-1507-4b8f-9ac8-\
a13789d755a3"],

Cell[CellGroupData[{

Cell["Car Example", "Subsubsection",
 CellChangeTimes->{{3.9068986054180684`*^9, 
  3.9068986129676943`*^9}},ExpressionUUID->"dba80fe0-a43c-4505-b2df-\
da5690bbbd6f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"A", "=", 
   RowBox[{"(", GridBox[{
      {"0.9", "0.1", "0.3", "0.2"},
      {"0.1", "0.8", "0", "0"},
      {"0", "0.1", "0.7", "0"},
      {"0", "0", "0", "0.8"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"v1", ",", "v2", ",", "v3", ",", "v4"}], "}"}], "=", 
   RowBox[{"Eigenvectors", "[", "A", "]"}]}], ";"}]}], "Input",
 CellLabel->"In[65]:=",ExpressionUUID->"6afb75c2-2bc5-4603-a9a1-2a319d0f2bf8"],

Cell["\<\
Real eigenvalues are real stretches along the real eigenvectors. In this case \
the first eigenvector does not shrink or grow. \
\>", "Text",
 CellChangeTimes->{{3.9068238328700066`*^9, 3.9068238844640713`*^9}, {
   3.9068967769262476`*^9, 3.906896837280079*^9}, {3.906897097902479*^9, 
   3.9068973078546762`*^9}, 3.9068976465427723`*^9, {3.906897705376998*^9, 
   3.9068977064388466`*^9}},ExpressionUUID->"37ab454f-54a7-493c-b4b9-\
56ed609029b4"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"v", "=", 
   RowBox[{"Chop", "[", "v1", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MaxIter", "=", "12"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"v", "=", 
      RowBox[{"A", ".", "v"}]}], ",", 
     RowBox[{"{", "MaxIter", "}"}]}], "]"}], ",", 
   RowBox[{"TableHeadings", "\[Rule]", "Automatic"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.9068976511155577`*^9, 3.9068976919172726`*^9}, {
  3.9068977263465796`*^9, 3.906897770729388*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"3defeb94-bc52-4531-a599-986693a1dd81"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      StyleBox["\[Null]",
       ShowStringCharacters->False], "1", "2", "3", "4"},
     {"1", 
      RowBox[{"-", "0.8846517369293828`"}], 
      RowBox[{"-", "0.44232586846469113`"}], 
      RowBox[{"-", "0.14744195615489694`"}], "0.`"},
     {"2", 
      RowBox[{"-", "0.8846517369293827`"}], 
      RowBox[{"-", "0.4423258684646912`"}], 
      RowBox[{"-", "0.14744195615489697`"}], "0.`"},
     {"3", 
      RowBox[{"-", "0.8846517369293827`"}], 
      RowBox[{"-", "0.44232586846469124`"}], 
      RowBox[{"-", "0.147441956154897`"}], "0.`"},
     {"4", 
      RowBox[{"-", "0.8846517369293827`"}], 
      RowBox[{"-", "0.4423258684646913`"}], 
      RowBox[{"-", "0.14744195615489702`"}], "0.`"},
     {"5", 
      RowBox[{"-", "0.8846517369293827`"}], 
      RowBox[{"-", "0.44232586846469135`"}], 
      RowBox[{"-", "0.14744195615489705`"}], "0.`"},
     {"6", 
      RowBox[{"-", "0.8846517369293827`"}], 
      RowBox[{"-", "0.44232586846469135`"}], 
      RowBox[{"-", "0.14744195615489708`"}], "0.`"},
     {"7", 
      RowBox[{"-", "0.8846517369293827`"}], 
      RowBox[{"-", "0.44232586846469135`"}], 
      RowBox[{"-", "0.14744195615489708`"}], "0.`"},
     {"8", 
      RowBox[{"-", "0.8846517369293827`"}], 
      RowBox[{"-", "0.44232586846469135`"}], 
      RowBox[{"-", "0.14744195615489708`"}], "0.`"},
     {"9", 
      RowBox[{"-", "0.8846517369293827`"}], 
      RowBox[{"-", "0.44232586846469135`"}], 
      RowBox[{"-", "0.14744195615489708`"}], "0.`"},
     {"10", 
      RowBox[{"-", "0.8846517369293827`"}], 
      RowBox[{"-", "0.44232586846469135`"}], 
      RowBox[{"-", "0.14744195615489708`"}], "0.`"},
     {"11", 
      RowBox[{"-", "0.8846517369293827`"}], 
      RowBox[{"-", "0.44232586846469135`"}], 
      RowBox[{"-", "0.14744195615489708`"}], "0.`"},
     {"12", 
      RowBox[{"-", "0.8846517369293827`"}], 
      RowBox[{"-", "0.44232586846469135`"}], 
      RowBox[{"-", "0.14744195615489708`"}], "0.`"}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{
     "Columns" -> {False, True, {False}, False}, 
      "Rows" -> {False, True, {False}, False}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$, TableHeadings -> Automatic]]]], "Output",
 CellChangeTimes->{{3.9068976540666237`*^9, 3.906897692354295*^9}, {
  3.9068977270335317`*^9, 3.9068977711044445`*^9}, {3.9069055946038074`*^9, 
  3.9069056006318617`*^9}},
 CellLabel->
  "Out[69]//TableForm=",ExpressionUUID->"b84ec3f3-7488-46a7-8b5f-\
54c091866a9a"]
}, Open  ]],

Cell["The second eigenvector gets compressed by 0.8.", "Text",
 CellChangeTimes->{{3.906897711485584*^9, 
  3.906897715047378*^9}},ExpressionUUID->"bf301c05-bc30-4bb4-8950-\
bb1f073195d3"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"v", "=", 
   RowBox[{"Chop", "[", "v2", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MaxIter", "=", "23"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"TabView", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<Data\>\"", "->", 
      RowBox[{"TableForm", "[", 
       RowBox[{
        RowBox[{"Data", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"v", "=", 
            RowBox[{"A", ".", "v"}]}], ",", 
           RowBox[{"{", "MaxIter", "}"}]}], "]"}]}], ",", 
        RowBox[{"TableHeadings", "\[Rule]", "Automatic"}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Plot\>\"", "->", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{"Data", "\[Transpose]"}], ",", 
        RowBox[{"PlotLegends", "\[Rule]", "Automatic"}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<LogPlot\>\"", "->", 
      RowBox[{"ListLogPlot", "[", 
       RowBox[{
        RowBox[{"Abs", "[", 
         RowBox[{"Data", "\[Transpose]"}], "]"}], ",", 
        RowBox[{"PlotLegends", "\[Rule]", "Automatic"}]}], "]"}]}]}], "}"}], 
   ",", "2"}], "]"}]}], "Input",
 CellChangeTimes->{{3.9068976511155577`*^9, 3.9068976919172726`*^9}, {
  3.9068977263465796`*^9, 3.9068977412496305`*^9}, {3.9068977864469604`*^9, 
  3.9068977933210316`*^9}, {3.9068979207911425`*^9, 3.906897969132984*^9}, {
  3.9068980735371356`*^9, 3.906898200287865*^9}, {3.9069055879538946`*^9, 
  3.9069055883051248`*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"2a059bd2-9f3f-4900-97a8-dc605d2b213b"],

Cell[BoxData[
 TabViewBox[{{1,"\<\"Data\"\>"->
  TagBox[
   TagBox[GridBox[{
      {
       StyleBox["\[Null]",
        ShowStringCharacters->False], "1", "2", "3", "4"},
      {"1", 
       RowBox[{"-", "5.551115123125783`*^-16"}], 
       RowBox[{"-", "0.32659863237109077`"}], 
       RowBox[{"-", "0.32659863237109127`"}], "0.6531972647421802`"},
      {"2", 
       RowBox[{"-", "9.159339953157541`*^-16"}], 
       RowBox[{"-", "0.2612789058968727`"}], 
       RowBox[{"-", "0.26127890589687297`"}], "0.5225578117937442`"},
      {"3", 
       RowBox[{"-", "1.1379786002407855`*^-15"}], 
       RowBox[{"-", "0.20902312471749826`"}], 
       RowBox[{"-", "0.20902312471749834`"}], "0.41804624943499535`"},
      {"4", 
       RowBox[{"-", "1.27675647831893`*^-15"}], 
       RowBox[{"-", "0.16721849977399872`"}], 
       RowBox[{"-", "0.16721849977399866`"}], "0.3344369995479963`"},
      {"5", 
       RowBox[{"-", "1.3461454173580023`*^-15"}], 
       RowBox[{"-", "0.13377479981919912`"}], 
       RowBox[{"-", "0.13377479981919893`"}], "0.2675495996383971`"},
      {"6", 
       RowBox[{"-", "1.3808398868775384`*^-15"}], 
       RowBox[{"-", "0.10701983985535944`"}], 
       RowBox[{"-", "0.10701983985535916`"}], "0.2140396797107177`"},
      {"7", 
       RowBox[{"-", "1.3877787807814457`*^-15"}], 
       RowBox[{"-", "0.0856158718842877`"}], 
       RowBox[{"-", "0.08561587188428735`"}], "0.17123174376857417`"},
      {"8", 
       RowBox[{"-", "1.3877787807814457`*^-15"}], 
       RowBox[{"-", "0.0684926975074303`"}], 
       RowBox[{"-", "0.06849269750742991`"}], "0.13698539501485935`"},
      {"9", 
       RowBox[{"-", "1.3808398868775384`*^-15"}], 
       RowBox[{"-", "0.05479415800594438`"}], 
       RowBox[{"-", "0.05479415800594396`"}], "0.10958831601188748`"},
      {"10", 
       RowBox[{"-", "1.3739009929736312`*^-15"}], 
       RowBox[{"-", "0.043835326404755647`"}], 
       RowBox[{"-", "0.04383532640475521`"}], "0.08767065280950999`"},
      {"11", 
       RowBox[{"-", "1.3634926521177704`*^-15"}], 
       RowBox[{"-", "0.03506826112380466`"}], 
       RowBox[{"-", "0.03506826112380421`"}], "0.070136522247608`"},
      {"12", 
       RowBox[{"-", "1.35828848168984`*^-15"}], 
       RowBox[{"-", "0.028054608899043862`"}], 
       RowBox[{"-", "0.028054608899043414`"}], "0.0561092177980864`"},
      {"13", 
       RowBox[{"-", "1.3530843112619095`*^-15"}], 
       RowBox[{"-", "0.022443687119235226`"}], 
       RowBox[{"-", "0.022443687119234775`"}], "0.04488737423846912`"},
      {"14", 
       RowBox[{"-", "1.349614864309956`*^-15"}], 
       RowBox[{"-", "0.017954949695388318`"}], 
       RowBox[{"-", "0.017954949695387867`"}], "0.035909899390775296`"},
      {"15", 
       RowBox[{"-", "1.3470127790959907`*^-15"}], 
       RowBox[{"-", "0.01436395975631079`"}], 
       RowBox[{"-", "0.014363959756310336`"}], "0.02872791951262024`"},
      {"16", 
       RowBox[{"-", "1.343543332144037`*^-15"}], 
       RowBox[{"-", "0.011491167805048769`"}], 
       RowBox[{"-", "0.011491167805048315`"}], "0.022982335610096192`"},
      {"17", 
       RowBox[{"-", "1.3418086086680603`*^-15"}], 
       RowBox[{"-", "0.00919293424403915`"}], 
       RowBox[{"-", "0.009192934244038695`"}], "0.018385868488076954`"},
      {"18", 
       RowBox[{"-", "1.3405075660610777`*^-15"}], 
       RowBox[{"-", "0.007354347395231455`"}], 
       RowBox[{"-", "0.007354347395231001`"}], "0.014708694790461564`"},
      {"19", 
       RowBox[{"-", "1.339206523454095`*^-15"}], 
       RowBox[{"-", "0.0058834779161852984`"}], 
       RowBox[{"-", "0.0058834779161848465`"}], "0.011766955832369252`"},
      {"20", 
       RowBox[{"-", "1.3387728425851009`*^-15"}], 
       RowBox[{"-", "0.0047067823329483725`"}], 
       RowBox[{"-", "0.004706782332947922`"}], "0.009413564665895402`"},
      {"21", 
       RowBox[{"-", "1.3383391617161067`*^-15"}], 
       RowBox[{"-", "0.003765425866358832`"}], 
       RowBox[{"-", "0.003765425866358383`"}], "0.007530851732716322`"},
      {"22", 
       RowBox[{"-", "1.3379054808471125`*^-15"}], 
       RowBox[{"-", "0.0030123406930871997`"}], 
       RowBox[{"-", "0.003012340693086751`"}], "0.006024681386173058`"},
      {"23", 
       RowBox[{"-", "1.3374717999781183`*^-15"}], 
       RowBox[{"-", "0.002409872554469894`"}], 
       RowBox[{"-", "0.002409872554469445`"}], "0.004819745108938447`"}
     },
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{
      "Columns" -> {False, True, {False}, False}, 
       "Rows" -> {False, True, {False}, False}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[2.0999999999999996`]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
   Function[BoxForm`e$, 
    TableForm[BoxForm`e$, TableHeadings -> Automatic]]]}, {2,"\<\"Plot\"\>"->
  TemplateBox[{
    GraphicsBox[{{}, {{{
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[CompressedData["
1:eJxTTMoPSmViYGAQB2IQDQEf7CH0kT1QAQcw2XAByueA8q9A+QIQPsN1KF8E
wne4AeVLQPgPYHwZqPqbUL4CGl8JTb0KhH8AxleD8CfA+BoQfgWMrwXhJ8D4
OhB+AIyvB+G7wPgGEL4JjG8I4evA+EYQvhqMbwzhK8D4JhC+HIxvCuHLwPhm
EL4UjG8O4Uvc2AMAX182ow==
          "]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[CompressedData["
1:eJxTTMoPSmViYGAQB2IQDQEf7C0+2Hz+++zKfqiAw++evxqnd1yA8jkc9KuT
+FwPnoLyBRwmJL0ozEo/CuWLONz3U4jukD8I5Us45G80/rEsdTeUL+OQ/OXQ
z9evtkL5Cg6fNc8f39OxEcpXckgr8775i3cNlK/iYHx0UdXUwmVQvpqDLYv/
1PIvC6F8DYc9l5+8i9g1B8rXcvjIvz2i6vc0KF/HYevNH24nkiZB+XoOXIfV
uW9l9UL5Bg57mYLz13W0Q/mGDhJzSvfvu9wE5Rs59OvumTFdvg7KN3ZYvu+k
sJtkBZRv4hB8ht05270Yyjd12PWwaN7qG3lQvpnD3xfREmFrM6B8cwcGpceV
9/Ym7wcAm6V2MA==
          "]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[1.6]], 
         PointBox[CompressedData["
1:eJxTTMoPSmViYGAQB2IQDQEf7B0/2Hz+++zKfqiAA0PvX43TOy5A+RwORtVJ
fK4HT0H5Ag59SS8Ks9KPQvkiDjf8FKI75A9C+RIO0RuNfyxL3Q3lyzh4fTn0
8/WrrVC+gsN1zfPH93RshPKVHLTKvG/+4l0D5as4fDmyqGpq4TIoX83hL7P/
1PIvC6F8DQfry0/eReyaA+VrOeTzb4+o+j0NytdxML75w+1E0iQoX8+B5ZA6
962sXijfwGE7Y3D+uo52KN/QQWh26f59l5ugfCOHFu09M6bL10H5xg7z9pwU
dpOsgPJNHHxOsTtnuxdD+aYO6+4WzVt9Iw/KN3P49CRaImxtBpRv7vBV9nHl
vb3J+wH4tnVJ
          "]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.922526, 0.385626, 0.209179], 
          AbsoluteThickness[1.6]], 
         PointBox[CompressedData["
1:eJxTTMoPSmViYGAQB2IQDQEf7HU+2Hz+++yJPVTA4UPPX43TOx5A+RwOUtVJ
fK4Hb0H5Ag41SS8Ks9KvQvkiDqf8FKI75C9C+RIOLhuNfyxLPQ3lyziYfzn0
8/Wro1C+gsMxzfPH93QchPKVHLjKvG/+4t0D5as4XD2yqGpq4TYoX83hHrP/
1PIvG6F8DYe/l568i9i1BsrXcjDk3x5R9XsZlK/j8OXGD7cTSYugfD2H9oPq
3Ley5kL5Bg6WjMH56zqmQ/mGDlNmle7fd3kSlG/k0K61Z8Z0+T4o39hhwe6T
wm6SHVC+iYPvSXbnbPdmKN/UYf3tonmrb9RB+WYOnx9FS4StrYDyzR2+ST+u
vLe32B4AaiFtCg==
          "]]}}}, {{}, {}}}, {
     DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
      NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
      AxesLabel -> {None, None}, AxesOrigin -> {0., 0}, DisplayFunction :> 
      Identity, Frame -> {{False, False}, {False, False}}, 
      FrameLabel -> {{None, None}, {None, None}}, 
      FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
      GridLines -> {None, None}, GridLinesStyle -> Directive[
        GrayLevel[0.5, 0.4]], 
      Method -> {
       "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& )}}, 
      PlotRange -> {{0., 23.}, {-0.1645641977469764, 0.12815590822910894`}}, 
      PlotRangeClipping -> True, PlotRangePadding -> {{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
    FormBox[
     FormBox[
      TemplateBox[{
        TagBox[
         FrameBox[
          StyleBox["1", Smaller, StripOnInput -> False]], "Placeholder"], 
        TagBox[
         FrameBox[
          StyleBox["2", Smaller, StripOnInput -> False]], "Placeholder"], 
        TagBox[
         FrameBox[
          StyleBox["3", Smaller, StripOnInput -> False]], "Placeholder"], 
        TagBox[
         FrameBox[
          StyleBox["4", Smaller, StripOnInput -> False]], "Placeholder"]}, 
       "PointLegend", DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxDividers -> {
                   "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
             "Grid"], Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), 
       InterpretationFunction :> (RowBox[{"PointLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                ",", 
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                ",", 
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.560181`", ",", "0.691569`", ",", "0.194885`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                ",", 
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6150173333333333, 0.25708400000000003`, 
                    0.13945266666666667`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.922526`", ",", "0.385626`", ",", "0.209179`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.922526, 0.385626, 0.209179]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.922526, 0.385626, 0.209179], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], 
                  "]"}]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{
                TagBox[#, HoldForm], ",", 
                TagBox[#2, HoldForm], ",", 
                TagBox[#3, HoldForm], ",", 
                TagBox[#4, HoldForm]}], "}"}], ",", 
            RowBox[{"LegendMarkers", "\[Rule]", 
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
            ",", 
            RowBox[{"Joined", "\[Rule]", 
              RowBox[{"{", 
                RowBox[{"False", ",", "False", ",", "False", ",", "False"}], 
                "}"}]}], ",", 
            RowBox[{"LabelStyle", "\[Rule]", 
              RowBox[{"{", "}"}]}], ",", 
            RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
       Editable -> True], TraditionalForm], TraditionalForm]},
   "Legended",
   DisplayFunction->(GridBox[{{
       TagBox[
        ItemBox[
         PaneBox[
          TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
          BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
        "SkipImageSizeLevel"], 
       ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
     GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
     AutoDelete -> False, GridBoxItemSize -> Automatic, 
     BaselinePosition -> {1, 1}]& ),
   Editable->True,
   InterpretationFunction->(RowBox[{"Legended", "[", 
      RowBox[{#, ",", 
        RowBox[{"Placed", "[", 
          RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}, {
  3,"\<\"LogPlot\"\>"->
  TemplateBox[{
    GraphicsBox[{{}, {{{
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[CompressedData["
1:eJxTTMoPSmViYGAQB2IQDQEf7CecTs/2neB4ACrgYLvuIrNJAIzP4cAqf8wu
2wTGF3BYzOq2fIMqjC/iYOT5r/aVHIwv4fDi4ePlK6RhfBkHfo8l6SxwvgIa
XwlNvYoDj/6P3b4yML6aQwzzz9dusjC+hoPd1ItWR+B8LYegd+dYnOD26zg8
PL1OdRqcr+fw4vPmpKtwvoHDYqPjTzTlYXxDh4NOx6xC4Hwjhz9tFSwlcL6x
w9mNgtcmw/kmDv3f2IrnwfmmDqen3BVYCeebOTzbOHX9Zjjf3MGvWN9/H5AP
AKKxYis=
          "]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[CompressedData["
1:eJxTTMoPSmViYGAQB2IQDQEf7B2SOb61PP+4Hyrg0Lzt97vmyq9QPofDUc73
z5u4f0L5Ag5ssY8eNM79A+WLOCjfeJVzQJzhAIQv4XCoMeXl/geMUL6MQ4L2
vdT9K5mhfAWHf1fCH+0rYoXylRxm1V2M22fNDuWrOJhqeN/ey8IJ5as5nLt4
JHzvWS4oX8Mhtdruyp5pPFC+lsNPlR0Be+L5oHwdB9fnM57FighA+XoOPHuu
Lrn7A8Y3cDg/QSg59q4glG/oMCHVX/HuQSEo38jBx6rnfswyYSjf2IGF/+Tc
O10iUL6Jw9bHrDEx+aJQvqlD3A4nqTvBYlC+mcOfnvob0RbiUL65Q3/inmm3
ZSQOAAB73W2W
          "]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[1.6]], 
         PointBox[CompressedData["
1:eJxTTMoPSmViYGAQB2IQDQEf7K2SOb61PP+4HyrgULft97vmyq9QPofDYc73
z5u4f0L5Ag4csY8eNM79A+WLOKjdeJVzQJzhAIQv4XCiMeXl/geMUL6MQ6b2
vdT9K5mhfAUH7qvhj/YVsUL5Sg6r6y7G7bNmh/JVHLw1vG/vZeGE8tUcXl08
Er73LBeUr+HQWW13Zc80Hihfy0FddUfAnng+KF/HIen5jGexIgJQvp6D/p6r
S+7+gPENHP5MEEqOvSsI5Rs6HE/1V7x7UAjKN3KYZNVzP2aZMJRv7BDFf3Lu
nS4RKN/EQeEJa0xMviiUb+rwZIeT1J1gMSjfzGFJb/2NaAtxKN/cITFpz7Tb
MhIHAMhxbO8=
          "]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.922526, 0.385626, 0.209179], 
          AbsoluteThickness[1.6]], 
         PointBox[CompressedData["
1:eJxTTMoPSmViYGAQB2IQDQEf7D0kdW/1Ot7eDxVw0DH+e+/IkSdQPofDlpuP
Lxx68RrKF3CQc0hNTGj7COWLOCRNjoiKl/gK5Us4LH3mHRy36geUL+Pw0tLe
J9bmD5Sv4KDba+Qac+4/lK/kYPFBaL7uBsYDEL6Kw+2ZPdK6lcxQvppDjTPb
DB0nVihfw0Hubb2IDjc7lK/lcHDazwnaVzigfB2HZIdiXu25XFC+ngPrqzed
Wmk8UL6Bw/LJaWxa+nxQvqGDp+2DJs0f/FC+kUPp5zX1Ux4IQPnGDm4nXtqK
HBWE8k0cxOeq/Zm8UgjKN3V4UZi8S7hPGMo3c9jptqBicpEIlG/u0CV910w4
XPQAADwxZVE=
          "]]}}}, {{}, {}}}, {
     DisplayFunction -> Identity, GridLines -> {None, None}, DisplayFunction -> 
      Identity, DisplayFunction -> Identity, DisplayFunction -> Identity, 
      DisplayFunction -> Identity, AspectRatio -> 
      NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
      AxesLabel -> {None, None}, AxesOrigin -> {0., -37.84295091189987}, 
      DisplayFunction :> Identity, Frame -> {{False, False}, {False, False}}, 
      FrameLabel -> {{None, None}, {None, None}}, FrameTicks -> {{
         Charting`ScaledTicks[{Log, Exp}], 
         Charting`ScaledFrameTicks[{Identity, Identity}]}, {
        Automatic, Automatic}}, GridLines -> {None, None}, GridLinesStyle -> 
      Directive[
        GrayLevel[0.5, 0.4]], 
      Method -> {
       "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            Identity[
             Part[#, 1]], 
            Exp[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            Identity[
             Part[#, 1]], 
            Exp[
             Part[#, 2]]}& )}}, 
      PlotRange -> {{0., 23.}, {-37.84295091189987, -0.4258761053682929}}, 
      PlotRangeClipping -> True, PlotRangePadding -> {{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}}, Ticks -> {Automatic, 
        Charting`ScaledTicks[{Log, Exp}]}}], 
    FormBox[
     FormBox[
      TemplateBox[{
        TagBox[
         FrameBox[
          StyleBox["1", Smaller, StripOnInput -> False]], "Placeholder"], 
        TagBox[
         FrameBox[
          StyleBox["2", Smaller, StripOnInput -> False]], "Placeholder"], 
        TagBox[
         FrameBox[
          StyleBox["3", Smaller, StripOnInput -> False]], "Placeholder"], 
        TagBox[
         FrameBox[
          StyleBox["4", Smaller, StripOnInput -> False]], "Placeholder"]}, 
       "PointLegend", DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxDividers -> {
                   "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
             "Grid"], Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), 
       InterpretationFunction :> (RowBox[{"PointLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                ",", 
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                ",", 
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.560181`", ",", "0.691569`", ",", "0.194885`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                ",", 
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6150173333333333, 0.25708400000000003`, 
                    0.13945266666666667`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.922526`", ",", "0.385626`", ",", "0.209179`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.922526, 0.385626, 0.209179]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.922526, 0.385626, 0.209179], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], 
                  "]"}]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{
                TagBox[#, HoldForm], ",", 
                TagBox[#2, HoldForm], ",", 
                TagBox[#3, HoldForm], ",", 
                TagBox[#4, HoldForm]}], "}"}], ",", 
            RowBox[{"LegendMarkers", "\[Rule]", 
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
            ",", 
            RowBox[{"Joined", "\[Rule]", 
              RowBox[{"{", 
                RowBox[{"False", ",", "False", ",", "False", ",", "False"}], 
                "}"}]}], ",", 
            RowBox[{"LabelStyle", "\[Rule]", 
              RowBox[{"{", "}"}]}], ",", 
            RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
       Editable -> True], TraditionalForm], TraditionalForm]},
   "Legended",
   DisplayFunction->(GridBox[{{
       TagBox[
        ItemBox[
         PaneBox[
          TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
          BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
        "SkipImageSizeLevel"], 
       ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
     GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
     AutoDelete -> False, GridBoxItemSize -> Automatic, 
     BaselinePosition -> {1, 1}]& ),
   Editable->True,
   InterpretationFunction->(RowBox[{"Legended", "[", 
      RowBox[{#, ",", 
        RowBox[{"Placed", "[", 
          RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}}, 2]], "Output",
 CellChangeTimes->{
  3.906897741827179*^9, {3.9068977876810465`*^9, 3.906897793734332*^9}, {
   3.906897922535434*^9, 3.9068979372147264`*^9}, 3.906897969606121*^9, {
   3.906898094106017*^9, 3.90689812732463*^9}, {3.906898164718364*^9, 
   3.9068982007012997`*^9}, {3.906905588819714*^9, 3.9069056044635224`*^9}},
 CellLabel->"Out[72]=",ExpressionUUID->"71878f02-4dfe-4386-8d52-abd04427bd39"]
}, Open  ]],

Cell[TextData[{
 "We want to know how to interpret the complex conjugate pair ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0.7", "\[PlusMinus]", 
    RowBox[{"0.1", " ", "\[DoubleStruckI]"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "2d3fd3ae-e1e6-4532-acec-b562f8a9e737"],
 " of eigenvalues with matching eigenvectors "
}], "Text",
 CellChangeTimes->{{3.9068238328700066`*^9, 3.9068238844640713`*^9}, {
  3.9068967769262476`*^9, 3.906896837280079*^9}, {3.906897097902479*^9, 
  3.9068973078546762`*^9}, {3.906897820080015*^9, 
  3.906897824822414*^9}},ExpressionUUID->"6e565566-4964-4a92-acde-\
6906abcf4df2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"v3", ",", "v4"}], "}"}]], "Input",
 CellChangeTimes->{{3.9068973094476614`*^9, 3.906897312151514*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"ae82137f-f957-4b7a-add2-367a430ee691"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"0.7071067811865482`", "\[VeryThinSpace]", "+", 
      RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ",", 
     RowBox[{
      RowBox[{"-", "0.3535533905932725`"}], "-", 
      RowBox[{"0.35355339059327273`", " ", "\[ImaginaryI]"}]}], ",", 
     RowBox[{
      RowBox[{"-", "0.3535533905932751`"}], "+", 
      RowBox[{"0.35355339059327334`", " ", "\[ImaginaryI]"}]}], ",", 
     RowBox[{"0.`", "\[VeryThinSpace]", "+", 
      RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"0.7071067811865482`", "\[VeryThinSpace]", "+", 
      RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ",", 
     RowBox[{
      RowBox[{"-", "0.3535533905932725`"}], "+", 
      RowBox[{"0.35355339059327273`", " ", "\[ImaginaryI]"}]}], ",", 
     RowBox[{
      RowBox[{"-", "0.3535533905932751`"}], "-", 
      RowBox[{"0.35355339059327334`", " ", "\[ImaginaryI]"}]}], ",", 
     RowBox[{"0.`", "\[VeryThinSpace]", "+", 
      RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9068973131505327`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"abfce851-37de-4ed6-a85b-c0ec7e63b5c4"]
}, Open  ]],

Cell["We know how to check they are eigenvectors", "Text",
 CellChangeTimes->{{3.9068973296137085`*^9, 
  3.9068973535699706`*^9}},ExpressionUUID->"be82c843-ced3-4032-a68f-\
fc02180d3674"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Lambda]3", ",", "\[Lambda]4"}], "}"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"0.7", "+", 
      RowBox[{"0.1", " ", "I"}]}], ",", " ", 
     RowBox[{"0.7", " ", "-", " ", 
      RowBox[{"0.1", " ", "I"}]}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(", 
   RowBox[{"A", "-", 
    RowBox[{"\[Lambda]3", " ", 
     RowBox[{"IdentityMatrix", "[", "4", "]"}]}]}], ")"}], ".", 
  "v3"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(", 
   RowBox[{"A", "-", 
    RowBox[{"\[Lambda]4", " ", 
     RowBox[{"IdentityMatrix", "[", "4", "]"}]}]}], ")"}], ".", 
  "v4"}]}], "Input",
 CellChangeTimes->{{3.9068973553664093`*^9, 3.906897483811373*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"ba08650d-fdfd-4ce6-86fa-d03c8e6aa8a7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "8.326672684688674`*^-17"}], "-", 
    RowBox[{"8.326672684688674`*^-17", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"2.636779683484747`*^-16", "-", 
    RowBox[{"5.551115123125783`*^-17", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"8.326672684688674`*^-17", "+", 
    RowBox[{"2.42861286636753`*^-16", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"0.`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{{3.9068973881322894`*^9, 3.906897425765165*^9}, {
   3.9068974601775293`*^9, 3.9068974842199793`*^9}, 3.9069056316092587`*^9},
 CellLabel->"Out[74]=",ExpressionUUID->"d693133f-6223-41cd-a756-2398fb96a47b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "8.326672684688674`*^-17"}], "+", 
    RowBox[{"8.326672684688674`*^-17", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"2.636779683484747`*^-16", "+", 
    RowBox[{"5.551115123125783`*^-17", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"8.326672684688674`*^-17", "-", 
    RowBox[{"2.42861286636753`*^-16", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"0.`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{{3.9068973881322894`*^9, 3.906897425765165*^9}, {
   3.9068974601775293`*^9, 3.9068974842199793`*^9}, 3.9069056316162367`*^9},
 CellLabel->"Out[75]=",ExpressionUUID->"ce1492ab-483c-4d82-aba2-2e592ce3370b"]
}, Open  ]],

Cell[TextData[{
 "Lets see if we can see what the complex eigen stuff looks like. The ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", "n"], "=", 
    RowBox[{"A", " ", 
     SubscriptBox["x", 
      RowBox[{"n", "-", "1"}]]}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "baedb906-b113-4f45-9f7a-fc9e6c643b8f"],
 " decays and changes signs for both the real and imaginary parts of the \
eigenvector! "
}], "Text",
 CellChangeTimes->{{3.906897508947996*^9, 3.9068975627593946`*^9}, {
  3.906897597191512*^9, 3.9068976219354825`*^9}, {3.90689836888058*^9, 
  3.9068983738284626`*^9}, {3.9068984548809204`*^9, 
  3.9068985228261414`*^9}},ExpressionUUID->"667dfe0a-f0ee-4d42-a101-\
de173a03533d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"v", "=", 
   RowBox[{"Im", "[", "v3", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MaxIter", "=", "32"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"TabView", "[", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\"\<Data\>\"", "->", 
     RowBox[{"TableForm", "[", 
      RowBox[{
       RowBox[{"Data", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"v", "=", 
           RowBox[{"A", ".", "v"}]}], ",", 
          RowBox[{"{", "MaxIter", "}"}]}], "]"}]}], ",", 
       RowBox[{"TableHeadings", "\[Rule]", "Automatic"}]}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Plot\>\"", "->", 
     RowBox[{"ListPlot", "[", 
      RowBox[{
       RowBox[{"Data", "\[Transpose]"}], ",", 
       RowBox[{"PlotLegends", "\[Rule]", "Automatic"}]}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<LogPlot\>\"", "->", 
     RowBox[{"ListLogPlot", "[", 
      RowBox[{
       RowBox[{"Abs", "[", 
        RowBox[{"Data", "\[Transpose]"}], "]"}], ",", 
       RowBox[{"PlotLegends", "\[Rule]", "Automatic"}]}], "]"}]}]}], "}"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.9068975892940884`*^9, 3.906897636542981*^9}, {
   3.9068978582372384`*^9, 3.906897912957879*^9}, {3.9068979993207293`*^9, 
   3.906898039432305*^9}, {3.90689822176749*^9, 3.9068982449751396`*^9}, 
   3.9068982958605003`*^9, {3.9068983336040106`*^9, 3.90689834383069*^9}, {
   3.906898430277195*^9, 3.906898430508669*^9}},
 CellLabel->
  "In[154]:=",ExpressionUUID->"af86a0c9-f8d8-4b20-9989-ea83e199f8ad"],

Cell[BoxData[
 TabViewBox[{{1,"\<\"Data\"\>"->
  TagBox[
   TagBox[GridBox[{
      {
       StyleBox["\[Null]",
        ShowStringCharacters->False], "1", "2", "3", "4"},
      {"1", "0.07071067811865472`", 
       RowBox[{"-", "0.2828427124746182`"}], "0.21213203435596403`", "0.`"},
      {"2", "0.09899494936611665`", 
       RowBox[{"-", "0.21920310216782907`"}], "0.120208152801713`", "0.`"},
      {"3", "0.10323759005323599`", 
       RowBox[{"-", "0.16546298679765162`"}], "0.062225396744416184`", "0.`"},
      {"4", "0.09503515139147209`", 
       RowBox[{"-", "0.12204663043279769`"}], "0.027011479041326163`", "0.`"},
      {"5", "0.08143041692144296`", 
       RowBox[{"-", "0.08813378920709095`"}], "0.006703372285648542`", "0.`"},
      {"6", "0.06648500799428414`", 
       RowBox[{"-", "0.06236398967352846`"}], 
       RowBox[{"-", "0.004121018320755115`"}], "0.`"},
      {"7", "0.052363802731276346`", 
       RowBox[{"-", "0.043242690939394354`"}], 
       RowBox[{"-", "0.009121111791881426`"}], "0.`"},
      {"8", "0.040066819826644846`", 
       RowBox[{"-", "0.02935777247838785`"}], 
       RowBox[{"-", "0.010709047348256433`"}], "0.`"},
      {"9", "0.02991164639166465`", 
       RowBox[{"-", "0.019479536000045795`"}], 
       RowBox[{"-", "0.010432110391618288`"}], "0.`"},
      {"10", "0.02184289503500812`", 
       RowBox[{"-", "0.01259246416087017`"}], 
       RowBox[{"-", "0.009250430874137381`"}], "0.`"},
      {"11", "0.015624229853179074`", 
       RowBox[{"-", "0.007889681825195324`"}], 
       RowBox[{"-", "0.007734548027983184`"}], "0.`"},
      {"12", "0.01095247427694668`", 
       RowBox[{"-", "0.004749322474838353`"}], 
       RowBox[{"-", "0.006203151802107761`"}], "0.`"},
      {"13", "0.007521349061135848`", 
       RowBox[{"-", "0.0027042105521760144`"}], 
       RowBox[{"-", "0.004817138508959267`"}], "0.`"},
      {"14", "0.005053651547116882`", 
       RowBox[{"-", "0.0014112335356272266`"}], 
       RowBox[{"-", "0.0036424180114890885`"}], "0.`"},
      {"15", "0.0033144376353957455`", 
       RowBox[{"-", "0.000623621673790093`"}], 
       RowBox[{"-", "0.0026908159616050847`"}], "0.`"},
      {"16", "0.0021133869159956366`", 
       RowBox[{"-", "0.00016745357549249987`"}], 
       RowBox[{"-", "0.0019459333405025686`"}], "0.`"},
      {"17", "0.0013015228646960524`", "0.0000773758312055638`", 
       RowBox[{"-", "0.001378898695901048`"}], "0.`"},
      {"18", "0.0007654385525766894`", "0.00019205295143405628`", 
       RowBox[{"-", "0.0009574915040101772`"}], "0.`"},
      {"19", "0.0004208525412593729`", "0.00023018621640491396`", 
       RowBox[{"-", "0.0006510387576637184`"}], "0.`"},
      {"20", "0.00020647428147481153`", "0.00022623422724986846`", 
       RowBox[{"-", "0.00043270850872411147`"}], "0.`"},
      {"21", "0.00007863772343508381`", "0.00020163480994737595`", 
       RowBox[{"-", "0.00028027253338189115`"}], "0.`"},
      {"22", "6.855672071745696`*^-6", "0.00016917162030140917`", 
       RowBox[{"-", "0.0001760272923725862`"}], "0.`"},
      {"23", 
       RowBox[{"-", "0.000029720920817063814`"}], "0.0001360228634483019`", 
       RowBox[{"-", "0.00010630194263066941`"}], "0.`"},
      {"24", 
       RowBox[{"-", "0.00004503712517972807`"}], "0.00010584619867693514`", 
       RowBox[{"-", "0.000060809073496638395`"}], "0.`"},
      {"25", 
       RowBox[{"-", "0.00004819151484305327`"}], "0.0000801732464235753`", 
       RowBox[{"-", "0.00003198173157995336`"}], "0.`"},
      {"26", 
       RowBox[{"-", "0.000044949558190376414`"}], "0.000059319445654554925`", 
       RowBox[{"-", "0.000014369887463609818`"}], "0.`"},
      {"27", 
       RowBox[{"-", "0.00003883362404496623`"}], "0.0000429606007046063`", 
       RowBox[{"-", "4.12697665907138`*^-6"}], "0.`"},
      {"28", 
       RowBox[{"-", "0.00003189229456773039`"}], "0.000030485118159188414`", 
       "1.4071764091106637`*^-6", "0.`"},
      {"29", 
       RowBox[{"-", "0.000025232400372305308`"}], "0.000021198865070577694`", 
       "4.0335353022963065`*^-6", "0.`"},
      {"30", 
       RowBox[{"-", "0.000019379213237328116`"}], "0.000014435852019231624`", 
       "4.943361218665184`*^-6", "0.`"},
      {"31", 
       RowBox[{"-", "0.000014514698346072588`"}], "9.610760291652489`*^-6", 
       "4.903938054988791`*^-6", "0.`"},
      {"32", 
       RowBox[{"-", "0.000010630971065803443`"}], "6.237138398714732`*^-6", 
       "4.393832667657402`*^-6", "0.`"}
     },
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{
      "Columns" -> {False, True, {False}, False}, 
       "Rows" -> {False, True, {False}, False}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[2.0999999999999996`]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
   Function[BoxForm`e$, 
    TableForm[BoxForm`e$, TableHeadings -> Automatic]]]}, {2,"\<\"Plot\"\>"->
  TemplateBox[{
    GraphicsBox[{{}, {{{
         Directive[
          PointSize[0.009166666666666668], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[CompressedData["
1:eJxTTMoPSmViYGBQAGIQDQEf7DmS/wdKSG2yhwo4OKr8X7o7fCeUz+FwS+p/
xPHcXVC+gINbgpGzZcgOKF/EQevY5I3zb2yB8iUcXtQxhWuyboTyZRxOmRWv
yD2/CspXcLh4dl7i4uYlUL6Sw14bsTkaC+dB+SoOtxV87/+OnQblqzkovvmy
cMb/fihfw4ExdrGZQ14blK/lcK3uyuEt5+qgfB2HN+1vHJU3l0D5eg58/76o
P1TLhvINHJz5Wb6JByRC+YYOXrqPO34HhUL5Rg7yv4uPfRPxhPKNHcxmbXy2
e4o1lG/isPrjokkKAtpQvqlDzQPDs55zRaB8M4cDB/ROWRy8YwfhmzvoXMtR
UNP6vw/Ct3BoWNhx7fgc9v0QvqWD2JmC6+ounFC+lcOzIDV+9okweWuHHt1a
Tc0YFijfxsF+ztanTTsYoHxbh1kJmyJdS39BzbdzcIpdlSIY9AXKt3fg7oz9
3FLwDsp3cHgjvLSz1PvZPgBc+4t3
          "]]}, {
         Directive[
          PointSize[0.009166666666666668], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[CompressedData["
1:eJwtyFsogwEcBfDPcktyaaMZxVx2sc/aDGPs20nSUGrLopRbeJPbRIQ9zbUU
b8qKBzzxNso0idQSxbaWeBEpMfLgEnJp/1On0++I27rNHTyGYTL++r+hPBs+
235MQtGZmw44YsdvA3HH5GhUGcczb/IOyQk43K3Z6OPcZAE8UpPjac5JFiJK
qAYb3CSngWvZC95lrZIz4Gt07r/GO8iZED1yk70vC+RsLPk+HvmeKbIE2zFm
xaDMRpahzmieibT2k3Nhry3/ypJ2klmIxkaGstPryUqcy30Npu4KsgoS1075
6UsOWQ2ednh90SgwhJyPMp2tWsfKyRr4mz+nDxRKcgGcjoci+VoeuRDT3xrv
blcuuQiX18XSAVZC1mLUyrMpvGJyMbxhJwGtO5Vcgu/5rWtLeBJZhyM/s7Kd
Ek8uhaUnmeHbI8lliEjkmqrefriQ9XifwL1d90rmsMxetasqg2QDrIMyv0t6
QwZM+tZZvvyC+wWTy4ee
          "]]}, {
         Directive[
          PointSize[0.009166666666666668], 
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[1.6]], 
         PointBox[CompressedData["
1:eJxTTMoPSmViYGBQAGIQDQEf7NtF/lepqJ+2hwo4qH79p/Lt6D4on8PhwOt/
1xnvrIfyBRzmlaWuebpiNpQv4lAjc+30v5JqKF/CYaf2/DzjhwX7IXwZh1cR
p5+JrWuC8hUcwur4GBe8a4XylRwY5q1Tz4uF8VUcLmUtuPD4I0y9moPbAde3
TuvqoXwNB6X8Lw8rMyqhfC0HttDNR5V2F0P5Og7rvWe7b7mWC+XrOdSs23+R
hzsNyjdwODpnA/O1h/FQvqFD3bEs49bpYVC+kYPxV+FI1gR/KN/YYeoEcTH/
UFco38TBcv7xJ0uibaB8U4fXvmmxhnFGUL6Zwzu2rrd1QupQvrlDO//L8rN3
paF8C4dwKaHbyx/yQ/mWDkJCf982H2GA8q0cjD+keB9TercPwrd2WHF9/xY/
/4tQvo0DW9HvS8dmb7eD8G0dtBZe3Pvz1QUo384hPerniSe7r0D59g7nEkus
JkyE8R0c1DU/t13PvWQHAN36mfk=
          "]]}, {
         Directive[
          PointSize[0.009166666666666668], 
          RGBColor[0.922526, 0.385626, 0.209179], 
          AbsoluteThickness[1.6]], 
         PointBox[CompressedData["
1:eJxdx0sKQFAAheGbkaGBgYHBJUmSvN/cuwZLUMa2bglIKf9fp9Pnbce6G0II
ee/5t1OJf/pPE7ZgG3ZgF5awDwdwCEdwDCdwCmdwDhdwCVdwDTdwC3dwDw/w
CE/wDC+wgvXnC7gmEA0=
          "]]}}}, {{}, {}}}, {
     DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
      NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
      AxesLabel -> {None, None}, AxesOrigin -> {0., 0}, DisplayFunction :> 
      Identity, Frame -> {{False, False}, {False, False}}, 
      FrameLabel -> {{None, None}, {None, None}}, 
      FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
      GridLines -> {None, None}, GridLinesStyle -> Directive[
        GrayLevel[0.5, 0.4]], 
      Method -> {
       "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& )}}, 
      PlotRange -> {{0., 32.}, {-0.007875197732877745, 0.005949820323849351}},
       PlotRangeClipping -> True, PlotRangePadding -> {{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
    FormBox[
     FormBox[
      TemplateBox[{
        TagBox[
         FrameBox[
          StyleBox["1", Smaller, StripOnInput -> False]], "Placeholder"], 
        TagBox[
         FrameBox[
          StyleBox["2", Smaller, StripOnInput -> False]], "Placeholder"], 
        TagBox[
         FrameBox[
          StyleBox["3", Smaller, StripOnInput -> False]], "Placeholder"], 
        TagBox[
         FrameBox[
          StyleBox["4", Smaller, StripOnInput -> False]], "Placeholder"]}, 
       "PointLegend", DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxDividers -> {
                   "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
             "Grid"], Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), 
       InterpretationFunction :> (RowBox[{"PointLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.009166666666666668`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                ",", 
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.009166666666666668`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                ",", 
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.009166666666666668`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.560181`", ",", "0.691569`", ",", "0.194885`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                ",", 
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.009166666666666668`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6150173333333333, 0.25708400000000003`, 
                    0.13945266666666667`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.922526`", ",", "0.385626`", ",", "0.209179`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.922526, 0.385626, 0.209179]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.922526, 0.385626, 0.209179], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], 
                  "]"}]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{
                TagBox[#, HoldForm], ",", 
                TagBox[#2, HoldForm], ",", 
                TagBox[#3, HoldForm], ",", 
                TagBox[#4, HoldForm]}], "}"}], ",", 
            RowBox[{"LegendMarkers", "\[Rule]", 
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
            ",", 
            RowBox[{"Joined", "\[Rule]", 
              RowBox[{"{", 
                RowBox[{"False", ",", "False", ",", "False", ",", "False"}], 
                "}"}]}], ",", 
            RowBox[{"LabelStyle", "\[Rule]", 
              RowBox[{"{", "}"}]}], ",", 
            RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
       Editable -> True], TraditionalForm], TraditionalForm]},
   "Legended",
   DisplayFunction->(GridBox[{{
       TagBox[
        ItemBox[
         PaneBox[
          TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
          BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
        "SkipImageSizeLevel"], 
       ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
     GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
     AutoDelete -> False, GridBoxItemSize -> Automatic, 
     BaselinePosition -> {1, 1}]& ),
   Editable->True,
   InterpretationFunction->(RowBox[{"Legended", "[", 
      RowBox[{#, ",", 
        RowBox[{"Placed", "[", 
          RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}, {
  3,"\<\"LogPlot\"\>"->
  TemplateBox[{
    GraphicsBox[{{}, {{{
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[CompressedData["
1:eJxTTMoPSmViYGBQAGIQDQEf7EPmTJGuMmQ9ABVwOGRadCCxgQnK53AwjfiT
U6AF4ws4/Jp61vrPZRhfxOGKmtfKVAEWKF/CITZyy+k162HmyTi8W87jvmIG
O5Sv4PB38u0H1/ZwQvlKDjlGK2dUCPNA+SoOuT7Zun7T+aB8NYeWN4La+xcJ
QPkaDmdCDU638wlB+VoOUxj/bo/rF4bydRyuXt9l0qMmCuXrOSzgi51Zd00M
yjdwYHu4OMlrsQSUb+jw7p5R1brJUlC+kcN+aYco580yUL6xA5PoEvGT4vJQ
vonDciHFU7U/FKB8U4e1X68e3/NMCco3c/C8LPXv2XF1KN/cIVuP8+HLGypQ
voXD1ORjS6RZYHxLh0Pf3eYVPVSG8q0c7vor75VihclbO9yrbJ31xx/Gt3Fg
+7B54vktML6tg+OLn557dVShfDsHBcH4G/c2w/j2DvonI0/ddleD8h0c5lvo
hHk9VzsAAAwKjwA=
          "]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[CompressedData["
1:eJxTTMoPSmViYGBQAGIQDQEf7I/+07PYaPJlP1TAQaenUHa3xw8on8MhJvBI
1J4Tf6B8AYfdtiedVl1mOADhizh4ht/Zn5THDOVLOPCdNdLdacQG5cs49Oqa
xM5T4ITyFRyeFuXd2G/JA+UrOfz9Z8R5uZEfyldx8Driw7ysXhDKV3OYHH68
MzNOGMrXcPh+W3e3apoolK/lIH1YVP72MnEoX8fBbnZe0nkHKShfz+E9o/tv
0VZZKN/A4fsFk/S9yYpQvqHD9jXLlFnfK0H5Rg4Txb+wTpCFyRs7iOq4T79y
QAHKN3H47jKjbNNJGN/UYVGxcPMiFph6M4ddkpOqmuNgfHMHNtHjArrnYHwL
h+c7Pi2Y5Qezz9Lh4rPJAtfuwPhWDqVht28LlytD+dYOTu7nd7nJqED5Ng7L
HVV9Xp2G8W0d+G9/mvS6VRXKt3MwMV+yZ6mXGpRv7zApc/qXj1LqUL6Dg6/3
6ZqAH+oHAG61jbk=
          "]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[1.6]], 
         PointBox[CompressedData["
1:eJxTTMoPSmViYGBQAGIQDQEf7Bea1uzhPP9jP1TA4WOhv+iBTwwHIFwOh/3J
LnPczdmgfAGHBdpzF4Q94YHyRRyml0vPdWEVgfIlHIrZHNJLvotC+TIOcvf7
7Z+eFILyFRzeP/15p1sVxldyqDzkqpDgAOOrOLS2uayp2g3jqznI9+Sl7C8S
hvI1HELzT+1YFwKzT8vhdJg328JwmH06DsVpTfvvlYpB+XoObsKc5z+sFofy
DRx85QrTLn2XgPINHXYaGC7sjpCC8o0cFlgE72Q9Jw3lGzvsbkrQZI+UhfJN
HKpqTjqF/ZaD8k0dnjhYfGSPUYDyzRy49Xln6ngpQvnmDuvK1arTfZSgfAuH
z3W6HIlZylC+pcOxk7rNCZtVoHwrh7pb17j++ahB+dYO577zKx46rQHl2zg8
efEgctknLSjf1kFyysPX1ddh8nYOPx3Np4Tnw/j2DkuqpwkUFsP4Dg4ySbcn
r12tcQAA066LDQ==
          "]]}, {}}}, {{}, {}}}, {
     DisplayFunction -> Identity, GridLines -> {None, None}, DisplayFunction -> 
      Identity, DisplayFunction -> Identity, DisplayFunction -> Identity, 
      DisplayFunction -> Identity, AspectRatio -> 
      NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
      AxesLabel -> {None, None}, AxesOrigin -> {0., -14.429510236192051`}, 
      DisplayFunction :> Identity, Frame -> {{False, False}, {False, False}}, 
      FrameLabel -> {{None, None}, {None, None}}, FrameTicks -> {{
         Charting`ScaledTicks[{Log, Exp}], 
         Charting`ScaledFrameTicks[{Identity, Identity}]}, {
        Automatic, Automatic}}, GridLines -> {None, None}, GridLinesStyle -> 
      Directive[
        GrayLevel[0.5, 0.4]], 
      Method -> {
       "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            Identity[
             Part[#, 1]], 
            Exp[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            Identity[
             Part[#, 1]], 
            Exp[
             Part[#, 2]]}& )}}, 
      PlotRange -> {{0., 32.}, {-14.429510236192051`, -1.2628643221541307`}}, 
      PlotRangeClipping -> True, PlotRangePadding -> {{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}}, Ticks -> {Automatic, 
        Charting`ScaledTicks[{Log, Exp}]}}], 
    FormBox[
     FormBox[
      TemplateBox[{
        TagBox[
         FrameBox[
          StyleBox["1", Smaller, StripOnInput -> False]], "Placeholder"], 
        TagBox[
         FrameBox[
          StyleBox["2", Smaller, StripOnInput -> False]], "Placeholder"], 
        TagBox[
         FrameBox[
          StyleBox["3", Smaller, StripOnInput -> False]], "Placeholder"], 
        TagBox[
         FrameBox[
          StyleBox["4", Smaller, StripOnInput -> False]], "Placeholder"]}, 
       "PointLegend", DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxDividers -> {
                   "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
             "Grid"], Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), 
       InterpretationFunction :> (RowBox[{"PointLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                ",", 
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                ",", 
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.560181`", ",", "0.691569`", ",", "0.194885`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                ",", 
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6150173333333333, 0.25708400000000003`, 
                    0.13945266666666667`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.922526`", ",", "0.385626`", ",", "0.209179`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.922526, 0.385626, 0.209179]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.922526, 0.385626, 0.209179], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], 
                  "]"}]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{
                TagBox[#, HoldForm], ",", 
                TagBox[#2, HoldForm], ",", 
                TagBox[#3, HoldForm], ",", 
                TagBox[#4, HoldForm]}], "}"}], ",", 
            RowBox[{"LegendMarkers", "\[Rule]", 
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
            ",", 
            RowBox[{"Joined", "\[Rule]", 
              RowBox[{"{", 
                RowBox[{"False", ",", "False", ",", "False", ",", "False"}], 
                "}"}]}], ",", 
            RowBox[{"LabelStyle", "\[Rule]", 
              RowBox[{"{", "}"}]}], ",", 
            RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
       Editable -> True], TraditionalForm], TraditionalForm]},
   "Legended",
   DisplayFunction->(GridBox[{{
       TagBox[
        ItemBox[
         PaneBox[
          TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
          BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
        "SkipImageSizeLevel"], 
       ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
     GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
     AutoDelete -> False, GridBoxItemSize -> Automatic, 
     BaselinePosition -> {1, 1}]& ),
   Editable->True,
   InterpretationFunction->(RowBox[{"Legended", "[", 
      RowBox[{#, ",", 
        RowBox[{"Placed", "[", 
          RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}}, 1]], "Output",
 CellChangeTimes->{{3.906897860271145*^9, 3.906897913719406*^9}, {
   3.906898000777671*^9, 3.9068980399858875`*^9}, {3.9068982239316072`*^9, 
   3.906898245865123*^9}, 3.9068982965674887`*^9, {3.906898334452796*^9, 
   3.906898344408272*^9}, 3.906898431805415*^9},
 CellLabel->
  "Out[156]=",ExpressionUUID->"2bc66d89-8f9b-4ce1-bcfc-d763c7814796"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Really Clean Baby Example ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", 
    RowBox[{"(", GridBox[{
       {"0", 
        RowBox[{"-", "1"}]},
       {"1", "0"}
      }], ")"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "29320584-149a-4162-9f8f-f0fa5667e263"]
}], "Subsubsection",
 CellChangeTimes->{{3.9068986054180684`*^9, 3.9068986129676943`*^9}, {
  3.9068986549762573`*^9, 3.906898662668729*^9}, {3.9068993356242995`*^9, 
  3.9068993504828863`*^9}, {3.9069001480218663`*^9, 
  3.9069001539432116`*^9}},ExpressionUUID->"f06d6574-58ba-46fa-aabe-\
aa6b1da0502f"],

Cell[TextData[{
 "The characteristic equation of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", 
    RowBox[{"(", GridBox[{
       {"0", 
        RowBox[{"-", "1"}]},
       {"1", "0"}
      }], ")"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "4957aa35-460e-4592-ab2c-644c31bdae41"],
 " is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "\[Lambda]"}], ")"}], "2"], "+", "1"}], "=", "0"}], 
   TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "9f0125a7-1e06-4117-9e18-67519e5f2335"],
 " so it has eigenvalues ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Lambda]", "=", 
    RowBox[{"\[PlusMinus]", "\[ImaginaryI]", " "}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "e920223c-4d32-433d-8602-d8714eab7e3b"],
 ".  Row reducing \n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"A", "-", 
      RowBox[{"\[ImaginaryI]", " ", "I"}]}], ")"}], "=", 
    RowBox[{"(", GridBox[{
       {
        RowBox[{"-", "\[ImaginaryI]"}], 
        RowBox[{"-", "1"}]},
       {"1", 
        RowBox[{"-", "\[ImaginaryI]", " "}]}
      }], ")"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "33a34b1e-6b81-45c5-9449-1b12ed845bd7"],
 " \nto find an eigen vector associated with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Lambda]", "=", "\[ImaginaryI]"}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "3b7ae332-6702-47b8-924d-12f0ad9297f1"],
 " \n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", GridBox[{
       {
        RowBox[{"-", "\[ImaginaryI]"}], 
        RowBox[{"-", "1"}]},
       {"1", 
        RowBox[{"-", "\[ImaginaryI]", " "}]}
      }], ")"}], "=", 
    RowBox[{
     RowBox[{"(", GridBox[{
        {
         RowBox[{"-", "\[ImaginaryI]", " "}], 
         RowBox[{"-", "1"}]},
        {"\[ImaginaryI]", 
         RowBox[{"-", 
          SuperscriptBox["\[ImaginaryI]", "2"]}]}
       }], ")"}], "=", 
     RowBox[{
      RowBox[{"(", GridBox[{
         {
          RowBox[{"-", "\[ImaginaryI]", " "}], 
          RowBox[{"-", "1"}]},
         {"\[ImaginaryI]", "1"}
        }], ")"}], "\[Tilde]", 
      RowBox[{"(", GridBox[{
         {
          RowBox[{"-", "\[ImaginaryI]", " "}], 
          RowBox[{"-", "1"}]},
         {"0", "0"}
        }], ")"}]}]}]}], TraditionalForm]],ExpressionUUID->
  "14c71593-0610-4f07-b142-45d4f84482f8"],
 "\nso an eigen vector is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", GridBox[{
      {
       RowBox[{"-", "\[ImaginaryI]"}]},
      {"1"}
     }], ")"}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "5a3b7590-315f-4856-acdf-3692987d6cf0"],
 " since \n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", GridBox[{
        {
         RowBox[{"-", "\[ImaginaryI]", " "}], 
         RowBox[{"-", "1"}]},
        {"0", "0"}
       }], ")"}], ".", 
     RowBox[{"(", GridBox[{
        {
         RowBox[{"-", "\[ImaginaryI]"}]},
        {"1"}
       }], ")"}]}], "=", 
    RowBox[{
     RowBox[{"(", GridBox[{
        {
         RowBox[{
          RowBox[{"-", 
           SuperscriptBox["\[ImaginaryI]", "2"]}], "-", "1"}]},
        {"0"}
       }], ")"}], "=", 
     RowBox[{
      RowBox[{"(", GridBox[{
         {
          RowBox[{"1", "-", "1"}]},
         {"0"}
        }], ")"}], "=", 
      RowBox[{"(", GridBox[{
         {"0"},
         {"0"}
        }], ")"}]}]}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "b2503397-d3a5-4386-b20d-413c9cde9090"],
 ".\nYou should check that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", GridBox[{
      {"\[ImaginaryI]"},
      {"1"}
     }], ")"}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "1faf59ae-ed4a-44ba-92bd-368bcde8f45f"],
 " is an eigenvector for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Lambda]", "=", 
    RowBox[{"-", "\[ImaginaryI]"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "6e2d83c0-f1ad-4182-a828-1f3be213ed40"],
 ". Let see what the iterations do. "
}], "Text",
 CellChangeTimes->{{3.9068987626849194`*^9, 3.906898968296771*^9}, {
  3.906899371882407*^9, 3.906899560482238*^9}, {3.9068996143619685`*^9, 
  3.9068996342087374`*^9}, {3.906899725823457*^9, 3.906899964433572*^9}, {
  3.906900228946844*^9, 
  3.9069002524635715`*^9}},ExpressionUUID->"a667ce2c-055f-4b4b-a1d7-\
65443e5bdcbc"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"A", "=", 
   RowBox[{"(", GridBox[{
      {"0", 
       RowBox[{"-", "1"}]},
      {"1", "0"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"v", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MaxIter", "=", "12"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"TabView", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<Data\>\"", "->", 
      RowBox[{"TableForm", "[", 
       RowBox[{
        RowBox[{"Data", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"v", "=", 
            RowBox[{"A", ".", "v"}]}], ",", 
           RowBox[{"{", "MaxIter", "}"}]}], "]"}]}], ",", 
        RowBox[{"TableHeadings", "\[Rule]", "Automatic"}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Plot\>\"", "->", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{"Data", "\[Transpose]"}], ",", 
        RowBox[{"PlotLegends", "\[Rule]", "Automatic"}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<LogPlot\>\"", "->", 
      RowBox[{"ListLogPlot", "[", 
       RowBox[{
        RowBox[{"Abs", "[", 
         RowBox[{"Data", "\[Transpose]"}], "]"}], ",", 
        RowBox[{"PlotLegends", "\[Rule]", "Automatic"}]}], "]"}]}]}], "}"}], 
   ",", "3"}], "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.906900009959792*^9, 3.906900045825262*^9}, {
   3.90690009393078*^9, 3.906900094435622*^9}, {3.906900180828082*^9, 
   3.906900220490494*^9}, 3.90690027386691*^9, {3.9069055695218363`*^9, 
   3.906905569890795*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"d87722ee-1c4d-4e6e-aa70-c213df29e98b"],

Cell[BoxData[
 TabViewBox[{{1,"\<\"Data\"\>"->
  TagBox[
   TagBox[GridBox[{
      {
       StyleBox["\[Null]",
        ShowStringCharacters->False], "1", "2"},
      {"1", 
       RowBox[{"-", "0.867271026363226`"}], "0.582095962998455`"},
      {"2", 
       RowBox[{"-", "0.582095962998455`"}], 
       RowBox[{"-", "0.867271026363226`"}]},
      {"3", "0.867271026363226`", 
       RowBox[{"-", "0.582095962998455`"}]},
      {"4", "0.582095962998455`", "0.867271026363226`"},
      {"5", 
       RowBox[{"-", "0.867271026363226`"}], "0.582095962998455`"},
      {"6", 
       RowBox[{"-", "0.582095962998455`"}], 
       RowBox[{"-", "0.867271026363226`"}]},
      {"7", "0.867271026363226`", 
       RowBox[{"-", "0.582095962998455`"}]},
      {"8", "0.582095962998455`", "0.867271026363226`"},
      {"9", 
       RowBox[{"-", "0.867271026363226`"}], "0.582095962998455`"},
      {"10", 
       RowBox[{"-", "0.582095962998455`"}], 
       RowBox[{"-", "0.867271026363226`"}]},
      {"11", "0.867271026363226`", 
       RowBox[{"-", "0.582095962998455`"}]},
      {"12", "0.582095962998455`", "0.867271026363226`"}
     },
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{
      "Columns" -> {False, True, {False}, False}, 
       "Rows" -> {False, True, {False}, False}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[2.0999999999999996`]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
   Function[BoxForm`e$, 
    TableForm[BoxForm`e$, TableHeadings -> Automatic]]]}, {2,"\<\"Plot\"\>"->
  TemplateBox[{
    GraphicsBox[{{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[{{1., -0.867271026363226}, {2., -0.582095962998455}, {3., 
          0.867271026363226}, {4., 0.582095962998455}, {
          5., -0.867271026363226}, {6., -0.582095962998455}, {7., 
          0.867271026363226}, {8., 0.582095962998455}, {
          9., -0.867271026363226}, {10., -0.582095962998455}, {11., 
          0.867271026363226}, {12., 0.582095962998455}}]}, {
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[{{1., 0.582095962998455}, {2., -0.867271026363226}, {
          3., -0.582095962998455}, {4., 0.867271026363226}, {5., 
          0.582095962998455}, {6., -0.867271026363226}, {
          7., -0.582095962998455}, {8., 0.867271026363226}, {9., 
          0.582095962998455}, {10., -0.867271026363226}, {
          11., -0.582095962998455}, {12., 
          0.867271026363226}}]}}}, {{}, {}}}, {
     DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
      NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
      AxesLabel -> {None, None}, AxesOrigin -> {0., 0}, DisplayFunction :> 
      Identity, Frame -> {{False, False}, {False, False}}, 
      FrameLabel -> {{None, None}, {None, None}}, 
      FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
      GridLines -> {None, None}, GridLinesStyle -> Directive[
        GrayLevel[0.5, 0.4]], 
      Method -> {
       "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& )}}, 
      PlotRange -> {{0., 12.}, {-0.867271026363226, 0.867271026363226}}, 
      PlotRangeClipping -> True, PlotRangePadding -> {{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
    FormBox[
     FormBox[
      TemplateBox[{
        TagBox[
         FrameBox[
          StyleBox["1", Smaller, StripOnInput -> False]], "Placeholder"], 
        TagBox[
         FrameBox[
          StyleBox["2", Smaller, StripOnInput -> False]], "Placeholder"]}, 
       "PointLegend", DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxDividers -> {
                   "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
             "Grid"], Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), 
       InterpretationFunction :> (RowBox[{"PointLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                ",", 
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], 
                  "]"}]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{
                TagBox[#, HoldForm], ",", 
                TagBox[#2, HoldForm]}], "}"}], ",", 
            RowBox[{"LegendMarkers", "\[Rule]", 
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
            ",", 
            RowBox[{"Joined", "\[Rule]", 
              RowBox[{"{", 
                RowBox[{"False", ",", "False"}], "}"}]}], ",", 
            RowBox[{"LabelStyle", "\[Rule]", 
              RowBox[{"{", "}"}]}], ",", 
            RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
       Editable -> True], TraditionalForm], TraditionalForm]},
   "Legended",
   DisplayFunction->(GridBox[{{
       TagBox[
        ItemBox[
         PaneBox[
          TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
          BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
        "SkipImageSizeLevel"], 
       ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
     GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
     AutoDelete -> False, GridBoxItemSize -> Automatic, 
     BaselinePosition -> {1, 1}]& ),
   Editable->True,
   InterpretationFunction->(RowBox[{"Legended", "[", 
      RowBox[{#, ",", 
        RowBox[{"Placed", "[", 
          RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}, {
  3,"\<\"LogPlot\"\>"->
  TemplateBox[{
    GraphicsBox[{{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[{{1., -0.1424037485565047}, {2., -0.5411199599656461}, {
          3., -0.1424037485565047}, {4., -0.5411199599656461}, {
          5., -0.1424037485565047}, {6., -0.5411199599656461}, {
          7., -0.1424037485565047}, {8., -0.5411199599656461}, {
          9., -0.1424037485565047}, {10., -0.5411199599656461}, {
          11., -0.1424037485565047}, {12., -0.5411199599656461}}]}, {
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[{{1., -0.5411199599656461}, {2., -0.1424037485565047}, {
          3., -0.5411199599656461}, {4., -0.1424037485565047}, {
          5., -0.5411199599656461}, {6., -0.1424037485565047}, {
          7., -0.5411199599656461}, {8., -0.1424037485565047}, {
          9., -0.5411199599656461}, {10., -0.1424037485565047}, {
          11., -0.5411199599656461}, {
          12., -0.1424037485565047}}]}}}, {{}, {}}}, {
     DisplayFunction -> Identity, GridLines -> {None, None}, DisplayFunction -> 
      Identity, DisplayFunction -> Identity, DisplayFunction -> Identity, 
      DisplayFunction -> Identity, AspectRatio -> 
      NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
      AxesLabel -> {None, None}, AxesOrigin -> {0., -0.5723217662348203}, 
      DisplayFunction :> Identity, Frame -> {{False, False}, {False, False}}, 
      FrameLabel -> {{None, None}, {None, None}}, FrameTicks -> {{
         Charting`ScaledTicks[{Log, Exp}], 
         Charting`ScaledFrameTicks[{Identity, Identity}]}, {
        Automatic, Automatic}}, GridLines -> {None, None}, GridLinesStyle -> 
      Directive[
        GrayLevel[0.5, 0.4]], 
      Method -> {
       "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            Identity[
             Part[#, 1]], 
            Exp[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            Identity[
             Part[#, 1]], 
            Exp[
             Part[#, 2]]}& )}}, 
      PlotRange -> {{0., 12.}, {-0.5723217662348203, -0.1424037485565047}}, 
      PlotRangeClipping -> True, PlotRangePadding -> {{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}}, Ticks -> {Automatic, 
        Charting`ScaledTicks[{Log, Exp}]}}], 
    FormBox[
     FormBox[
      TemplateBox[{
        TagBox[
         FrameBox[
          StyleBox["1", Smaller, StripOnInput -> False]], "Placeholder"], 
        TagBox[
         FrameBox[
          StyleBox["2", Smaller, StripOnInput -> False]], "Placeholder"]}, 
       "PointLegend", DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxDividers -> {
                   "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
             "Grid"], Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), 
       InterpretationFunction :> (RowBox[{"PointLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                ",", 
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], 
                  "]"}]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{
                TagBox[#, HoldForm], ",", 
                TagBox[#2, HoldForm]}], "}"}], ",", 
            RowBox[{"LegendMarkers", "\[Rule]", 
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
            ",", 
            RowBox[{"Joined", "\[Rule]", 
              RowBox[{"{", 
                RowBox[{"False", ",", "False"}], "}"}]}], ",", 
            RowBox[{"LabelStyle", "\[Rule]", 
              RowBox[{"{", "}"}]}], ",", 
            RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
       Editable -> True], TraditionalForm], TraditionalForm]},
   "Legended",
   DisplayFunction->(GridBox[{{
       TagBox[
        ItemBox[
         PaneBox[
          TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
          BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
        "SkipImageSizeLevel"], 
       ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
     GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
     AutoDelete -> False, GridBoxItemSize -> Automatic, 
     BaselinePosition -> {1, 1}]& ),
   Editable->True,
   InterpretationFunction->(RowBox[{"Legended", "[", 
      RowBox[{#, ",", 
        RowBox[{"Placed", "[", 
          RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}}, 3]], "Output",
 CellChangeTimes->{
  3.9069000205233026`*^9, {3.9069000990452843`*^9, 3.906900126629028*^9}, {
   3.9069001941110387`*^9, 3.90690022095603*^9}, 3.90690027474011*^9, 
   3.906905570295859*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"379bea5d-fd0f-4395-8a40-b8ebfadcca15"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Clean Baby Example ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", 
    RowBox[{"(", GridBox[{
       {"0.98", 
        RowBox[{"-", "0.12"}]},
       {"0.12", "0.98"}
      }], ")"}]}], TraditionalForm]],ExpressionUUID->
  "4916678a-712e-45f4-a9e6-d88a6e4d49b1"]
}], "Subsubsection",
 CellChangeTimes->{{3.9068986054180684`*^9, 3.9068986129676943`*^9}, {
  3.9068986549762573`*^9, 3.906898662668729*^9}, {3.9068993356242995`*^9, 
  3.9068993504828863`*^9}, {3.9069001480218663`*^9, 3.9069001539432116`*^9}, {
  3.9069003251969223`*^9, 3.9069003264173045`*^9}, {3.9069003929126515`*^9, 
  3.906900393381379*^9}, {3.9069026310099163`*^9, 3.9069026358606453`*^9}, {
  3.906903230303596*^9, 3.9069032423847713`*^9}, {3.906905402574353*^9, 
  3.9069054093766193`*^9}},ExpressionUUID->"1bede651-32b6-4e3b-af5d-\
39ac2c7a53fd"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"A", "=", 
   RowBox[{"(", GridBox[{
      {"0.98", 
       RowBox[{"-", "0.12"}]},
      {"0.12", "0.98"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"v", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MaxIter", "=", "12"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"TabView", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<Data\>\"", "->", 
      RowBox[{"TableForm", "[", 
       RowBox[{
        RowBox[{"Data", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"v", "=", 
            RowBox[{"A", ".", "v"}]}], ",", 
           RowBox[{"{", "MaxIter", "}"}]}], "]"}]}], ",", 
        RowBox[{"TableHeadings", "\[Rule]", "Automatic"}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Plot\>\"", "->", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{"Data", "\[Transpose]"}], ",", 
        RowBox[{"PlotLegends", "\[Rule]", "Automatic"}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<2D Plot\>\"", "->", 
      RowBox[{"ListPlot", "[", 
       RowBox[{"Data", ",", 
        RowBox[{"PlotLegends", "\[Rule]", "Automatic"}], ",", 
        RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}]}]}], "}"}], 
   ",", "3"}], "]"}]}], "Input",
 CellChangeTimes->{{3.906903087536956*^9, 3.90690322112084*^9}, {
  3.906903251133133*^9, 3.906903430912199*^9}, {3.9069036974361105`*^9, 
  3.9069037348242493`*^9}, {3.906905324329636*^9, 3.9069053960552616`*^9}, {
  3.906905563900801*^9, 3.906905564351785*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"28675e51-4737-4c29-8831-21b0cdffa25a"],

Cell[BoxData[
 TabViewBox[{{1,"\<\"Data\"\>"->
  TagBox[
   TagBox[GridBox[{
      {
       StyleBox["\[Null]",
        ShowStringCharacters->False], "1", "2"},
      {"1", 
       RowBox[{"-", "0.3901918850519669`"}], 
       RowBox[{"-", "0.17607015982180407`"}]},
      {"2", 
       RowBox[{"-", "0.3612596281723111`"}], 
       RowBox[{"-", "0.219371782831604`"}]},
      {"3", 
       RowBox[{"-", "0.3277098216690724`"}], 
       RowBox[{"-", "0.25833550255564924`"}]},
      {"4", 
       RowBox[{"-", "0.29015536492901306`"}], 
       RowBox[{"-", "0.29249397110482495`"}]},
      {"5", 
       RowBox[{"-", "0.24925298109785382`"}], 
       RowBox[{"-", "0.32146273547421`"}]},
      {"6", 
       RowBox[{"-", "0.20569239321899155`"}], 
       RowBox[{"-", "0.34494383849646826`"}]},
      {"7", 
       RowBox[{"-", "0.16018528473503554`"}], 
       RowBox[{"-", "0.36272804891281785`"}]},
      {"8", 
       RowBox[{"-", "0.11345421317079668`"}], 
       RowBox[{"-", "0.37469572210276575`"}]},
      {"9", 
       RowBox[{"-", "0.06622164225504887`"}], 
       RowBox[{"-", "0.380816313241206`"}]},
      {"10", 
       RowBox[{"-", "0.01919925182100317`"}], 
       RowBox[{"-", "0.38114658404698776`"}]},
      {"11", "0.02692232330105543`", 
       RowBox[{"-", "0.3758275625845684`"}]},
      {"12", "0.07148318434518253`", 
       RowBox[{"-", "0.3650803325367504`"}]}
     },
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{
      "Columns" -> {False, True, {False}, False}, 
       "Rows" -> {False, True, {False}, False}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[2.0999999999999996`]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
   Function[BoxForm`e$, 
    TableForm[BoxForm`e$, TableHeadings -> Automatic]]]}, {2,"\<\"Plot\"\>"->
  TemplateBox[{
    GraphicsBox[{{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[{{1., -0.3901918850519669}, {2., -0.3612596281723111}, {
          3., -0.3277098216690724}, {4., -0.29015536492901306`}, {
          5., -0.24925298109785382`}, {6., -0.20569239321899155`}, {
          7., -0.16018528473503554`}, {8., -0.11345421317079668`}, {
          9., -0.06622164225504887}, {10., -0.01919925182100317}, {11., 
          0.02692232330105543}, {12., 0.07148318434518253}}]}, {
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[{{1., -0.17607015982180407`}, {2., -0.219371782831604}, {
          3., -0.25833550255564924`}, {4., -0.29249397110482495`}, {
          5., -0.32146273547421}, {6., -0.34494383849646826`}, {
          7., -0.36272804891281785`}, {8., -0.37469572210276575`}, {
          9., -0.380816313241206}, {10., -0.38114658404698776`}, {
          11., -0.3758275625845684}, {
          12., -0.3650803325367504}}]}}}, {{}, {}}}, {
     DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
      NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
      AxesLabel -> {None, None}, AxesOrigin -> {0., 0}, DisplayFunction :> 
      Identity, Frame -> {{False, False}, {False, False}}, 
      FrameLabel -> {{None, None}, {None, None}}, 
      FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
      GridLines -> {None, None}, GridLinesStyle -> Directive[
        GrayLevel[0.5, 0.4]], 
      Method -> {
       "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& )}}, 
      PlotRange -> {{0., 12.}, {-0.3901918850519669, 0.07148318434518253}}, 
      PlotRangeClipping -> True, PlotRangePadding -> {{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
    FormBox[
     FormBox[
      TemplateBox[{
        TagBox[
         FrameBox[
          StyleBox["1", Smaller, StripOnInput -> False]], "Placeholder"], 
        TagBox[
         FrameBox[
          StyleBox["2", Smaller, StripOnInput -> False]], "Placeholder"]}, 
       "PointLegend", DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxDividers -> {
                   "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
             "Grid"], Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), 
       InterpretationFunction :> (RowBox[{"PointLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                ",", 
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], 
                  "]"}]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{
                TagBox[#, HoldForm], ",", 
                TagBox[#2, HoldForm]}], "}"}], ",", 
            RowBox[{"LegendMarkers", "\[Rule]", 
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
            ",", 
            RowBox[{"Joined", "\[Rule]", 
              RowBox[{"{", 
                RowBox[{"False", ",", "False"}], "}"}]}], ",", 
            RowBox[{"LabelStyle", "\[Rule]", 
              RowBox[{"{", "}"}]}], ",", 
            RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
       Editable -> True], TraditionalForm], TraditionalForm]},
   "Legended",
   DisplayFunction->(GridBox[{{
       TagBox[
        ItemBox[
         PaneBox[
          TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
          BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
        "SkipImageSizeLevel"], 
       ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
     GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
     AutoDelete -> False, GridBoxItemSize -> Automatic, 
     BaselinePosition -> {1, 1}]& ),
   Editable->True,
   InterpretationFunction->(RowBox[{"Legended", "[", 
      RowBox[{#, ",", 
        RowBox[{"Placed", "[", 
          RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}, {
  3,"\<\"2D Plot\"\>"->
  GraphicsBox[{{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], 
     PointBox[{{-0.3901918850519669, -0.17607015982180407`}, \
{-0.3612596281723111, -0.219371782831604}, {-0.3277098216690724, \
-0.25833550255564924`}, {-0.29015536492901306`, -0.29249397110482495`}, \
{-0.24925298109785382`, -0.32146273547421}, {-0.20569239321899155`, \
-0.34494383849646826`}, {-0.16018528473503554`, -0.36272804891281785`}, \
{-0.11345421317079668`, -0.37469572210276575`}, {-0.06622164225504887, \
-0.380816313241206}, {-0.01919925182100317, -0.38114658404698776`}, {
      0.02692232330105543, -0.3758275625845684}, {
      0.07148318434518253, -0.3650803325367504}}]}, {{}, {}}},
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   Method->{
    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
     "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& )}},
   PlotRange->{{-0.3901918850519669, 
     0.07148318434518253}, {-0.38114658404698776`, 0}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.02]}},
   Ticks->{Automatic, Automatic}]}}, 3]], "Output",
 CellChangeTimes->{
  3.906903277047632*^9, {3.906903307920799*^9, 3.9069033209236774`*^9}, {
   3.906903361592538*^9, 3.906903431560152*^9}, {3.906903699443669*^9, 
   3.9069037353368387`*^9}, {3.9069053314973326`*^9, 3.9069053966025867`*^9}, 
   3.90690556478776*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"5b9577d6-d6bc-4f5d-b037-8dcf6827fd74"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Another clean Baby Example ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", 
    RowBox[{"(", GridBox[{
       {"1.0", 
        RowBox[{"-", "0.12"}]},
       {"0.12", "1.0"}
      }], ")"}]}], TraditionalForm]],ExpressionUUID->
  "0e45e84e-10b2-4c8f-b9b3-04513bd66233"]
}], "Subsubsection",
 CellChangeTimes->{{3.9068986054180684`*^9, 3.9068986129676943`*^9}, {
  3.9068986549762573`*^9, 3.906898662668729*^9}, {3.9068993356242995`*^9, 
  3.9068993504828863`*^9}, {3.9069001480218663`*^9, 3.9069001539432116`*^9}, {
  3.9069003251969223`*^9, 3.9069003264173045`*^9}, {3.9069003929126515`*^9, 
  3.906900393381379*^9}, {3.9069026310099163`*^9, 3.9069026358606453`*^9}, {
  3.906903230303596*^9, 3.9069032423847713`*^9}, {3.906905402574353*^9, 
  3.9069054093766193`*^9}, {3.9069054412719603`*^9, 3.906905452161297*^9}, {
  3.906905664005168*^9, 3.9069056744139366`*^9}, {3.9069057340677624`*^9, 
  3.9069057422214413`*^9}, {3.9069058385505257`*^9, 
  3.9069058395381927`*^9}},ExpressionUUID->"fa995ca7-558b-4b7b-8dc1-\
aafb41dc4e86"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"A", "=", 
   RowBox[{"(", GridBox[{
      {"1.0", 
       RowBox[{"-", "0.12"}]},
      {"0.12", "1.0"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"v", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MaxIter", "=", "123"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"TabView", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<Data\>\"", "->", 
      RowBox[{"TableForm", "[", 
       RowBox[{
        RowBox[{"Data", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"v", "=", 
            RowBox[{"A", ".", "v"}]}], ",", 
           RowBox[{"{", "MaxIter", "}"}]}], "]"}]}], ",", 
        RowBox[{"TableHeadings", "\[Rule]", "Automatic"}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Plot\>\"", "->", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{"Data", "\[Transpose]"}], ",", 
        RowBox[{"PlotLegends", "\[Rule]", "Automatic"}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<2D Plot\>\"", "->", 
      RowBox[{"ListPlot", "[", 
       RowBox[{"Data", ",", 
        RowBox[{"PlotLegends", "\[Rule]", "Automatic"}], ",", 
        RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}]}]}], "}"}], 
   ",", "3"}], "]"}]}], "Input",
 CellChangeTimes->{{3.906903087536956*^9, 3.90690322112084*^9}, {
  3.906903251133133*^9, 3.906903430912199*^9}, {3.9069036974361105`*^9, 
  3.9069037348242493`*^9}, {3.906905324329636*^9, 3.9069053960552616`*^9}, {
  3.906905457760044*^9, 3.906905501233882*^9}, {3.906905555357114*^9, 
  3.906905555848817*^9}, {3.9069056789055915`*^9, 3.9069057229616957`*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"5db047e6-4b5a-45a2-90cb-fea269a34f6c"],

Cell[BoxData[
 TabViewBox[{{1,"\<\"Data\"\>"->
  TagBox[
   TagBox[GridBox[{
      {
       StyleBox["\[Null]",
        ShowStringCharacters->False], "1", "2"},
      {"1", "0.647167548933879`", "0.43092802219232834`"},
      {"2", "0.5954561862707995`", "0.5085881280643938`"},
      {"3", "0.5344256109030723`", "0.5800428704168897`"},
      {"4", "0.46482046645304553`", "0.6441739437252584`"},
      {"5", "0.38751959320601453`", "0.6999523996996239`"},
      {"6", "0.3035253052420597`", "0.7464547508843457`"},
      {"7", "0.2139507351359382`", "0.7828777875133928`"},
      {"8", "0.12000540063433109`", "0.8085518757297053`"},
      {"9", "0.022979175546766456`", "0.8229525238058251`"},
      {"10", 
       RowBox[{"-", "0.07577512730993255`"}], "0.8257100248714371`"},
      {"11", 
       RowBox[{"-", "0.17486033029450498`"}], "0.8166170095942452`"},
      {"12", 
       RowBox[{"-", "0.2728543714458144`"}], "0.7956337699589047`"},
      {"13", 
       RowBox[{"-", "0.368330423840883`"}], "0.762891245385407`"},
      {"14", 
       RowBox[{"-", "0.45987737328713185`"}], "0.718691594524501`"},
      {"15", 
       RowBox[{"-", "0.546120364630072`"}], "0.6635063097300452`"},
      {"16", 
       RowBox[{"-", "0.6257411217976774`"}], "0.5979718659744366`"},
      {"17", 
       RowBox[{"-", "0.6974977457146098`"}], "0.5228829313587153`"},
      {"18", 
       RowBox[{"-", "0.7602436974776556`"}], "0.43918320187296217`"},
      {"19", 
       RowBox[{"-", "0.8129456817024111`"}], "0.3479539581756435`"},
      {"20", 
       RowBox[{"-", "0.8547001566834883`"}], "0.2504004763713542`"},
      {"21", 
       RowBox[{"-", "0.8847482138480508`"}], "0.1478364575693356`"},
      {"22", 
       RowBox[{"-", "0.9024885887563711`"}], "0.04166667190756952`"},
      {"23", 
       RowBox[{"-", "0.9074885893852794`"}], 
       RowBox[{"-", "0.066631958743195`"}]},
      {"24", 
       RowBox[{"-", "0.899492754336096`"}], 
       RowBox[{"-", "0.1755305894694285`"}]},
      {"25", 
       RowBox[{"-", "0.8784290835997646`"}], 
       RowBox[{"-", "0.28346971998976`"}]},
      {"26", 
       RowBox[{"-", "0.8444127172009934`"}], 
       RowBox[{"-", "0.38888121002173176`"}]},
      {"27", 
       RowBox[{"-", "0.7977469719983856`"}], 
       RowBox[{"-", "0.490210736085851`"}]},
      {"28", 
       RowBox[{"-", "0.7389216836680835`"}], 
       RowBox[{"-", "0.5859403727256572`"}]},
      {"29", 
       RowBox[{"-", "0.6686088389410046`"}], 
       RowBox[{"-", "0.6746109747658273`"}]},
      {"30", 
       RowBox[{"-", "0.5876555219691053`"}], 
       RowBox[{"-", "0.7548440354387479`"}]},
      {"31", 
       RowBox[{"-", "0.49707423771645554`"}], 
       RowBox[{"-", "0.8253626980750406`"}]},
      {"32", 
       RowBox[{"-", "0.39803071394745065`"}], 
       RowBox[{"-", "0.8850116066010153`"}]},
      {"33", 
       RowBox[{"-", "0.29182932115532884`"}], 
       RowBox[{"-", "0.9327752922747093`"}]},
      {"34", 
       RowBox[{"-", "0.17989628608236372`"}], 
       RowBox[{"-", "0.9677948108133488`"}]},
      {"35", 
       RowBox[{"-", "0.06376090878476186`"}], 
       RowBox[{"-", "0.9893823651432325`"}]},
      {"36", "0.05496497503242605`", 
       RowBox[{"-", "0.997033674197404`"}]},
      {"37", "0.1746090159361145`", 
       RowBox[{"-", "0.9904378771935128`"}]},
      {"38", "0.29346156119933603`", 
       RowBox[{"-", "0.9694847952811791`"}]},
      {"39", "0.4097997366330775`", 
       RowBox[{"-", "0.9342694079372589`"}]},
      {"40", "0.5219120655855486`", 
       RowBox[{"-", "0.8850934395412896`"}]},
      {"41", "0.6281232783305033`", 
       RowBox[{"-", "0.8224639916710238`"}]},
      {"42", "0.7268189573310262`", 
       RowBox[{"-", "0.7470891982713634`"}]},
      {"43", "0.8164696611235898`", 
       RowBox[{"-", "0.6598709233916403`"}]},
      {"44", "0.8956541719305866`", 
       RowBox[{"-", "0.5618945640568096`"}]},
      {"45", "0.9630815196174037`", 
       RowBox[{"-", "0.4544160634251392`"}]},
      {"46", "1.0176114472284203`", 
       RowBox[{"-", "0.33884628107105075`"}]},
      {"47", "1.0582730009569463`", 
       RowBox[{"-", "0.21673290740364032`"}]},
      {"48", "1.0842809498453831`", 
       RowBox[{"-", "0.08974014728880678`"}]},
      {"49", "1.09504976752004`", "0.040373566692639196`"},
      {"50", "1.090204939516923`", "0.17177953879504398`"},
      {"51", "1.0695913948615179`", "0.30260413153707477`"},
      {"52", "1.033278899077069`", "0.4309550989204569`"},
      {"53", "0.9815642872066141`", "0.5549485668097052`"},
      {"54", "0.9149704591894495`", "0.6727362812744988`"},
      {"55", "0.8342421054365097`", "0.7825327363772328`"},
      {"56", "0.7403381770712417`", "0.8826417890296139`"},
      {"57", "0.6344211623876881`", "0.9714823702781629`"},
      {"58", "0.5178432779543085`", "1.0476129097646854`"},
      {"59", "0.39212972878254626`", "1.1097541031192024`"},
      {"60", "0.258959236408242`", "1.156809670573108`"},
      {"61", "0.12014207593946905`", "1.187884778942097`"},
      {"62", 
       RowBox[{"-", "0.02240409753358258`"}], "1.2023018280548332`"},
      {"63", 
       RowBox[{"-", "0.16668031690016255`"}], "1.1996133363508032`"},
      {"64", 
       RowBox[{"-", "0.310633917262259`"}], "1.1796116983227838`"},
      {"65", 
       RowBox[{"-", "0.452187321060993`"}], "1.1423356282513126`"},
      {"66", 
       RowBox[{"-", "0.5892675964511506`"}], "1.0880731497239935`"},
      {"67", 
       RowBox[{"-", "0.7198363744180298`"}], "1.0173610381498555`"},
      {"68", 
       RowBox[{"-", "0.8419196989960125`"}], "0.9309806732196919`"},
      {"69", 
       RowBox[{"-", "0.9536373797823755`"}], "0.8299503093401704`"},
      {"70", 
       RowBox[{"-", "1.053231416903196`"}], "0.7155138237662854`"},
      {"71", 
       RowBox[{"-", "1.1390930757551503`"}], "0.5891260537379018`"},
      {"72", 
       RowBox[{"-", "1.2097882022036985`"}], "0.45243488464728376`"},
      {"73", 
       RowBox[{"-", "1.2640803883613725`"}], "0.3072603003828399`"},
      {"74", 
       RowBox[{"-", "1.3009516244073134`"}], "0.1555706537794752`"},
      {"75", 
       RowBox[{"-", "1.3196201028608503`"}], 
       RowBox[{"-", "0.0005435411494023878`"}]},
      {"76", 
       RowBox[{"-", "1.319554877922922`"}], 
       RowBox[{"-", "0.1588979534927044`"}]},
      {"77", 
       RowBox[{"-", "1.3004871235037976`"}], 
       RowBox[{"-", "0.31724453884345505`"}]},
      {"78", 
       RowBox[{"-", "1.262417778842583`"}], 
       RowBox[{"-", "0.47330299366391076`"}]},
      {"79", 
       RowBox[{"-", "1.2056214196029138`"}], 
       RowBox[{"-", "0.6247931271250207`"}]},
      {"80", 
       RowBox[{"-", "1.1306462443479113`"}], 
       RowBox[{"-", "0.7694676974773703`"}]},
      {"81", 
       RowBox[{"-", "1.0383101206506269`"}], 
       RowBox[{"-", "0.9051452467991197`"}]},
      {"82", 
       RowBox[{"-", "0.9296926910347325`"}], 
       RowBox[{"-", "1.0297424612771948`"}]},
      {"83", 
       RowBox[{"-", "0.8061235956814692`"}], 
       RowBox[{"-", "1.1413055842013626`"}]},
      {"84", 
       RowBox[{"-", "0.6691669255773056`"}], 
       RowBox[{"-", "1.2380404156831388`"}]},
      {"85", 
       RowBox[{"-", "0.5206020756953289`"}], 
       RowBox[{"-", "1.3183404467524156`"}]},
      {"86", 
       RowBox[{"-", "0.362401222085039`"}], 
       RowBox[{"-", "1.380812695835855`"}]},
      {"87", 
       RowBox[{"-", "0.1967036985847364`"}], 
       RowBox[{"-", "1.4243008424860597`"}]},
      {"88", 
       RowBox[{"-", "0.02578759748640924`"}], 
       RowBox[{"-", "1.447905286316228`"}]},
      {"89", "0.1479610368715381`", 
       RowBox[{"-", "1.4509997980145972`"}]},
      {"90", "0.3220810126332898`", 
       RowBox[{"-", "1.4332444735900127`"}]},
      {"91", "0.49407034946409134`", 
       RowBox[{"-", "1.3945947520740178`"}]},
      {"92", "0.6614217197129735`", 
       RowBox[{"-", "1.335306310138327`"}]},
      {"93", "0.8216584769295727`", 
       RowBox[{"-", "1.25593570377277`"}]},
      {"94", "0.9723707613823052`", 
       RowBox[{"-", "1.1573366865412213`"}]},
      {"95", "1.1112511637672517`", 
       RowBox[{"-", "1.0406521951753447`"}]},
      {"96", "1.2361294271882932`", 
       RowBox[{"-", "0.9073020555232745`"}]},
      {"97", "1.345005673851086`", 
       RowBox[{"-", "0.7589665242606793`"}]},
      {"98", "1.4360816567623675`", 
       RowBox[{"-", "0.597565843398549`"}]},
      {"99", "1.5077895579701934`", 
       RowBox[{"-", "0.4252360445870649`"}]},
      {"100", "1.5588178833206412`", 
       RowBox[{"-", "0.24430129763064168`"}]},
      {"101", "1.5881340390363181`", 
       RowBox[{"-", "0.05724315163216473`"}]},
      {"102", "1.595003217232178`", "0.13333293305219343`"},
      {"103", "1.5790032652659147`", "0.32473331912005476`"},
      {"104", "1.540035266971508`", "0.5142137109519646`"},
      {"105", "1.4783296216572723`", "0.6990179429885455`"},
      {"106", "1.394447468498647`", "0.8764174975874182`"},
      {"107", "1.289277368788157`", "1.043751193807256`"},
      {"108", "1.1640272255312862`", "1.1984644780618348`"},
      {"109", "1.020211488163866`", "1.338147745125589`"},
      {"110", "0.8596337587487953`", "1.4605731237052528`"},
      {"111", "0.684364983904165`", "1.5637291747551083`"},
      {"112", "0.496717482933552`", "1.6458529728236082`"},
      {"113", "0.299215126194719`", "1.7054590707756345`"},
      {"114", "0.09456003770164287`", "1.7413648859190007`"},
      {"115", 
       RowBox[{"-", "0.11440374860863722`"}], "1.7527120904431979`"},
      {"116", 
       RowBox[{"-", "0.324729199461821`"}], "1.7389836406101613`"},
      {"117", 
       RowBox[{"-", "0.5334072363350404`"}], "1.7000161366747428`"},
      {"118", 
       RowBox[{"-", "0.7374091727360095`"}], "1.636007268314538`"},
      {"119", 
       RowBox[{"-", "0.933730044933754`"}], "1.5475181675862169`"},
      {"120", 
       RowBox[{"-", "1.1194322250441`"}], "1.4354705621941664`"},
      {"121", 
       RowBox[{"-", "1.2916886925074`"}], "1.3011386951888744`"},
      {"122", 
       RowBox[{"-", "1.447825335930065`"}], "1.1461360520879864`"},
      {"123", 
       RowBox[{"-", "1.5853616621806235`"}], "0.9723970117763786`"}
     },
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{
      "Columns" -> {False, True, {False}, False}, 
       "Rows" -> {False, True, {False}, False}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[2.0999999999999996`]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
   Function[BoxForm`e$, 
    TableForm[BoxForm`e$, TableHeadings -> Automatic]]]}, {2,"\<\"Plot\"\>"->
  TemplateBox[{
    GraphicsBox[{{}, {{{
         Directive[
          PointSize[0.009166666666666668], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[CompressedData["
1:eJw1lQs0VHkcx6ccstSGWrIhaXo5eSTPEt9QzOQ5DMaY6dDh6N12NpvUNlmd
tNrqtIVataVNnnH0oE1rIk1YnfHYymszhdGIRpFXsu3xu3POnDmf+53Pvf/7
//1+9y6O3sOLmclisRK/fP//nf6o3SeTHMsy7nS50wHkH5ItHp/zmlgbs5cv
eqDxrYJYD/LwxLDLFR3E87Hf48W4Wf0L4gXoTFDEDu9sIjbBaLp1S3l0HbE5
OCL94wVlfxFbIEfSImo9nk7MhsfB64VTMbcqpnkZbssmqxqjHhOvQFNqovW+
+AZiS2RbLa6+d/Y58SpsMsg8enV3B7E15h513t6QoCC2xRWvcjcDrS7i1RAu
aK/tCeohtoOXhkO6KriXeA0aKn/OzdZQEdujY+Ai+7agj9gBwUf2H2oLeEvs
CF3j0gobBcNO+NCVmbRUp5/YGacuCGddf8LkLmgOWh9gZMLwWuz8Ja1hlyZz
/nVwU8XmsI+/IXaFvomDoft1JfF6bLC2ELnFdBO7oTZBc8jg6Stid1z0yY/X
k78kBkz96uX8hJZplgBFehmvQwobKd+AHddKdj7XklG+AQu3fT6RxSum3AON
S6KSxeyC6XpJPGDHTk5LEzym+nliZPLzlMGTRso9YaosKlixtpVyL/xzKGtA
cquTci9sX8qZPG/M9N9GlNskNht7KCnfiKH4tIlkcxXlm3Bg1Extl/uW8k04
vPcR/0zDAOXeqDH+V23ho6bcG9oXzucXDRCzfDDP1n7CUTBIuQ+024qUvGPE
LA5m/GZQfvA7JudgvaO8Q9eUyblg9+/7PiCFOT8XBZZzk8bi3lG+Gfp1neZ7
vfsp34zHB8aOmJQw6/fFSp3A4pZi5v588ecc3UwrP+b+/fDiZK/eqrPM/vjh
keda7o0FLZT7o+7u88qas3LK/aFK1z599SEzTwEoniFPMR5Mo/oFYObpT89k
/GqqXyBOdqjm71I0TTMC4dquNLymbqf/B2LCvq/Uu436RxoIqVETt0eb6bcg
sBOunpsxSPOAIHTr15+wSx4g/wtL8m2+alWTH4QbPzrl3nN5Tz4Ps5rKXnKF
H8jnoXv3AWGByxD5POSZpWSXyImlPOxXfj260nSY/GAU+275tduEGMFwMtRM
q3vK+MGw4Jh/ardj/GBsbUopcuHS9VghKDaxSjY3ovUgBK31tw36Mmm9khCc
ilK90pHSvEpDMJ46daeqjpk/Pgp2XHoo30bzBj7KVZZF1Tmd5PPRe9O5+9xq
eh5J+eCuc3ROs6ohPxRoi96iF3eR/FBEaLks2aqupHqGQq0zUTiW2TzN0lCU
yJzcWi6/pPqGIY6lUIgsu6cZYTC40F6qtZn6SxKGnuU/cHJNqR+lYeAIO32L
ZEz/huOZID7bRvaB/HBsn4rKZx8bJj8c9zujK23HP5IfjrjS1EHlolHyBUj4
KUSzT00MAe7bD7tOxY2RL0DqbrWRxTFiqQC8pBP9GZ7ErAhkeS3V/HSN8SPQ
emnhR9cbI+RHwEx/3rKcAOb6EYgpjvVXXBkiX4jqkfkabb+/J18It0Idnxoe
M49CtGXp5pgl9ZEvRF7+7JigHtovViT8vZaYO9fSfiISWVvFa8KW0ftKEomb
XXusDB3KyI9Er1Aee4bzgOonQlLeu/HIJ81UPxEyvffOKdCn94tEhJOHv1nU
lkHzIhVBa25Ns6mCef6LId5XW7X6zSD5YmSprKse5jH9K8bfrh49XMsR8sUw
E9+1/UM0VvEfqU19cQ==
          "]]}, {
         Directive[
          PointSize[0.009166666666666668], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[CompressedData["
1:eJw9lAlMk3cYhwsMRA1GjFgJh8BQHEEmcioMfraVU9tCaaGF1sVMBeMNIuqY
lTHRTWWKuslQEJkDOg90KujUFhgOh2PIIQoIohwyjs5CQWBsLrzfvqT58vSX
53++72e/blvEekMWi7Xv3e+/99SjDVDdy7ATnWwOoD/gkrgwWxbYTmwKo8nG
2TczOohnozb9hx/nnH1FPBdbBlwzDTd0Ec+H9/22OcMd3cTWqBBW3BKbvSa2
g4FNn2tBG8MOOGj0d3quuJfYEQqV5VbvzQwvgrf5tclSe4YXg+dwTVe/i/Gd
caakqCsrvofYBcYnqj//4h9mPa4oleec2uHbSbwUZcund55yeEnsBn/hionE
O8x+l+HJo4CWTKsWYnfsci+51M5rJPaAyd0VJRkmfxB7Qij1ZPP7yoi9IHOX
pYrF3xN7wyNPVf5wVvH9KfbBMYNsftXuSuLlSK5a6qpwfEy8AqqcCqOtL5uI
fZGt6XmavbaN2A/b4oJNTNQdxB/h4Jc8TfzpTmJ/rA8uvXTZqYc4AIc4O03X
xvcSA/a18hajiL4pVgLrK58dD3vaT/lKXKi98dhldIDylXDUXvUwLhyknIMy
U/0H17uJlRwkHIirLCpmci7skrzG3jNhci5CH7GHD3Uy4/PQ+il775X/5+dB
pAozyA1n1rcKjRd9vnPq6aZ8Fc4f2ZFbaMPsLxCNJ8wEM8ZfUB74bj3V1k4W
rZQHIev4K0HBlQbKg+DFytvQffc3yoNxe+29Bs+3NykPRnKxg2WTKp/uKwS2
mTlebRO/TLEyBFlpC0ta5XWUhyLNcqy4gukXZShuWi/Z/37ZC8rDYG3U6jcr
nepNGYbtvKfs1BlMva5GaIf/5Bn/PspXQ5q+YNm6eYOUr4Gkx1FjXK6lfA2m
jd9KO6r5i3I+rvdvbg5NfUM5H9EZguRMAx3lAlgUJT3J9SNWCvDn0RH1WTcm
F2Jwo2Pa1TbyIUR/eGCpQRAznhDuB60+uR9H86mFSIKbwjqI1sMKx9Coxfg3
D/vJD8eDPSk63THqT2U4dB/aBKR0Uv+pw5FZp35h+4z5fkQgLyx4Z/EQ9Rci
wPH52MqpiM5XGYGCHEvfu6/LyY8Aq3D09tGalXR/ImjT6vIrJBVTDBHm/vRw
+s9r6uk+ReAWlVz4NvT5FKtFyM8YdeJPviQ/Emer95fszaH+QCS6ljs66/RM
PUYCNU6+dXu05EeC6zaQX8V5Q74YXeXpu41qdOSLwbozsaiPPUy+GCPcArMa
tp58MbxCHC4PVhGzJFBqK++ccx4hX4KGrG1fh3kTKyU4+bxOc3yA8SWIXO15
miNk/ChYTnAWbZLTfIiCjUg6XTh/iPwo2Kcs25OQRutVRyHz3JHe1Iu0H1Y0
WDaGEedMqR8RjWDVLOfEEDoPZTS4AtFGzgI6L3U0Xvkt9Df3biZfiqG6plru
qhrypfDzid3+ln+JfCkeuSbfMDPX0P1J0XJtHWfrr/V0/zJMc9MLtifS9xYy
aD871i5TUL0oZbin97mRPZP6Qy3DEcPCBI/rTP3F4BZbNe+1C9UzYmCXsjjb
LH6Y/BjkXd3Xd0AxQn4MRiYsOkyN35IfC/N6Xn+8eIz8WFTLZQkZIePkx4Jf
7bXlfAuxOhbGtn4NVjMnyJejxu2r1PbHlEOOTTObbXnujC/H4ufzhi2W0Phq
OXaPjcfllY2Sr4BH7+DYlRE9+QrERul/T6odIl8BkfqB5oSE+lGtwK6mw5J2
m8GAfwFsonPs
          "]]}}}, {{}, {}}}, {
     DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
      NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
      AxesLabel -> {None, None}, AxesOrigin -> {0., 0}, DisplayFunction :> 
      Identity, Frame -> {{False, False}, {False, False}}, 
      FrameLabel -> {{None, None}, {None, None}}, 
      FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
      GridLines -> {None, None}, GridLinesStyle -> Directive[
        GrayLevel[0.5, 0.4]], 
      Method -> {
       "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& )}}, 
      PlotRange -> {{0., 123.}, {-1.5853616621806235`, 1.7527120904431979`}}, 
      PlotRangeClipping -> True, PlotRangePadding -> {{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
    FormBox[
     FormBox[
      TemplateBox[{
        TagBox[
         FrameBox[
          StyleBox["1", Smaller, StripOnInput -> False]], "Placeholder"], 
        TagBox[
         FrameBox[
          StyleBox["2", Smaller, StripOnInput -> False]], "Placeholder"]}, 
       "PointLegend", DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxDividers -> {
                   "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
             "Grid"], Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), 
       InterpretationFunction :> (RowBox[{"PointLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.009166666666666668`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                ",", 
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.009166666666666668`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], 
                  "]"}]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{
                TagBox[#, HoldForm], ",", 
                TagBox[#2, HoldForm]}], "}"}], ",", 
            RowBox[{"LegendMarkers", "\[Rule]", 
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
            ",", 
            RowBox[{"Joined", "\[Rule]", 
              RowBox[{"{", 
                RowBox[{"False", ",", "False"}], "}"}]}], ",", 
            RowBox[{"LabelStyle", "\[Rule]", 
              RowBox[{"{", "}"}]}], ",", 
            RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
       Editable -> True], TraditionalForm], TraditionalForm]},
   "Legended",
   DisplayFunction->(GridBox[{{
       TagBox[
        ItemBox[
         PaneBox[
          TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
          BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
        "SkipImageSizeLevel"], 
       ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
     GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
     AutoDelete -> False, GridBoxItemSize -> Automatic, 
     BaselinePosition -> {1, 1}]& ),
   Editable->True,
   InterpretationFunction->(RowBox[{"Legended", "[", 
      RowBox[{#, ",", 
        RowBox[{"Placed", "[", 
          RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}, {
  3,"\<\"2D Plot\"\>"->
  GraphicsBox[{{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
T4NmMbr32n764q7/AhBqLg4=
      "]]}, {{}, {}}},
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   Method->{
    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
     "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& )}},
   PlotRange->{{-1.5853616621806235`, 
    1.595003217232178}, {-1.4509997980145972`, 1.7527120904431979`}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}]}}, 3]], "Output",
 CellChangeTimes->{{3.9069054610657415`*^9, 3.906905469381153*^9}, {
   3.906905501968251*^9, 3.906905512825268*^9}, 3.9069055569311743`*^9, {
   3.906905684186492*^9, 3.9069057457276077`*^9}},
 CellLabel->"Out[91]=",ExpressionUUID->"50326d4c-1965-41c3-80dd-b5b3e8478a5e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"0.9", "+", 
  SqrtBox[
   RowBox[{"1", "-", 
    SuperscriptBox[
     RowBox[{"(", "0.9", ")"}], "2"]}]]}]], "Input",
 CellChangeTimes->{{3.906900363529139*^9, 3.9069003753211327`*^9}, {
  3.9069026422182417`*^9, 3.9069027208872805`*^9}},
 CellLabel->
  "In[188]:=",ExpressionUUID->"44a7206d-ac22-4451-a5fc-76587d0a8086"],

Cell[BoxData["1.3358898943540674`"], "Output",
 CellChangeTimes->{{3.906900371082497*^9, 3.9069003761629868`*^9}, 
   3.906902666532009*^9, {3.9069027050506244`*^9, 3.9069027214039936`*^9}},
 CellLabel->
  "Out[188]=",ExpressionUUID->"b7c9acf8-bfee-4d15-9c66-0ab9727b8737"]
}, Open  ]],

Cell[TextData[{
 "The characteristic equation of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", 
    RowBox[{"(", GridBox[{
       {"0", 
        RowBox[{"-", "1"}]},
       {"1", "0"}
      }], ")"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "1838db65-c9ea-402c-8f19-843d438b5950"],
 " is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "\[Lambda]"}], ")"}], "2"], "+", "1"}], "=", "0"}], 
   TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "6f12560f-5de8-4099-b20f-f80069e55fa5"],
 " so it has eigenvalues ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Lambda]", "=", 
    RowBox[{"\[PlusMinus]", "\[ImaginaryI]", " "}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "deedf741-72a8-4859-97f8-802331879832"],
 ".  Row reducing \n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"A", "-", 
      RowBox[{"\[ImaginaryI]", " ", "I"}]}], ")"}], "=", 
    RowBox[{"(", GridBox[{
       {
        RowBox[{"-", "\[ImaginaryI]"}], 
        RowBox[{"-", "1"}]},
       {"1", 
        RowBox[{"-", "\[ImaginaryI]", " "}]}
      }], ")"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "67540c7a-cbea-4dcf-9745-01d4b31c465e"],
 " \nto find an eigen vector associated with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Lambda]", "=", "\[ImaginaryI]"}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "155d0de7-01ca-47e8-9b75-f40c74f38f5f"],
 " \n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", GridBox[{
       {
        RowBox[{"-", "\[ImaginaryI]"}], 
        RowBox[{"-", "1"}]},
       {"1", 
        RowBox[{"-", "\[ImaginaryI]", " "}]}
      }], ")"}], "=", 
    RowBox[{
     RowBox[{"(", GridBox[{
        {
         RowBox[{"-", "\[ImaginaryI]", " "}], 
         RowBox[{"-", "1"}]},
        {"\[ImaginaryI]", 
         RowBox[{"-", 
          SuperscriptBox["\[ImaginaryI]", "2"]}]}
       }], ")"}], "=", 
     RowBox[{
      RowBox[{"(", GridBox[{
         {
          RowBox[{"-", "\[ImaginaryI]", " "}], 
          RowBox[{"-", "1"}]},
         {"\[ImaginaryI]", "1"}
        }], ")"}], "\[Tilde]", 
      RowBox[{"(", GridBox[{
         {
          RowBox[{"-", "\[ImaginaryI]", " "}], 
          RowBox[{"-", "1"}]},
         {"0", "0"}
        }], ")"}]}]}]}], TraditionalForm]],ExpressionUUID->
  "1e9dcdf0-d6c6-4eb6-91c0-b5c9cda115eb"],
 "\nso an eigen vector is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", GridBox[{
      {
       RowBox[{"-", "\[ImaginaryI]"}]},
      {"1"}
     }], ")"}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "6633ff0a-8a6a-46ad-9ad4-743307ba05aa"],
 " since \n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", GridBox[{
        {
         RowBox[{"-", "\[ImaginaryI]", " "}], 
         RowBox[{"-", "1"}]},
        {"0", "0"}
       }], ")"}], ".", 
     RowBox[{"(", GridBox[{
        {
         RowBox[{"-", "\[ImaginaryI]"}]},
        {"1"}
       }], ")"}]}], "=", 
    RowBox[{
     RowBox[{"(", GridBox[{
        {
         RowBox[{
          RowBox[{"-", 
           SuperscriptBox["\[ImaginaryI]", "2"]}], "-", "1"}]},
        {"0"}
       }], ")"}], "=", 
     RowBox[{
      RowBox[{"(", GridBox[{
         {
          RowBox[{"1", "-", "1"}]},
         {"0"}
        }], ")"}], "=", 
      RowBox[{"(", GridBox[{
         {"0"},
         {"0"}
        }], ")"}]}]}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "5ded92fb-6ffd-4e03-bec6-db32a7113b5a"],
 ".\nYou should check that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", GridBox[{
      {"\[ImaginaryI]"},
      {"1"}
     }], ")"}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "ec8dd2f7-7fd5-4cdf-89e9-68b0de36fbb8"],
 " is an eigenvector for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Lambda]", "=", 
    RowBox[{"-", "\[ImaginaryI]"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "681bbabb-1eb9-4747-afcd-124d403464a5"],
 ". Let see what the iterations do. "
}], "Text",
 CellChangeTimes->{{3.9068987626849194`*^9, 3.906898968296771*^9}, {
  3.906899371882407*^9, 3.906899560482238*^9}, {3.9068996143619685`*^9, 
  3.9068996342087374`*^9}, {3.906899725823457*^9, 3.906899964433572*^9}, {
  3.906900228946844*^9, 
  3.9069002524635715`*^9}},ExpressionUUID->"b6a4f8c5-cb24-465c-9458-\
9279887e6ed7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"A", "=", 
   RowBox[{"(", GridBox[{
      {"0", 
       RowBox[{"-", "1"}]},
      {"1", "0"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"v", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MaxIter", "=", "12"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"TabView", "[", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\"\<Data\>\"", "->", 
     RowBox[{"TableForm", "[", 
      RowBox[{
       RowBox[{"Data", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"v", "=", 
           RowBox[{"A", ".", "v"}]}], ",", 
          RowBox[{"{", "MaxIter", "}"}]}], "]"}]}], ",", 
       RowBox[{"TableHeadings", "\[Rule]", "Automatic"}]}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Plot\>\"", "->", 
     RowBox[{"ListPlot", "[", 
      RowBox[{
       RowBox[{"Data", "\[Transpose]"}], ",", 
       RowBox[{"PlotLegends", "\[Rule]", "Automatic"}]}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<LogPlot\>\"", "->", 
     RowBox[{"ListLogPlot", "[", 
      RowBox[{
       RowBox[{"Abs", "[", 
        RowBox[{"Data", "\[Transpose]"}], "]"}], ",", 
       RowBox[{"PlotLegends", "\[Rule]", "Automatic"}]}], "]"}]}]}], "}"}], 
  "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.906900009959792*^9, 3.906900045825262*^9}, {
   3.90690009393078*^9, 3.906900094435622*^9}, {3.906900180828082*^9, 
   3.906900220490494*^9}, 3.90690027386691*^9},
 CellLabel->
  "In[180]:=",ExpressionUUID->"c57f5cf6-cb20-4020-a38d-20dd809ab8a7"],

Cell[BoxData[
 TabViewBox[{{1,"\<\"Data\"\>"->
  TagBox[
   TagBox[GridBox[{
      {
       StyleBox["\[Null]",
        ShowStringCharacters->False], "1", "2"},
      {"1", "0.5667808013211277`", 
       RowBox[{"-", "0.936492064831532`"}]},
      {"2", "0.936492064831532`", "0.5667808013211277`"},
      {"3", 
       RowBox[{"-", "0.5667808013211277`"}], "0.936492064831532`"},
      {"4", 
       RowBox[{"-", "0.936492064831532`"}], 
       RowBox[{"-", "0.5667808013211277`"}]},
      {"5", "0.5667808013211277`", 
       RowBox[{"-", "0.936492064831532`"}]},
      {"6", "0.936492064831532`", "0.5667808013211277`"},
      {"7", 
       RowBox[{"-", "0.5667808013211277`"}], "0.936492064831532`"},
      {"8", 
       RowBox[{"-", "0.936492064831532`"}], 
       RowBox[{"-", "0.5667808013211277`"}]},
      {"9", "0.5667808013211277`", 
       RowBox[{"-", "0.936492064831532`"}]},
      {"10", "0.936492064831532`", "0.5667808013211277`"},
      {"11", 
       RowBox[{"-", "0.5667808013211277`"}], "0.936492064831532`"},
      {"12", 
       RowBox[{"-", "0.936492064831532`"}], 
       RowBox[{"-", "0.5667808013211277`"}]}
     },
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{
      "Columns" -> {False, True, {False}, False}, 
       "Rows" -> {False, True, {False}, False}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[2.0999999999999996`]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
   Function[BoxForm`e$, 
    TableForm[BoxForm`e$, TableHeadings -> Automatic]]]}, {2,"\<\"Plot\"\>"->
  TemplateBox[{
    GraphicsBox[{{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[{{1., 0.5667808013211277}, {2., 0.936492064831532}, {
          3., -0.5667808013211277}, {4., -0.936492064831532}, {5., 
          0.5667808013211277}, {6., 0.936492064831532}, {
          7., -0.5667808013211277}, {8., -0.936492064831532}, {9., 
          0.5667808013211277}, {10., 0.936492064831532}, {
          11., -0.5667808013211277}, {12., -0.936492064831532}}]}, {
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[{{1., -0.936492064831532}, {2., 0.5667808013211277}, {3., 
          0.936492064831532}, {4., -0.5667808013211277}, {
          5., -0.936492064831532}, {6., 0.5667808013211277}, {7., 
          0.936492064831532}, {8., -0.5667808013211277}, {
          9., -0.936492064831532}, {10., 0.5667808013211277}, {11., 
          0.936492064831532}, {12., -0.5667808013211277}}]}}}, {{}, {}}}, {
     DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
      NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
      AxesLabel -> {None, None}, AxesOrigin -> {0., 0}, DisplayFunction :> 
      Identity, Frame -> {{False, False}, {False, False}}, 
      FrameLabel -> {{None, None}, {None, None}}, 
      FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
      GridLines -> {None, None}, GridLinesStyle -> Directive[
        GrayLevel[0.5, 0.4]], 
      Method -> {
       "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& )}}, 
      PlotRange -> {{0., 12.}, {-0.936492064831532, 0.936492064831532}}, 
      PlotRangeClipping -> True, PlotRangePadding -> {{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
    FormBox[
     FormBox[
      TemplateBox[{
        TagBox[
         FrameBox[
          StyleBox["1", Smaller, StripOnInput -> False]], "Placeholder"], 
        TagBox[
         FrameBox[
          StyleBox["2", Smaller, StripOnInput -> False]], "Placeholder"]}, 
       "PointLegend", DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxDividers -> {
                   "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
             "Grid"], Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), 
       InterpretationFunction :> (RowBox[{"PointLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                ",", 
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], 
                  "]"}]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{
                TagBox[#, HoldForm], ",", 
                TagBox[#2, HoldForm]}], "}"}], ",", 
            RowBox[{"LegendMarkers", "\[Rule]", 
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
            ",", 
            RowBox[{"Joined", "\[Rule]", 
              RowBox[{"{", 
                RowBox[{"False", ",", "False"}], "}"}]}], ",", 
            RowBox[{"LabelStyle", "\[Rule]", 
              RowBox[{"{", "}"}]}], ",", 
            RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
       Editable -> True], TraditionalForm], TraditionalForm]},
   "Legended",
   DisplayFunction->(GridBox[{{
       TagBox[
        ItemBox[
         PaneBox[
          TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
          BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
        "SkipImageSizeLevel"], 
       ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
     GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
     AutoDelete -> False, GridBoxItemSize -> Automatic, 
     BaselinePosition -> {1, 1}]& ),
   Editable->True,
   InterpretationFunction->(RowBox[{"Legended", "[", 
      RowBox[{#, ",", 
        RowBox[{"Placed", "[", 
          RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}, {
  3,"\<\"LogPlot\"\>"->
  TemplateBox[{
    GraphicsBox[{{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[{{1., -0.5677826437909274}, {2., -0.06561423035168992}, {
          3., -0.5677826437909274}, {4., -0.06561423035168992}, {
          5., -0.5677826437909274}, {6., -0.06561423035168992}, {
          7., -0.5677826437909274}, {8., -0.06561423035168992}, {
          9., -0.5677826437909274}, {10., -0.06561423035168992}, {
          11., -0.5677826437909274}, {12., -0.06561423035168992}}]}, {
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[{{1., -0.06561423035168992}, {2., -0.5677826437909274}, {
          3., -0.06561423035168992}, {4., -0.5677826437909274}, {
          5., -0.06561423035168992}, {6., -0.5677826437909274}, {
          7., -0.06561423035168992}, {8., -0.5677826437909274}, {
          9., -0.06561423035168992}, {10., -0.5677826437909274}, {
          11., -0.06561423035168992}, {
          12., -0.5677826437909274}}]}}}, {{}, {}}}, {
     DisplayFunction -> Identity, GridLines -> {None, None}, DisplayFunction -> 
      Identity, DisplayFunction -> Identity, DisplayFunction -> Identity, 
      DisplayFunction -> Identity, AspectRatio -> 
      NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
      AxesLabel -> {None, None}, AxesOrigin -> {0., -0.6070801719632931}, 
      DisplayFunction :> Identity, Frame -> {{False, False}, {False, False}}, 
      FrameLabel -> {{None, None}, {None, None}}, FrameTicks -> {{
         Charting`ScaledTicks[{Log, Exp}], 
         Charting`ScaledFrameTicks[{Identity, Identity}]}, {
        Automatic, Automatic}}, GridLines -> {None, None}, GridLinesStyle -> 
      Directive[
        GrayLevel[0.5, 0.4]], 
      Method -> {
       "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            Identity[
             Part[#, 1]], 
            Exp[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            Identity[
             Part[#, 1]], 
            Exp[
             Part[#, 2]]}& )}}, 
      PlotRange -> {{0., 12.}, {-0.6070801719632931, -0.06561423035168992}}, 
      PlotRangeClipping -> True, PlotRangePadding -> {{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}}, Ticks -> {Automatic, 
        Charting`ScaledTicks[{Log, Exp}]}}], 
    FormBox[
     FormBox[
      TemplateBox[{
        TagBox[
         FrameBox[
          StyleBox["1", Smaller, StripOnInput -> False]], "Placeholder"], 
        TagBox[
         FrameBox[
          StyleBox["2", Smaller, StripOnInput -> False]], "Placeholder"]}, 
       "PointLegend", DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxDividers -> {
                   "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
             "Grid"], Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), 
       InterpretationFunction :> (RowBox[{"PointLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                ",", 
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], 
                  "]"}]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{
                TagBox[#, HoldForm], ",", 
                TagBox[#2, HoldForm]}], "}"}], ",", 
            RowBox[{"LegendMarkers", "\[Rule]", 
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
            ",", 
            RowBox[{"Joined", "\[Rule]", 
              RowBox[{"{", 
                RowBox[{"False", ",", "False"}], "}"}]}], ",", 
            RowBox[{"LabelStyle", "\[Rule]", 
              RowBox[{"{", "}"}]}], ",", 
            RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
       Editable -> True], TraditionalForm], TraditionalForm]},
   "Legended",
   DisplayFunction->(GridBox[{{
       TagBox[
        ItemBox[
         PaneBox[
          TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
          BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
        "SkipImageSizeLevel"], 
       ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
     GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
     AutoDelete -> False, GridBoxItemSize -> Automatic, 
     BaselinePosition -> {1, 1}]& ),
   Editable->True,
   InterpretationFunction->(RowBox[{"Legended", "[", 
      RowBox[{#, ",", 
        RowBox[{"Placed", "[", 
          RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}}, 1]], "Output",
 CellChangeTimes->{
  3.9069000205233026`*^9, {3.9069000990452843`*^9, 3.906900126629028*^9}, {
   3.9069001941110387`*^9, 3.90690022095603*^9}, 3.90690027474011*^9},
 CellLabel->
  "Out[183]=",ExpressionUUID->"06621e98-3207-4616-9087-6e55b16db999"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", 
    RowBox[{
     RowBox[{"(", GridBox[{
        {"a", 
         RowBox[{"-", "b"}]},
        {"b", "a"}
       }], ")"}], "=", 
     RowBox[{
      RowBox[{"(", GridBox[{
         {"r", "0"},
         {"0", "r"}
        }], ")"}], 
      RowBox[{"(", GridBox[{
         {
          RowBox[{"cos", "(", "\[Phi]", ")"}], 
          RowBox[{"-", 
           RowBox[{"sin", "(", "\[Phi]", ")"}]}]},
         {
          RowBox[{"sin", "(", "\[Phi]", ")"}], 
          RowBox[{"    ", 
           RowBox[{"cos", "(", "\[Phi]", ")"}]}]}
        }], ")"}]}]}]}], TraditionalForm]],ExpressionUUID->
  "bae29106-99c7-49a0-acd3-8b46c6a8e872"],
 " \nwhere  ",
 Cell[BoxData[
  FormBox[GridBox[{
     {"a", "=", 
      RowBox[{"r", " ", 
       RowBox[{"cos", "(", "\[Phi]", ")"}]}]},
     {"b", "=", 
      RowBox[{"r", " ", 
       RowBox[{"sin", "(", "\[Phi]", ")"}]}]}
    }], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "712090b9-451d-4082-aadf-ad47eeaf8f0a"]
}], "Subsubsection",
 CellChangeTimes->{{3.9068986054180684`*^9, 3.9068986129676943`*^9}, {
  3.9068986549762573`*^9, 3.906898662668729*^9}, {3.9068993356242995`*^9, 
  3.9068993504828863`*^9}, {3.9069001480218663`*^9, 3.9069001539432116`*^9}, {
  3.9069003251969223`*^9, 3.9069003264173045`*^9}, {3.9069003929126515`*^9, 
  3.906900393381379*^9}, {3.9069026310099163`*^9, 3.9069026358606453`*^9}, {
  3.906903230303596*^9, 3.9069032423847713`*^9}, {3.906905402574353*^9, 
  3.9069054093766193`*^9}, {3.9069054412719603`*^9, 3.906905452161297*^9}, {
  3.906905664005168*^9, 3.9069056744139366`*^9}, {3.9069057340677624`*^9, 
  3.9069057422214413`*^9}, {3.9069058385505257`*^9, 3.906906104162072*^9}, {
  3.90690617059702*^9, 
  3.90690621086042*^9}},ExpressionUUID->"bbe69997-684b-46fd-9a94-\
79fa8e3a26b9"],

Cell["The plan here is to tie all the earlier examples together.  ", "Text",
 CellChangeTimes->{{3.906906061295224*^9, 3.9069060638476*^9}, {
  3.906906113834721*^9, 3.906906142787531*^9}, {3.9069062234730806`*^9, 
  3.9069062251820416`*^9}},ExpressionUUID->"c1b8a884-981e-42a2-b5cd-\
5fde2885e749"],

Cell[CellGroupData[{

Cell[TextData[{
 "The characteristic equation of ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "91ad2242-ab87-48fe-b692-be042de8e05b"],
 " is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"a", "-", "\[Lambda]"}], ")"}], "2"], "+", 
     SuperscriptBox["b", "2"]}], "=", "0"}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "2e901c74-99fb-41b9-b0fa-83193e6a61d2"],
 "."
}], "Item",
 CellChangeTimes->{{3.906906237382311*^9, 
  3.9069062846838875`*^9}},ExpressionUUID->"c9d5a9b2-8980-4879-bfcb-\
f9357e5be48b"],

Cell[TextData[{
 "The eigenvalues of ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "36e32dbd-9ab4-4b68-8ca2-3cf7ec8f11bd"],
 " are ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Lambda]", "=", 
    RowBox[{"a", "\[PlusMinus]", " ", 
     RowBox[{"\[ImaginaryI]", " ", "b"}]}]}], TraditionalForm]],
  ExpressionUUID->"938adf63-ef39-49f9-93f9-9525a7fba936"]
}], "Subitem",
 CellChangeTimes->{{3.906906237382311*^9, 
  3.906906319412841*^9}},ExpressionUUID->"a16896b4-a1ec-44f6-8821-\
ef249018fa87"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SuperscriptBox["a", "2"], "+", 
    SuperscriptBox["b", "2"]}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      SuperscriptBox["r", "2"], 
      SuperscriptBox[
       RowBox[{"cos", "(", "\[Phi]", ")"}], "2"]}], "+", 
     RowBox[{
      SuperscriptBox["r", "2"], 
      SuperscriptBox[
       RowBox[{"sin", "(", "\[Phi]", ")"}], "2"]}]}], "=", 
    RowBox[{
     RowBox[{
      SuperscriptBox["r", "2"], "(", 
      RowBox[{
       RowBox[{"cos", 
        SuperscriptBox[
         RowBox[{"(", "\[Phi]", ")"}], "2"]}], "+", 
       SuperscriptBox[
        RowBox[{"sin", "(", "\[Phi]", ")"}], "2"]}], ")"}], "=", 
     SuperscriptBox["r", "2"]}]}]}], TraditionalForm]],
 FormatType->
  TraditionalForm,ExpressionUUID->"66b128f6-4072-4b41-a739-06a0d3dc165a"]], \
"Item",
 CellChangeTimes->{{3.906906237382311*^9, 3.9069062871932917`*^9}, {
  3.9069063266117744`*^9, 
  3.9069063803123446`*^9}},ExpressionUUID->"3512665b-b4d6-47c6-819b-\
285c0a7e7ec9"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{"r", "=", 
   SqrtBox[
    RowBox[{
     SuperscriptBox["a", "2"], "+", 
     SuperscriptBox["b", "2"]}]]}], TraditionalForm]],
 FormatType->
  TraditionalForm,ExpressionUUID->"4978b61c-c0c2-49d6-990f-ed9487c9cf04"]], \
"Subitem",
 CellChangeTimes->{{3.906906237382311*^9, 3.9069062871932917`*^9}, {
  3.9069063266117744`*^9, 
  3.9069063899137464`*^9}},ExpressionUUID->"e0a87eeb-3521-4f3c-ba67-\
e26cfa67dc43"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   FractionBox["b", "a"], "=", 
   RowBox[{
    FractionBox[
     RowBox[{"r", " ", 
      RowBox[{"sin", "(", "\[Phi]", ")"}]}], 
     RowBox[{"r", " ", 
      RowBox[{"cos", "(", "\[Phi]", ")"}]}]], "=", 
    RowBox[{"tan", "(", "\[Phi]", ")"}]}]}], TraditionalForm]],
 FormatType->
  TraditionalForm,ExpressionUUID->"62b12c92-f3f3-4eaa-a3fe-5a03e5a11546"]], \
"Item",
 CellChangeTimes->{{3.906906237382311*^9, 3.9069062871932917`*^9}, {
  3.9069063266117744`*^9, 
  3.906906464833276*^9}},ExpressionUUID->"63083999-cdd7-4291-b73a-\
e35e18d07b92"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{"\[Phi]", "=", 
   RowBox[{"atan", "(", 
    RowBox[{"b", "/", "a"}], ")"}]}], TraditionalForm]],
 FormatType->
  TraditionalForm,ExpressionUUID->"2700898c-cb0c-4b22-b4de-acb73bcdecd2"]], \
"Subitem",
 CellChangeTimes->{{3.906906237382311*^9, 3.9069062871932917`*^9}, {
  3.9069063266117744`*^9, 
  3.906906480619899*^9}},ExpressionUUID->"687d1e66-508e-4411-a2e0-\
0a74aabbb6f6"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"(", GridBox[{
      {"r", "0"},
      {"0", "r"}
     }], ")"}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "c5cfdeca-a3e1-4703-ab56-1bc97bf39d96"],
 " is a uniform scaling"
}], "Item",
 CellChangeTimes->{{3.906906237382311*^9, 3.9069062871932917`*^9}, {
  3.9069063266117744`*^9, 3.9069063803123446`*^9}, {3.906906509748851*^9, 
  3.906906519436407*^9}},ExpressionUUID->"145c8127-8ee0-4f52-86ad-\
22fc374f0cc1"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"(", GridBox[{
      {
       RowBox[{"cos", "(", "\[Phi]", ")"}], 
       RowBox[{"-", 
        RowBox[{"sin", "(", "\[Phi]", ")"}]}]},
      {
       RowBox[{"sin", "(", "\[Phi]", ")"}], 
       RowBox[{"    ", 
        RowBox[{"cos", "(", "\[Phi]", ")"}]}]}
     }], ")"}], TraditionalForm]],ExpressionUUID->
  "a796f771-6615-4e41-8189-0ac8e964338c"],
 " is a rotation through the angle \[Phi]"
}], "Item",
 CellChangeTimes->{{3.906906237382311*^9, 3.9069062871932917`*^9}, {
  3.9069063266117744`*^9, 3.9069063803123446`*^9}, {3.906906509748851*^9, 
  3.9069065509501324`*^9}},ExpressionUUID->"df92d266-45cc-4857-b8aa-\
70d437ae637d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{"A", "\[LongRightArrow]", 
   RowBox[{"(", GridBox[{
      {"a", 
       RowBox[{"-", "b"}]},
      {"b", "a"}
     }], ")"}]}], 
  TraditionalForm]],ExpressionUUID->"66e20569-f258-474d-a29f-18e555962c49"]], \
"Subsubsection",
 CellChangeTimes->{{3.9068986054180684`*^9, 3.9068986129676943`*^9}, {
  3.9068986549762573`*^9, 3.906898662668729*^9}, {3.9068993356242995`*^9, 
  3.9068993504828863`*^9}, {3.9069001480218663`*^9, 3.9069001539432116`*^9}, {
  3.9069003251969223`*^9, 3.9069003264173045`*^9}, {3.9069003929126515`*^9, 
  3.906900393381379*^9}, {3.9069026310099163`*^9, 3.9069026358606453`*^9}, {
  3.906903230303596*^9, 3.9069032423847713`*^9}, {3.906905402574353*^9, 
  3.9069054093766193`*^9}, {3.9069054412719603`*^9, 3.906905452161297*^9}, {
  3.906905664005168*^9, 3.9069056744139366`*^9}, {3.9069057340677624`*^9, 
  3.9069057422214413`*^9}, {3.9069058385505257`*^9, 3.906906104162072*^9}, {
  3.90690617059702*^9, 3.90690621086042*^9}, {3.906906578380252*^9, 
  3.906906634141927*^9}},ExpressionUUID->"64aeb0fc-63c8-4242-a1c5-\
e455798f8da5"],

Cell[TextData[{
 "The second last piece of the puzzle is getting from a general ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", "\[Times]", "2"}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "8b61a114-73a1-4d40-9d96-e541394d2f67"],
 " matrix to the special from above. "
}], "Text",
 CellChangeTimes->{{3.906906638214682*^9, 
  3.9069066801428337`*^9}},ExpressionUUID->"61cea62e-8c61-4bbc-a6eb-\
9123069c7dd7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"A", "=", 
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"3.2", 
       RowBox[{"-", "12.1"}]},
      {"9.2", "1.3"}
     }], "\[NoBreak]", ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"v1", ",", "v2"}], "}"}], "=", 
   RowBox[{"Eigenvectors", "[", "A", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P1", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"v1", ",", "v2"}], "}"}], "\[Transpose]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", 
  RowBox[{"Chop", "[", 
   RowBox[{
    RowBox[{"Inverse", "[", "P1", "]"}], ".", "A", ".", "P1"}], "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P2", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Re", "[", "v1", "]"}], ",", 
      RowBox[{"Im", "[", "v1", "]"}]}], "}"}], "\[Transpose]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", 
  RowBox[{"Chop", "[", 
   RowBox[{
    RowBox[{"Inverse", "[", "P2", "]"}], ".", "A", ".", "P2"}], "]"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.9069066903324833`*^9, 3.9069067688717117`*^9}, {
  3.906906834878693*^9, 3.906906948462423*^9}},
 CellLabel->
  "In[149]:=",ExpressionUUID->"0d46f2de-0fca-4440-880c-6966a8afdc06"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"2.25`", "\[VeryThinSpace]", "+", 
       RowBox[{"10.50797316326988`", " ", "\[ImaginaryI]"}]}], "0"},
     {"0", 
      RowBox[{"2.25`", "\[VeryThinSpace]", "-", 
       RowBox[{"10.507973163269881`", " ", "\[ImaginaryI]"}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.906906699301779*^9, 3.9069067693345394`*^9}, {
  3.906906861910138*^9, 3.9069068742552347`*^9}, {3.906906909437806*^9, 
  3.906906948979869*^9}},
 CellLabel->
  "Out[152]//MatrixForm=",ExpressionUUID->"b55fe530-2672-4960-901f-\
42447371e786"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"2.25`", "10.50797316326988`"},
     {
      RowBox[{"-", "10.50797316326988`"}], "2.2499999999999996`"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.906906699301779*^9, 3.9069067693345394`*^9}, {
  3.906906861910138*^9, 3.9069068742552347`*^9}, {3.906906909437806*^9, 
  3.9069069489873915`*^9}},
 CellLabel->
  "Out[154]//MatrixForm=",ExpressionUUID->"7d34d1a4-3cc9-4fb5-8b5d-\
72514e9c9e22"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Row Op Code", "Section",
 CellChangeTimes->{{3.9028328951014414`*^9, 
  3.9028328990687666`*^9}},ExpressionUUID->"5c26734a-889b-46d3-a44c-\
43d529158be1"],

Cell[BoxData[{
 RowBox[{"Clear", "[", 
  RowBox[{"RowScale", ",", "RowSwitch", ",", "RowAdd"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RowScale", "[", 
   RowBox[{"A_", ",", 
    RowBox[{"{", 
     RowBox[{"i_", ",", " ", "\[Alpha]_"}], "}"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ANew", "=", "A"}], ",", "s"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"s", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"StringForm", "[", 
         RowBox[{"\"\<\!\(\*SubscriptBox[\(row\), \(``\)]\)\>\"", ",", "k"}], 
         "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"k", ",", " ", 
          RowBox[{"Length", "[", "A", "]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ANew", "\[LeftDoubleBracket]", 
       RowBox[{"i", ",", "All"}], "\[RightDoubleBracket]"}], "=", 
      RowBox[{"\[Alpha]", " ", 
       RowBox[{"ANew", "\[LeftDoubleBracket]", 
        RowBox[{"i", ",", "All"}], "\[RightDoubleBracket]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"s", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], 
      "=", 
      RowBox[{"StringForm", "[", 
       RowBox[{
       "\"\<\!\(\*SubscriptBox[\(row\), \
\(``\)]\)\[Rule](``)\!\(\*SubscriptBox[\(row\), \(``\)]\)\>\"", ",", "i", ",",
         "\[Alpha]", ",", "i"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"MatrixForm", "[", "ANew", "]"}], ",", 
       RowBox[{"TableForm", "[", "s", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "ANew"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RowSwitch", "[", 
   RowBox[{"A_", ",", 
    RowBox[{"{", 
     RowBox[{"i_", ",", "j_"}], "}"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ANew", "=", "A"}], ",", "s"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"s", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"StringForm", "[", 
         RowBox[{"\"\<\!\(\*SubscriptBox[\(row\), \(``\)]\)\>\"", ",", "k"}], 
         "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"k", ",", " ", 
          RowBox[{"Length", "[", "A", "]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"s", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], 
      "=", 
      RowBox[{"StringForm", "[", 
       RowBox[{
       "\"\<\!\(\*SubscriptBox[\(row\), \
\(``\)]\)\[Rule]\!\(\*SubscriptBox[\(row\), \(``\)]\)\>\"", ",", "i", ",", 
        "j"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"s", "\[LeftDoubleBracket]", "j", "\[RightDoubleBracket]"}], 
      "=", 
      RowBox[{"StringForm", "[", 
       RowBox[{
       "\"\<\!\(\*SubscriptBox[\(row\), \
\(``\)]\)\[Rule]\!\(\*SubscriptBox[\(row\), \(``\)]\)\>\"", ",", "j", ",", 
        "i"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ANew", "\[LeftDoubleBracket]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"i", ",", "j"}], "}"}], ",", "All"}], 
       "\[RightDoubleBracket]"}], "=", 
      RowBox[{"ANew", "\[LeftDoubleBracket]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"j", ",", "i"}], "}"}], ",", "All"}], 
       "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"MatrixForm", "[", "ANew", "]"}], ",", 
       RowBox[{"TableForm", "[", "s", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "ANew"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RowAdd", "[", 
   RowBox[{"A_", ",", 
    RowBox[{"{", 
     RowBox[{"i_", ",", "\[Alpha]_", ",", "p_"}], "}"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ANew", "=", "A"}], ",", "s"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"s", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"StringForm", "[", 
         RowBox[{"\"\<\!\(\*SubscriptBox[\(row\), \(``\)]\)\>\"", ",", "k"}], 
         "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"k", ",", " ", 
          RowBox[{"Length", "[", "A", "]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"s", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], 
      "=", 
      RowBox[{"StringForm", "[", 
       RowBox[{
       "\"\<\!\(\*SubscriptBox[\(row\), \(``\)]\)\[Rule] \
\!\(\*SubscriptBox[\(row\), \(``\)]\)+(\!\(\*SubscriptBox[\(``row\), \
\(``\)]\))\>\"", ",", "i", ",", "i", ",", "\[Alpha]", ",", " ", "p"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ANew", "\[LeftDoubleBracket]", 
       RowBox[{"i", ",", "All"}], "\[RightDoubleBracket]"}], "=", 
      RowBox[{
       RowBox[{"ANew", "\[LeftDoubleBracket]", 
        RowBox[{"i", ",", "All"}], "\[RightDoubleBracket]"}], "+", " ", 
       RowBox[{"\[Alpha]", " ", 
        RowBox[{"ANew", "\[LeftDoubleBracket]", 
         RowBox[{"p", ",", "All"}], "\[RightDoubleBracket]"}]}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"MatrixForm", "[", "ANew", "]"}], ",", 
       RowBox[{"TableForm", "[", "s", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "ANew"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Clear", "[", "RowAdd", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RowAdd", "[", 
   RowBox[{"A_", ",", 
    RowBox[{"{", 
     RowBox[{"i\[Alpha]s_", ",", "p_"}], "}"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ANew", "=", "A"}], ",", "s", ",", "i", ",", "\[Alpha]"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"s", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"StringForm", "[", 
         RowBox[{"\"\<\!\(\*SubscriptBox[\(row\), \(``\)]\)\>\"", ",", "k"}], 
         "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"k", ",", " ", 
          RowBox[{"Length", "[", "A", "]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", "\[Alpha]"}], "}"}], "=", 
         RowBox[{
         "i\[Alpha]s", "\[LeftDoubleBracket]", "j", 
          "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"s", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], 
         "=", 
         RowBox[{"StringForm", "[", 
          RowBox[{
          "\"\<\!\(\*SubscriptBox[\(row\), \(``\)]\)\[Rule] \
\!\(\*SubscriptBox[\(row\), \(``\)]\)+(\!\(\*SubscriptBox[\(``row\), \
\(``\)]\))\>\"", ",", "i", ",", "i", ",", "\[Alpha]", ",", " ", "p"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ANew", "\[LeftDoubleBracket]", 
          RowBox[{"i", ",", "All"}], "\[RightDoubleBracket]"}], "=", 
         RowBox[{
          RowBox[{"ANew", "\[LeftDoubleBracket]", 
           RowBox[{"i", ",", "All"}], "\[RightDoubleBracket]"}], "+", " ", 
          RowBox[{"\[Alpha]", " ", 
           RowBox[{"ANew", "\[LeftDoubleBracket]", 
            RowBox[{"p", ",", "All"}], "\[RightDoubleBracket]"}]}]}]}]}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"j", ",", 
         RowBox[{"Length", "[", "i\[Alpha]s", "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ANew", "=", 
      RowBox[{"Simplify", "[", "ANew", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"MatrixForm", "[", "ANew", "]"}], ",", 
       RowBox[{"TableForm", "[", "s", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "ANew"}]}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.9025222040548058`*^9, 3.902522688811363*^9}, {
   3.902522809234256*^9, 3.902522862117859*^9}, 3.902522893587943*^9, {
   3.90252293637116*^9, 3.9025229409044313`*^9}, {3.9025229746671543`*^9, 
   3.902522990191957*^9}, {3.902523031737338*^9, 3.902523078896566*^9}, {
   3.902523113357407*^9, 3.9025231207529497`*^9}, {3.9025232328286953`*^9, 
   3.902523261689928*^9}, {3.9025233017719088`*^9, 3.902523321902813*^9}, {
   3.9025253198585176`*^9, 3.902525343090293*^9}, {3.902765773336645*^9, 
   3.90276578680836*^9}, {3.902765935450306*^9, 3.9027660084078593`*^9}, {
   3.9027660385751886`*^9, 3.902766135385269*^9}, {3.9027661852743845`*^9, 
   3.90276618751116*^9}, {3.9027668190669928`*^9, 3.9027668208664913`*^9}, {
   3.902766890078801*^9, 3.902766895037586*^9}, {3.9027669983831015`*^9, 
   3.9027669986731668`*^9}, 3.9028299789115953`*^9, {3.9028302036985703`*^9, 
   3.902830244413587*^9}, {3.902830293858634*^9, 3.9028306483338337`*^9}, {
   3.9028306830992174`*^9, 3.9028308887606993`*^9}, {3.902830955253166*^9, 
   3.902830981572176*^9}, {3.9028312934755526`*^9, 3.9028312942718534`*^9}, {
   3.902831486049415*^9, 3.90283156141187*^9}, {3.9028316365910025`*^9, 
   3.9028316607707396`*^9}, {3.902831703711198*^9, 3.9028317767985153`*^9}, {
   3.902831815669244*^9, 3.9028319009527917`*^9}, {3.9028319732226763`*^9, 
   3.9028319799112015`*^9}, {3.9058426318115125`*^9, 3.905842633514278*^9}, {
   3.9058429984165397`*^9, 3.905843003755211*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"3608da8d-2ee3-4e7d-a9a8-137ab8c6e9cf"]
}, Closed]]
}, Open  ]]
},
WindowToolbars->{"RulerBar", "EditBar"},
WindowSize->{1141., 483.5},
WindowMargins->{{1329, Automatic}, {Automatic, -104.5}},
TaggingRules->Association["TryRealOnly" -> False],
Magnification->1.5,
FrontEndVersion->"12.3 for Microsoft Windows (64-bit) (May 11, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7646990a-d0e4-48fc-973e-4fbacf91b7d2"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 204, 4, 146, "Title",ExpressionUUID->"2411f8aa-dda1-4de9-9dc1-fddd9660e667"],
Cell[CellGroupData[{
Cell[809, 30, 295, 5, 100, "Section",ExpressionUUID->"124a94b1-5c4b-4bd3-9429-d3d515e88560"],
Cell[1107, 37, 281, 6, 52, "Text",ExpressionUUID->"e4d8c6ca-3dec-4751-be99-3e01f0531679"],
Cell[1391, 45, 2812, 90, 185, "Text",ExpressionUUID->"14a59732-0e99-48f0-92b0-dd704d063d65"],
Cell[4206, 137, 1263, 37, 122, "Text",ExpressionUUID->"f28e31d4-cc5c-4d1a-bf6d-848cc0584008"],
Cell[5472, 176, 736, 19, 76, "Text",ExpressionUUID->"c0e0a35b-87d2-4ef4-af5e-e3753637c85c"]
}, Closed]],
Cell[CellGroupData[{
Cell[6245, 200, 578, 8, 77, "Section",ExpressionUUID->"df3861a8-67e3-4d73-9619-5c53beb7e949"],
Cell[6826, 210, 819, 22, 87, "Text",ExpressionUUID->"3f80bb22-2593-48af-9599-f3b0854e41b2"],
Cell[7648, 234, 2602, 69, 296, "Input",ExpressionUUID->"541b9a3a-bcc4-4c4e-96f9-19bf2f52973b"],
Cell[10253, 305, 930, 25, 87, "Text",ExpressionUUID->"a0d90169-1c98-477e-9d87-88ab32b4e1e0"],
Cell[11186, 332, 3410, 85, 353, "Input",ExpressionUUID->"d83749f2-cc7e-4c43-9443-cb411a828ba3"],
Cell[14599, 419, 984, 29, 111, "Text",ExpressionUUID->"1a660753-d3ec-4107-a167-894122cbbea8"],
Cell[CellGroupData[{
Cell[15608, 452, 1172, 27, 102, "ItemNumbered",ExpressionUUID->"e06f1caf-ad3a-468f-810b-4a177e5d1e8c"],
Cell[CellGroupData[{
Cell[16805, 483, 340, 9, 65, "Input",ExpressionUUID->"26ebad4f-ea19-46fd-bb1b-6ea366acbff8"],
Cell[17148, 494, 220, 4, 48, "Output",ExpressionUUID->"81e0b205-f697-4488-bf99-330d215322c8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[17417, 504, 1723, 43, 132, "ItemNumbered",ExpressionUUID->"e3db8ee8-2bd4-45b8-8be5-e1adc20ce94b"],
Cell[CellGroupData[{
Cell[19165, 551, 760, 21, 91, "Input",ExpressionUUID->"db417bde-84e5-43f9-9fa5-6f9aaa73d490"],
Cell[19928, 574, 206, 4, 48, "Output",ExpressionUUID->"6910ced9-2c59-4b73-a57a-c83289e8b7bb"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[20183, 584, 1755, 43, 132, "ItemNumbered",ExpressionUUID->"3971e14e-3ccd-4e7a-8ccc-083083a174b7"],
Cell[CellGroupData[{
Cell[21963, 631, 788, 22, 91, "Input",ExpressionUUID->"8a5f3a52-4c6c-43a3-bf90-7e7e536c7751"],
Cell[22754, 655, 268, 7, 48, "Output",ExpressionUUID->"857cec00-8ef3-4508-b108-44879b1aad0e"]
}, Open  ]]
}, Open  ]],
Cell[23049, 666, 2070, 65, 127, "ItemNumbered",ExpressionUUID->"aca20a1e-bf36-40a5-a36b-5f355ec613dc"],
Cell[25122, 733, 343, 7, 87, "Text",ExpressionUUID->"dfb2a58a-30de-4719-a1cc-580582c3ea8d"],
Cell[25468, 742, 1153, 34, 111, "Text",ExpressionUUID->"a52ee24b-cd18-45fc-a35e-d7898fc264cd"],
Cell[26624, 778, 4141, 127, 289, "ItemNumbered",ExpressionUUID->"7084eaf2-06c1-4a75-87f7-8a24f3e4a2c4"],
Cell[30768, 907, 722, 21, 87, "Text",ExpressionUUID->"2a88ed8f-889b-4842-9294-e00005c1ff61"]
}, Closed]],
Cell[CellGroupData[{
Cell[31527, 933, 174, 3, 77, "Section",ExpressionUUID->"9af20188-903e-4030-b6e4-deef91705439"],
Cell[31704, 938, 200, 3, 52, "Text",ExpressionUUID->"778dc6b0-0bf6-468c-a054-89b9b0f2631d"],
Cell[31907, 943, 3521, 114, 371, "ItemNumbered",ExpressionUUID->"6038fdb4-0e58-45ac-acb9-0649be30d42c"],
Cell[35431, 1059, 527, 11, 87, "Text",ExpressionUUID->"189a3067-1385-4093-8506-32c72bb3dcf7"],
Cell[35961, 1072, 1051, 32, 111, "Text",ExpressionUUID->"56afa08c-5ad7-4fda-b61c-4db4bc426ae5"],
Cell[CellGroupData[{
Cell[37037, 1108, 160, 3, 81, "Subsection",ExpressionUUID->"6fd6fe76-c28c-4587-a931-a5fa9d80edc2"],
Cell[37200, 1113, 887, 28, 76, "Text",ExpressionUUID->"2e512bcb-2ae8-4796-8383-67891c5f37d2"],
Cell[38090, 1143, 841, 22, 111, "Text",ExpressionUUID->"a705e4cf-49fd-4fc4-95f3-bdc25c6b8f20"],
Cell[38934, 1167, 1952, 58, 121, "Text",ExpressionUUID->"bc6f2382-384d-420f-bc03-65406c1e799b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40923, 1230, 241, 4, 81, "Subsection",ExpressionUUID->"a82ca68f-42a0-4095-940b-f895995ac659"],
Cell[41167, 1236, 1287, 41, 135, "Text",ExpressionUUID->"4cd62ba4-36a2-42c1-9181-86e5d9522df6"],
Cell[42457, 1279, 4063, 126, 330, "Text",ExpressionUUID->"f96c1818-bbf1-4a82-8de2-39e45014abe6"],
Cell[CellGroupData[{
Cell[46545, 1409, 616, 16, 154, "Input",ExpressionUUID->"dd912cf5-6f7c-4415-a83f-e5bcdd80d704"],
Cell[47164, 1427, 665, 13, 48, "Output",ExpressionUUID->"0e8b668a-a808-4b7a-bfa7-8486823cf9f1"]
}, Open  ]],
Cell[47844, 1443, 1129, 33, 156, "Text",ExpressionUUID->"ed2697c6-0bbb-49dd-94de-26ffcf051621"],
Cell[CellGroupData[{
Cell[48998, 1480, 1386, 36, 186, "Input",ExpressionUUID->"c66e97bb-a51a-4ee9-bfda-d44324892355"],
Cell[50387, 1518, 4711, 101, 942, "Output",ExpressionUUID->"d950d521-5af0-408a-8db3-4a07d5ad91a1"],
Cell[55101, 1621, 397, 8, 48, "Output",ExpressionUUID->"da96d6a3-175e-4367-82b1-d74dc5041e94"]
}, Open  ]],
Cell[CellGroupData[{
Cell[55535, 1634, 559, 11, 71, "Input",ExpressionUUID->"9fa07e4b-1fea-4a2d-8a06-986037531013"],
Cell[56097, 1647, 702, 14, 48, "Output",ExpressionUUID->"95d74a58-e5e6-47e4-aab4-f871ff93a2e3"]
}, Open  ]],
Cell[56814, 1664, 108138, 1777, 240, "Input",ExpressionUUID->"3b90e729-a28d-4120-bce6-0f930d6cfacd"],
Cell[164955, 3443, 315866, 5182, 546, "Input",ExpressionUUID->"eda0bd4d-4a3a-4967-a485-28a1561eacf1"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[480870, 8631, 217, 4, 77, "Section",ExpressionUUID->"4b370e5a-1b0e-481a-9ae5-17e3dc8a37e3"],
Cell[481090, 8637, 2601, 85, 248, "Text",ExpressionUUID->"295cdb6a-0b4d-4cbb-a2b2-9ec8695ed30a"],
Cell[483694, 8724, 850, 27, 76, "Text",ExpressionUUID->"6a27de68-b1f0-4fdb-a2b8-189d24d6ac7a"],
Cell[484547, 8753, 2056, 62, 157, "Text",ExpressionUUID->"9ca88ce2-8824-450f-9beb-dd4c25a27d0c"],
Cell[486606, 8817, 510, 11, 111, "Text",ExpressionUUID->"ef8ec2e4-0fac-4744-a211-dbdf39a3ccb0"],
Cell[487119, 8830, 4433, 134, 369, "Text",ExpressionUUID->"b0740a0f-e366-4f88-a3d3-941bd44a8799"],
Cell[CellGroupData[{
Cell[491577, 8968, 1158, 34, 101, "ItemNumbered",ExpressionUUID->"9118ca08-a2a8-4e70-a436-50052bc12bb1"],
Cell[492738, 9004, 420, 6, 39, "SubitemNumbered",ExpressionUUID->"2b7a2f82-1e5a-45e6-a7f2-0384fc25aa9c"],
Cell[493161, 9012, 653, 15, 39, "SubitemNumbered",ExpressionUUID->"ee36dbfd-5f09-4f96-83ce-1f31578c2412"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[493863, 9033, 271, 4, 77, "Section",ExpressionUUID->"4d8b28bb-1ce1-4557-9983-039ce8dacc51"],
Cell[494137, 9039, 2732, 77, 190, "Text",ExpressionUUID->"b0cbce34-35b1-434a-b0dd-8db8f9ae2592"],
Cell[CellGroupData[{
Cell[496894, 9120, 165, 3, 81, "Subsection",ExpressionUUID->"5bd0e29d-dfa7-4c2f-a0dd-e6b96506f6a4"],
Cell[497062, 9125, 844, 24, 87, "Text",ExpressionUUID->"49d23c7f-35ad-4570-9aa5-0454496c0416"],
Cell[CellGroupData[{
Cell[497931, 9153, 972, 26, 211, "Input",ExpressionUUID->"679dd151-20d0-4d61-adad-40b74d24a2ac"],
Cell[498906, 9181, 786, 19, 48, "Output",ExpressionUUID->"0f9e803e-5688-412c-8e24-9cd7c6166d60"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[499741, 9206, 176, 3, 81, "Subsection",ExpressionUUID->"03e96b4d-1079-4c6d-93a0-4650bdbee063"],
Cell[499920, 9211, 268, 6, 87, "Text",ExpressionUUID->"b30e674c-1507-4b8f-9ac8-a13789d755a3"],
Cell[CellGroupData[{
Cell[500213, 9221, 166, 3, 67, "Subsubsection",ExpressionUUID->"dba80fe0-a43c-4505-b2df-da5690bbbd6f"],
Cell[500382, 9226, 496, 14, 154, "Input",ExpressionUUID->"6afb75c2-2bc5-4603-a9a1-2a319d0f2bf8"],
Cell[500881, 9242, 458, 8, 87, "Text",ExpressionUUID->"37ab454f-54a7-493c-b4b9-56ed609029b4"],
Cell[CellGroupData[{
Cell[501364, 9254, 656, 16, 100, "Input",ExpressionUUID->"3defeb94-bc52-4531-a599-986693a1dd81"],
Cell[502023, 9272, 2865, 74, 374, "Output",ExpressionUUID->"b84ec3f3-7488-46a7-8b5f-54c091866a9a"]
}, Open  ]],
Cell[504903, 9349, 188, 3, 52, "Text",ExpressionUUID->"bf301c05-bc30-4bb4-8950-bb1f073195d3"],
Cell[CellGroupData[{
Cell[505116, 9356, 1613, 39, 186, "Input",ExpressionUUID->"2a059bd2-9f3f-4900-97a8-dc605d2b213b"],
Cell[506732, 9397, 50009, 1069, 786, "Output",ExpressionUUID->"71878f02-4dfe-4386-8d52-abd04427bd39"]
}, Open  ]],
Cell[556756, 10469, 635, 14, 87, "Text",ExpressionUUID->"6e565566-4964-4a92-acde-6906abcf4df2"],
Cell[CellGroupData[{
Cell[557416, 10487, 221, 4, 42, "Input",ExpressionUUID->"ae82137f-f957-4b7a-add2-367a430ee691"],
Cell[557640, 10493, 1218, 28, 77, "Output",ExpressionUUID->"abfce851-37de-4ed6-a85b-c0ec7e63b5c4"]
}, Open  ]],
Cell[558873, 10524, 188, 3, 52, "Text",ExpressionUUID->"be82c843-ced3-4032-a68f-fc02180d3674"],
Cell[CellGroupData[{
Cell[559086, 10531, 819, 24, 100, "Input",ExpressionUUID->"ba08650d-fdfd-4ce6-86fa-d03c8e6aa8a7"],
Cell[559908, 10557, 737, 14, 85, "Output",ExpressionUUID->"d693133f-6223-41cd-a756-2398fb96a47b"],
Cell[560648, 10573, 737, 14, 101, "Output",ExpressionUUID->"ce1492ab-483c-4d82-aba2-2e592ce3370b"]
}, Open  ]],
Cell[561400, 10590, 733, 18, 87, "Text",ExpressionUUID->"667dfe0a-f0ee-4d42-a101-de173a03533d"],
Cell[CellGroupData[{
Cell[562158, 10612, 1582, 39, 186, "Input",ExpressionUUID->"af86a0c9-f8d8-4b20-9989-ea83e199f8ad"],
Cell[563743, 10653, 50226, 1061, 954, "Output",ExpressionUUID->"2bc66d89-8f9b-4ce1-bcfc-d763c7814796"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[614018, 11720, 614, 17, 97, "Subsubsection",ExpressionUUID->"f06d6574-58ba-46fa-aabe-aa6b1da0502f"],
Cell[614635, 11739, 4444, 155, 405, "Text",ExpressionUUID->"a667ce2c-055f-4b4b-a1d7-65443e5bdcbc"],
Cell[CellGroupData[{
Cell[619104, 11898, 1819, 50, 267, "Input",ExpressionUUID->"d87722ee-1c4d-4e6e-aa70-c213df29e98b"],
Cell[620926, 11950, 28335, 610, 422, "Output",ExpressionUUID->"379bea5d-fd0f-4395-8a40-b8ebfadcca15"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[649310, 12566, 841, 19, 83, "Subsubsection",ExpressionUUID->"1bede651-32b6-4e3b-af5d-39ac2c7a53fd"],
Cell[CellGroupData[{
Cell[650176, 12589, 1822, 49, 267, "Input",ExpressionUUID->"28675e51-4737-4c29-8831-21b0cdffa25a"],
Cell[652001, 12640, 17147, 381, 554, "Output",ExpressionUUID->"5b9577d6-d6bc-4f5d-b037-8dcf6827fd74"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[669197, 13027, 1052, 22, 83, "Subsubsection",ExpressionUUID->"fa995ca7-558b-4b7b-8dc1-aafb41dc4e86"],
Cell[CellGroupData[{
Cell[670274, 13053, 1920, 50, 267, "Input",ExpressionUUID->"5db047e6-4b5a-45a2-90cb-fea269a34f6c"],
Cell[672197, 13105, 30819, 670, 3297, "Output",ExpressionUUID->"50326d4c-1965-41c3-80dd-b5b3e8478a5e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[703053, 13780, 345, 9, 50, "Input",ExpressionUUID->"44a7206d-ac22-4451-a5fc-76587d0a8086"],
Cell[703401, 13791, 273, 4, 48, "Output",ExpressionUUID->"b7c9acf8-bfee-4d15-9c66-0ab9727b8737"]
}, Open  ]],
Cell[703689, 13798, 4444, 155, 405, "Text",ExpressionUUID->"b6a4f8c5-cb24-465c-9458-9279887e6ed7"],
Cell[CellGroupData[{
Cell[708158, 13957, 1722, 49, 267, "Input",ExpressionUUID->"c57f5cf6-cb20-4020-a38d-20dd809ab8a7"],
Cell[709883, 14008, 28339, 609, 427, "Output",ExpressionUUID->"06621e98-3207-4616-9087-6e55b16db999"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[738271, 14623, 1849, 50, 152, "Subsubsection",ExpressionUUID->"bbe69997-684b-46fd-9a94-79fa8e3a26b9"],
Cell[740123, 14675, 299, 4, 52, "Text",ExpressionUUID->"c1b8a884-981e-42a2-b5cd-5fde2885e749"],
Cell[CellGroupData[{
Cell[740447, 14683, 649, 21, 48, "Item",ExpressionUUID->"c9d5a9b2-8980-4879-bfcb-f9357e5be48b"],
Cell[741099, 14706, 516, 15, 39, "Subitem",ExpressionUUID->"a16896b4-a1ec-44f6-8821-ef249018fa87"]
}, Open  ]],
Cell[CellGroupData[{
Cell[741652, 14726, 1021, 32, 48, "Item",ExpressionUUID->"3512665b-b4d6-47c6-819b-285c0a7e7ec9"],
Cell[742676, 14760, 459, 13, 42, "Subitem",ExpressionUUID->"e0a87eeb-3521-4f3c-ba67-e26cfa67dc43"]
}, Open  ]],
Cell[CellGroupData[{
Cell[743172, 14778, 598, 17, 55, "Item",ExpressionUUID->"63083999-cdd7-4291-b73a-e35e18d07b92"],
Cell[743773, 14797, 427, 11, 38, "Subitem",ExpressionUUID->"687d1e66-508e-4411-a2e0-0a74aabbb6f6"]
}, Open  ]],
Cell[744215, 14811, 491, 14, 71, "Item",ExpressionUUID->"145c8127-8ee0-4f52-86ad-22fc374f0cc1"],
Cell[744709, 14827, 691, 19, 73, "Item",ExpressionUUID->"df92d266-45cc-4857-b8aa-70d437ae637d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[745437, 14851, 1107, 21, 97, "Subsubsection",ExpressionUUID->"64aeb0fc-63c8-4242-a1c5-e455798f8da5"],
Cell[746547, 14874, 431, 11, 52, "Text",ExpressionUUID->"61cea62e-8c61-4bbc-a6eb-9123069c7dd7"],
Cell[CellGroupData[{
Cell[747003, 14889, 1279, 40, 210, "Input",ExpressionUUID->"0d46f2de-0fca-4440-880c-6966a8afdc06"],
Cell[748285, 14931, 964, 25, 89, "Output",ExpressionUUID->"b55fe530-2672-4960-901f-42447371e786"],
Cell[749252, 14958, 827, 22, 89, "Output",ExpressionUUID->"7d34d1a4-3cc9-4fb5-8b5d-72514e9c9e22"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[750152, 14988, 160, 3, 100, "Section",ExpressionUUID->"5c26734a-889b-46d3-a44c-43d529158be1"],
Cell[750315, 14993, 9436, 229, 924, "Input",ExpressionUUID->"3608da8d-2ee3-4e7d-a9a8-137ab8c6e9cf",
 InitializationCell->True]
}, Closed]]
}, Open  ]]
}
]
*)

